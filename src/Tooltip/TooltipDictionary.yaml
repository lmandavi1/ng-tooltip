tagInputId: "**Sample tag input tooltip**"
idforexpressioninput: Here's an [**important** anchor link](#example)
jiraApprovalProject: Select the Jira project that contains the issue you want to evaluate.
jiraApprovalIssueType: Select the issue type of the issue you want to use.
jiraApprovalIssueKey: |-
    Enter the Jira issue key of the issue you want to evaluate.

    You can use an expression to reference the **Key ID** from another **Jira Create** or **Jira Update** step.

    The **Jira Create** or **Jira Update** step you want to reference must be *before* the **Jira Approval** step that references it in the Pipeline and stage. [Learn More](https://docs.harness.io/article/2lhfk506r8)
ONNtooltipId: Your pipeline name
specifyYourService:
    content: Harness Services represent your microservices/apps logically. You can propagate the same Service to as many stages as you need. [Learn More](https://docs.harness.io/article/hv2758ro4e)
    width: "400"
stageOverviewDeploymentType:
    content: |-
        The deployment type is how your Service will be deployed. For example, using Kubernetes, Native Helm, Serverless, etc.
          

        Select the platform for your deployment. When you select a platform, its specific settings appear.
          

        **Note:** If you change the deployment type (for example, from Kubernetes to Native Helm) there might be some conflicting resources in the target environment. As a result, Stage execution can fail. If this happens, delete all the conflicting resources and try again. You will also lose any deployment type-specific steps in this stage's **Execution**.
    width: "400"
deploymentTypeManifests:
    content: Add the manifests that describe the app you are deploying. All files in **Manifests** must have the .yaml file extension. [Learn More](https://docs.harness.io/article/ssbq0xh0hx)
    width: "400"
deploymentTypeArtifacts:
    content: |-
        If the path of the artifact is not hardcoded in the manifest you added in **Manifests**, you can add the artifact location to Harness in **Artifacts**. [Learn More](https://docs.harness.io/article/4ifq51cp0i)


        Next, you reference the artifact you added in **Artifacts** in your manifest like this:

        ```
        image: <+artifact.image>
        ``` 


        At runtime, this expression resolves to the full path of the artifact, like `docker.io/bitnami/nginx:1.22.0-debian-11-r0`.

        If you only want the name of the artifact, use the expression `<+artifact.imagePath>`.

        [Learn More about expressions](https://docs.harness.io/article/lml71vhsim)
    width: "650"
ciEditStage_name: Enter a name for the stage. [Learn more](https://docs.harness.io/article/2chyf1acil)
ciEditStage_repoName: Enter the name of the Git repo containing your codebase. [Learn more](https://docs.harness.io/article/8l31vtr4hi)
ciBuildStage_name: Enter a name for the stage. [Learn More](https://docs.harness.io/article/2chyf1acil-add-a-stage)
dependencyBase_name: Enter a name for this Service Dependency step. [Learn More](https://docs.harness.io/article/vo4sjbd09g-configure-service-dependency-step-settings)
ciRunStep_name: The Run step executes one or more commands on a container image. Enter a name for this Run step. [Learn More](https://docs.harness.io/article/1i1ttvftm4-run-step-settings)
pluginStep_name: |-
    Enter a unique name for this Plugin step. 

    Plugins are Docker containers that perform predefined tasks. Plugins are configured as steps in your stage. Plugins can be used to deploy code, publish artifacts, send notifications, and more. [Learn More](https://docs.harness.io/article/8r5c3yvb8k)
restoreCacheS3_name: |-
    Enter a name for this step.

    The [Save Cache to S3](https://docs.harness.io/article/qtvjvrp9sn) step preserves files and directories between builds.

    You can restore cache using the [Restore Cache from S3](https://docs.harness.io/article/zlpx6lli6d) step.
restoreCacheGcs_name: |-
    Enter a name for this step.

    The [Restore Cache from GCS](https://docs.harness.io/article/e2o4sektz1) step restores files and directories that were saved using the [Save Cache to GCS](https://docs.harness.io/article/11nzeuntrz) step.
savedS3Cache_name: |-
    Enter a name for this step.

    The [Save Cache to S3](https://docs.harness.io/article/qtvjvrp9sn) step preserves files and directories between builds.

    You can restore cache using the [Restore Cache from S3](https://docs.harness.io/article/zlpx6lli6d) step.
savedCacheGcs_name: |-
    Enter a name for this step.

    The [Restore Cache from GCS](https://docs.harness.io/article/e2o4sektz1) step restores files and directories that were saved using the [Save Cache to GCS](https://docs.harness.io/article/11nzeuntrz) step.
dockerHubStep_name: |-
    Enter a name for this step.

    The [Build and Push an Image to Docker Registry](https://docs.harness.io/article/q6fr5bj63w) step creates a Docker image from a Dockerfile and pushes it to a Docker registry.
ciGcrStep_name: |-
    Enter a name for this step.

    The [Build and Push to GCR](https://docs.harness.io/article/66ykcm0sf0) step creates a Docker image from a Dockerfile and pushes it to a GCR Docker repository.
ciEcrStep_name: |-
    Enter a name for this step.

    The [Build and Push to ECR](https://docs.harness.io/article/aiqbxaef15) step creates a Docker image from a Dockerfile and pushes it to an ECR Docker repository.
jfrogArt_name: |-
    Enter a name for this step.

    The [Upload Artifacts to JFrog Artifactory](https://docs.harness.io/article/gjoggc66fy) step creates a Docker image from a Dockerfile and pushes it to a JFrog Artifactory Docker repository.
conditionalExecution:
    content: |-
        Conditional Execution lets you set when and if to run or skip a stage. [Learn More](https://newdocs.helpdocs.io/article/i36ibenkq2)

        Conditional Execution uses JEXL operators and expressions.
         
        Examples:

        `<+steps.mystep.output.status> == “success”`
        `<+environment.name> != “QA”`

        [Learn More about JEXL](https://commons.apache.org/proper/commons-jexl/reference/syntax.html)
    width: "500"
projectsForm_name: Enter a name for the project. [Learn more](https://docs.harness.io/article/36fw2u92i4)
projectsForm_color: Select a color for the project. [Learn more](https://docs.harness.io/article/36fw2u92i4)
projectsForm_orgIdentifier: Select an org for your project. [Learn more](https://docs.harness.io/article/36fw2u92i4)
passwordStrengthForm_minNumberOfCharacters: Enter a minimum length for the passwords. [Learn more](https://docs.harness.io/article/gdob5gvyco-authentication-overview)
passwordExpirationForm_daysBeforePasswordExpire: After how many days the password must expire? [Learn more](https://docs.harness.io/article/gdob5gvyco-authentication-overview)
passwordExpirationForm_daysBeforeUserNotified: How many days before password expiration should the user be notified?  [Learn more](https://docs.harness.io/article/gdob5gvyco-authentication-overview)
lockoutPolicyForm_numberOfFailedAttemptsBeforeLockout: Enter the number of login attempts a user can perform before being locked out. [Learn more](https://docs.harness.io/article/gdob5gvyco-authentication-overview)
lockoutPolicyForm_lockOutPeriod: Enter how many hours a user is locked out. [Learn more](https://docs.harness.io/article/gdob5gvyco-authentication-overview)
samlProviderForm_displayName: Enter a name for the SAML Provider. [Learn more](https://docs.harness.io/article/mlpksc7s6c-single-sign-on-saml)
samlProviderForm_groupMembershipAttr: Enter the Group Attribute Name from your SAML Provider. [Learn more](https://docs.harness.io/article/mlpksc7s6c-single-sign-on-saml)
connectorDetailsStepForm_name: Enter a name for the Connector. This is the name you will use to select this Connector in stage and step settings.
awsKmsConfigForm_credType: Select a credential type for authentication. [Learn More](https://docs.harness.io/article/pt52h8sb6z)
awsKmsConfigForm_accessKey: Enter your AWS Access Key ID. [Learn More](https://docs.harness.io/article/pt52h8sb6z)
awsKmsConfigForm_secretKey: Enter the Secret Key for your AWS Access Key ID. [Learn More](https://docs.harness.io/article/pt52h8sb6z)
awsKmsConfigForm_awsArn: Enter the Amazon Resource Name (ARN).  [Learn More](https://docs.harness.io/article/pt52h8sb6z)
awsKmsConfigForm_region: Select the AWS Region for the Secrets Manager.  [Learn More](https://docs.harness.io/article/pt52h8sb6z#region)
awsKmsConfigForm_default: Make this your default secrets manager.  [Learn More](https://docs.harness.io/article/pt52h8sb6z#region)
azureKeyVaultForm_clientId: Enter the Application (client) ID of your Azure app.  [Learn More](https://docs.harness.io/article/53jrd1cv4i)
azureKeyVaultForm_tenantId: Enter the Directory (tenant) ID of the Azure App Directory.  [Learn More](https://docs.harness.io/article/53jrd1cv4i)
azureKeyVaultForm_subscription: Enter your Azure Subscription ID. [Learn More](https://docs.harness.io/article/53jrd1cv4i)
azureKeyVaultForm_secretKey: Enter Azure authentication key.  [Learn More](https://docs.harness.io/article/53jrd1cv4i)
azureKeyVaultForm_vaultName: Select the Vault you want to use. [Learn More](https://docs.harness.io/article/53jrd1cv4i)
azureKeyVaultForm_default: Make this your default secrets manager.  [Learn More](https://docs.harness.io/article/53jrd1cv4i)
vaultConfigForm_vaultUrl: Enter the Vault URL. [Learn More](https://docs.harness.io/article/s65mzbyags)
vaultConfigForm_basePath: Enter the Base Secret Path. [Learn More](https://docs.harness.io/article/s65mzbyags)
vaultConfigForm_accessType: Select the Authentication Type. [Learn More](https://docs.harness.io/article/s65mzbyags)
vaultConfigForm_authToken: Enter Periodic Token.  [Learn more](https://docs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_appRoleId: Enter the App Role ID. [Learn More](https://docs.harness.io/article/s65mzbyags)
vaultConfigForm_secretId: Enter the Secret ID.[Learn More](https://docs.harness.io/article/s65mzbyags)
vaultConfigForm_engineType: Select Secret Engine Type. [Learn More](https://docs.harness.io/article/s65mzbyags)
vaultConfigForm_secretEngineName: Enter the name of the Secret Engine. [Learn more](https://docs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_secretEngineVersion: Enter the engine version. [Learn more](https://docs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_renewalInterv: Enter how often Harness Delegate should reload the Vault access token. [Learn more](https://docs.harness.io/article/s65mzbyags-add-hashicorp-vault)
vaultConfigForm_readOnly: Select to make secrets within this vault Read-Only. [Learn More](https://docs.harness.io/article/s65mzbyags)
vaultConfigForm_default: Make this your default secrets manager.
stepGithubAuthForm_enableAPIAccess: Select this option if you are using this GitHub Connector for a Harness [Trigger](https://docs.harness.io/article/hndnde8usz-triggering-pipelines), [Harness Git Experience](https://docs.harness.io/article/utikdyxgfz-harness-git-experience-overview), or authenticating using a [GitHub App](https://docs.harness.io/article/nze5evmqu1-git-hub-app-support).
deployService_name: |-
    Enter a name for this Service. 

    A Service represents your microservices, Serverless functions, and other workloads logically. A Service is a logical entity to be deployed, monitored, or changed independently. [Learn More](https://docs.harness.io/article/hv2758ro4e)

    When a Service is added to the stage in a Pipeline, you define its Service Definition. Service Definitions represent the real artifacts, manifests, and variables of a Service. They are the actual files and variable values. 

    You can also propagate and override a Service in subsequent stages by selecting its name in that stage's **Service** settings. [Learn More](https://docs.harness.io/article/t57uzu1i41)
specifyYourEnvironment:
    content: |-
        Select or create a new Environment. You can select this Environment in subsequent stages.
          

        Environments represent your deployment targets logically (QA, Prod, etc). You can add the same Environment to as many stages are you need. Infrastructure Definitions represent your target infrastructure physically. They are the actual clusters, hosts, etc.
          

        By separating Environments and Infrastructure Definitions, you can use the same Environment in multiple stages while changing the target infrastructure settings with each stage.
    width: "400"
k8InfraConnector: |-
    Select or create the Connector that connects Harness to your target cluster. [Learn More](https://docs.harness.io/article/0ud2ut4vt2)

    Here's a [video](https://youtu.be/wUC23lmqfnY) that walks through setting up a Kubernetes Cluster Connector.
k8InfraNamespace: |-
    Enter the target namespace in the target cluster. 

    The namespace must already exist during deployment. Harness will not create a new namespace using the one you entered here. [Learn More](https://docs.harness.io/article/0ud2ut4vt2)
k8InfraReleaseName: |-
    During deployment Harness creates a ConfigMap listing the resources of the release and uses the **Release name** for tracking them. 

    The **Release name** is a combination of `release-` and a unique string created using the Harness expression `<+INFRA_KEY>`. 

    For example, in a Kubernetes deployment you can see `harness.io/release-name=release-2f9eadcc06e2c2225265ab3cbb1160bc5eacfd4f`.

    The release name must be unique across the cluster. `release-<+INFRA_KEY>` ensures a unique name.

    `release-` is used as a prefix because Kubernetes service and pod names must follow RFC-1035 and must consist of lowercase alphanumeric characters or '-', start with an alphabetic character, and end with an alphanumeric character.
manifestDetails_identifier: Enter a name that identifies this manifest. [Learn More](https://docs.harness.io/article/ssbq0xh0hx)
manifestDetails_gitFetchType: Select a branch or commit ID for the manifest. [Learn More](https://docs.harness.io/article/ssbq0xh0hx)
manifestDetails_commitId: Enter the commit ID in the repo where the manifest is located. You can also use a [Git commit tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging).
manifestDetails_branch: Enter the branch in the repo where the manifest is located, such as `main`.
imagePath_imagePath: |+
    Enter the name of the artifact you want to deploy, such as `library/nginx`. [Learn More](https://docs.harness.io/article/4ifq51cp0i)

    Official images in public repos often need the label `library`, e.g. `library/tomcat`.

    Wildcards are not supported.

imagePath_tag: Enter the Docker [image tag](https://docs.docker.com/engine/reference/commandline/tag/).
setContainerResources:
    content: Maximum resource limits for containers that clone the codebase at runtime. See [Resource units in Kubernetes](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes).
    width: "400"
image:
    content: |-
        The FQN (fully-qualified name) of the Docker image to use when running build commands. For example: `us.gcr.io/playground/quickstart-image`.

        The image name should include the tag and will default to the latest tag if unspecified. You can use any Docker image from any Docker registry, including Docker images from private registries. [Learn More](https://docs.harness.io/article/1i1ttvftm4)
    width: "400"
privileged:
    content: "Run all containers with the Docker `--privileged` flag enabled. This option is disabled by default. You can override this setting in individual Run and Run Tests steps. "
    width: "400"
optimize: Enables redo snapshot mode
dockerfile: If not provided assumed to be in the root folder of the codebase
context: Context represents a directory containing a Dockerfile which kaniko will use to build your image. For example, a COPY command in your Dockerfile should refer to a file in the build context.
target: Build the specified stage as defined inside the Dockerfile
region:
    content: |-
        The AWS region to use when pushing the image.

        The registry format for ECR is:

        `docker push <aws_account_id>.dkr.ecr.<region>.amazonaws.com/<repo:tag>` 

        A region is required.

        See [Pushing a Docker image](https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-push-ecr-image.html) from AWS.
    width: "400"
imageName: The name of the image that will be pushed to the target container registry.
gcsBucket:
    content: Enter the source GCS bucket name. [Learn More](https://cloud.google.com/storage/docs/creating-buckets)
    width: "400"
sourcePath:
    content: "Path to the artifact files you want to upload. You can use standard [glob expressions](https://en.wikipedia.org/wiki/Glob_(programming)) to upload multiple files. For example, `src/js/**/*.js` will upload all Javascript files in `src/js/subfolder-1/`, `src/js/subfolder-2`, and so on. "
    width: "400"
gcsS3Target: The path to store the cache in, relatively to the bucket. If not provided the cache will be save to [bucket]/
restoreCacheKey:
    content: |-
        The key that can be used to restore this cache. You can use the checksum macro to create a key that is based on a file’s checksum.

        For example, `myApp-{ { checksum filePath1 } }`.
    width: "400"
archiveFormat:
    content: Select archive format. The default format is TAR.
    width: "400"
failIfKeyNotFound: Fail step if the key doesn’t exist. Default is False.
s3Bucket:
    content: The S3 bucket name for the uploaded artifact.
    width: "400"
endpoint: Endpoint for S3 compatible providers (not needed for AWS).
pathStyle: Select whether to use Virtual Hosted Style (http://bucket.host/key) or Path Style (http://host/bucket/key). For MinIO use Path Style (true). Default value is false.
saveCacheKey: The key the cache will be identified by. You can use the checksum macro to create a key that is based on a file’s checksum. For example, myApp-{ { checksum filePath1 } }
saveCacheOverride:
    content: |-
        Select this option to override the cache if the key already exists.

        By default, the **Override Cache** option is set to False (unchecked).
    width: "400"
namespace: The Kubernetes namespace in the target cluster to use.
cloneCodebase: Unless disabled, Harness automatically clones your codebase repository before executing the steps of this stage
dependencyConnector: Container registry to pull the service dependency image from
dependencyEnvironmentVariables: Environment variables injected into the container
dependencyEntryPoint: Overrides the image ENTRYPOINT. Commands should be in exec form. Each command and parameter should be added separately. [Learn More](https://docs.harness.io/article/vo4sjbd09g-configure-service-dependency-step-settings)
dependencyArgs: Overrides the image COMMAND
dockerHubRepository:
    content: |-
        The name of the repo. Use the format `<hub-user>/<repo-name>`.

        When using private Docker registries, use a fully qualified repo name.
    width: "400"
dockerHubRemoteCache: The remote cache repository needs to be created in the same account and organization as the build image. The repository must already exist for caching to work
ecrAccount:
    content: |-
        The AWS account ID to use when pushing the image.

        An account ID is required.

        See [Pushing a Docker image](https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-push-ecr-image.html) from AWS.
    width: "400"
ecrRemoteCache: The remote cache repository needs to be created in the same account and region as the build image. The repository must already exist for caching to work
gcrHost: GCR Host
gcrProjectID: GCR Project ID
gcrRemoteCache: The remote cache repository needs to be created in the same host and project as the build image. The repository will be automatically created if it doesn’t exist.
jFrogArtifactoryTarget: Repository name relative to the server URL in the connector. If pom.xml is not present then target should be full path to artifacts folder (groupID/artifactID/version)
pluginImage: The name of the Plugin Docker image. The image name should include the tag and will default to the latest tag if unspecified. You can use any docker image from any docker registry, including docker images from private registries
runTestsArgs:
    content: The runtime arguments for the test. This field is required. The correct format depends on the selected language and build tool. [Learn more](https://docs.harness.io/article/axzckflbt2)
    width: "400"
runTestsBuildTool:
    content: "Select the build automation tool for the test. "
    width: "400"
runTestsLanguage:
    content: "Select the programming language of the source code to build. If the language is not listed in this menu, test your code using a [Run Step](https://docs.harness.io/article/ota4xj59le) instead. "
    width: "400"
runTestsPackages:
    content: |-
        List of source code package prefixes separated by a comma. For example, `com.company.`, `io.company.migrations`. 

        If you do not provide the list and leave it empty, Harness will auto-detect the package.
    width: "400"
runTestsTestAnnotations: "List of test annotations used in unit testing. They should be separated by comma. Any method annotated with this will be treated as test method. The defaults are: org.junit.Test, org.junit.jupiter.api.Test, org.testng.annotations.Test"
gcpConnector: GCP connector to use for saving the cache to GCS
saveCacheS3Connector: AWS connector to use for saving the cache to S3
stageSpecificationsSharedPaths: By default, all of a stage’s steps use the same workspace to share data. If you need to share additional paths between steps, add Shared Paths.
connectorDetailsStepFormGithub_name: Enter a name for this Connector. You will use this name to select the Connector.
gitDetailsStepForm_url: |-
    Enter the URL for your repo or account:

    - **Repos:** copy the URL provided by the Git provider. For example, see GitHub's [**Code** setting](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository-from-github/cloning-a-repository).
    - **Accounts:** The URL of your Git provider account, such as `https://github.com/mycompany`. In **Test Repository**, enter a repo to test the connection. 

    [Learn More](https://docs.harness.io/category/xyexvcc206)
gitDetailsStepForm_validationRepo: |-
    Enter a repo name to test the credentials. The Connector will connect to the repo to test account credentials. The repo is not linked to the Connector.

    The Connector will still be created at the Account level.
connectorDetailsStepFormAws_name: Enter a name for this AWS Connector. You will use the name to select this Connector in Pipeline steps and settings. [Learn More](https://docs.harness.io/article/m5vkql35ca)
stepAwsAuthForm_crossAccountAccess: |-
    Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. 

    In this scenario, the AWS account used for AWS access in **Credentials** will assume the IAM role you specify in **Cross-account role ARN** setting.

    This option uses the [AWS Security Token Service (STS)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html) feature.

    [Learn More](https://docs.harness.io/article/m5vkql35ca)
stepAwsAuthForm_crossAccountRoleArn: |-
    The Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target AWS account.

    The assumed role must have all the IAM policies required to perform your Harness operations, such as Amazon S3, ECS (Existing Cluster), and AWS EC2 policies. For more information, see [Assuming an IAM Role in the AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html) from AWS.
stepAwsAuthForm_externalId: |-
    If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.

    For more information, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) from AWS.
connectorDetailsStepFormGcp_name: Enter a name for this GCP Connector. [Learn More](https://docs.harness.io/article/yykfduond6)
connectorDetailsStepFormK8sCluster_name: |-
    Enter a name for this Kubernetes Cluster Connector. 

    The Kubernetes Cluster Connector is platform-agnostic. Use it to access a cluster on any platform. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_masterUrl: |-
    The Kubernetes master node URL. The easiest method to obtain the master URL is using kubectl:

    ```
    kubectl cluster-info
    ```
    [Learn More](https://docs.harness.io/article/sjjik49xww)
connectorDetailsStepFormArtifactory_name: Enter a name for this Connector. You will use this name to select the Connector in Pipeline steps and settings. [Learn More](https://docs.harness.io/article/euueiiai4m)
stepArtifactoryAuthForm_artifactoryServerUrl:
    content: |-
        Enter in your base URL followed by your module name.

        For most artifacts, use `https://mycompany.jfrog.io/module_name/`.

        For example: `https://harness.jfrog.io/artifactory/`

        In some cases, you can use `https://server_name/artifactory/module_name`.

        The URL really depends on how you have set up Artifactory, and whether it is local, virtual, remote, or behind a proxy.

        To ensure you use the correct URL, copy it from your Artifactory settings.

        [Learn More](https://docs.harness.io/article/euueiiai4m)

        **Note:** using `artifactory/` at the end of the URL often solves path issues.
    width: "500"
connectorDetailsStepFormDockerRegistry_name: Enter a name for this Connector. You will use this name to select the Connector in Pipeline steps and settings. [Learn More](https://docs.harness.io/article/u9bsd77g5a)
dockerAuthForm_dockerRegistryUrl:
    content: |-
        The URL of the Docker Registry. This is usually the URL used for your [docker login](https://docs.docker.com/engine/reference/commandline/login/) credentials.

        - To connect to Docker Hub, you can use the URLs https://registry.hub.docker.com/v2/ or https://index.docker.io/v2/. 
        - The URL will be different if you are using a private registry.

        [Learn More](https://docs.harness.io/article/u9bsd77g5a)
    width: "400"
helmRepoAuthForm_helmRepoUrl: |-
    The URL of the chart repo. [Learn More](https://docs.harness.io/article/a0jotsvsi7)

    For example: `https://charts.bitnami.com/bitnami`
connectorDetailsStepFormHttpHelmRepo_name: |+
    Enter a name for this Connector. You will use this name to select the Connector in Pipeline steps and settings. [Learn More](https://docs.harness.io/article/a0jotsvsi7)

    For Helm charts stored in repos such as Amazon S3 or GCS (Google Cloud Storage), you will need to create a cloud platform Connector for that repo. For more information, see [Cloud Platform Connectors](https://docs.harness.io/category/1ehb4tcksy).

connectorDetailsStepFormNexus_name: Enter a name for this Connector. You will use this name to select the Connector in Pipeline steps and settings. [Learn More](https://docs.harness.io/article/faor0dc98d)
nexusAuth_nexusServerUrl: The URL that you use to connect to your Nexus server. For example, `https://nexus2.dev.mycompany.io`. [Learn More](https://docs.harness.io/article/faor0dc98d)
nexusAuth_nexusVersion: |-
    Harness lists the supported Nexus versions, 2.x and 3.x:

    - For Nexus 2.x, Harness supports repository formats Maven, npm, and NuGet. See Sonatype's website at [Supported Formats](https://help.sonatype.com/repomanager3/supported-formats).
    - For Nexus 3.x, Harness supports repository formats Docker 3.0 and greater, Maven, npm, NuGet.
connectorDetailsStepFormCodecommit_name: Enter a name for this Connector. You will use this name to select the Connector in Pipeline steps and settings. [Learn More](https://docs.harness.io/article/jed9he2i45)
awsCCDetailsForm_urlType: |-
    You can select **Region** or **Repository**.

    You can add a connection to your entire region or just a repo in the account. Selecting a region enables you to use one Connector for all of your subordinate repositories.

    You must enter a repo URL even if you select region. Harness will use the repo URL Later to test this connection.

    [Learn More](https://docs.harness.io/article/jed9he2i45)
awsCCDetailsForm_url: |-
    Enter the path of the AWS CodeCommit repository to use.

    For example: `https://git-codecommit.us-east-2.amazonaws.com/v1/repos/MyDemoRepo`
connectorDetailsStepFormBitbucket_name: Enter a name for this Bitbucket Connector. You will use this name to select the Connector in Pipeline steps and settings. [Learn More](https://docs.harness.io/article/iz5tucdwyu)
connectorDetailsStepFormJira_name: Enter a name for this Connector. You will use this name to select the Connector in Pipeline steps and settings. [Learn More](https://docs.harness.io/article/ud8rysntnz)
k8InfraAllowSimultaneousDeployments: By default, Harness queues deployments to the same infrastructure to avoid conflicts. If you want to allow simultaneous deployments to this infrastructure, enable this option.
infraProvisionerBase_provisionerEnabled:
    content: |-
        Select this option to use an infrastructure provisioner to dynamically provision the target infrastructure for the deployment. 

        - [Terraform](https://docs.harness.io/article/w6i5f7cpc9)
        - [CloudFormation](https://docs.harness.io/article/vynj4hxt98)
    width: "400"
terraformPlanEditView-tfPlan-INFRASTRUCTURE_name: Enter a name for this step.
terraformPlanEditView-tfPlan-INFRASTRUCTURE_spec.configuration.command: Identify if the plan created by this step will be used with a Terraform Apply or Terraform Destroy step. [Learn More](https://docs.harness.io/article/uznls2lvod)
terraformPlanEditView-tfPlan-INFRASTRUCTURE_spec.provisionerIdentifier: |-
    Enter a unique value in **Provisioner Identifier**.

    The Provisioner Identifier identifies the provisioning done in this step. You use the Provisioner Identifier in additional steps to refer to the provisioning done in this step. [Learn More](https://docs.harness.io/article/uznls2lvod)

    The most common use of Provisioner Identifier is between the Terraform Plan and Terraform Apply steps. To have the Terraform Apply step apply the provisioning from this Terraform Plan step, you use the same Provisioner Identifier in both steps.
terraformEdit-TerraformApply-INFRASTRUCTURE_name: Enter a name for this step.
terraformEdit-TerraformApply-INFRASTRUCTURE_spec.configuration.type: |-
    When provisioning target infrastructure, select **Inherit From Plan**. If you select **Inline**, then you aren't using the previous Terraform Plan step. You are entering separate Terraform files and settings.
    [Learn More](https://docs.harness.io/article/uznls2lvod)
terraformEdit-TerraformApply-INFRASTRUCTURE_spec.provisionerIdentifier: When provisioning target infrastructure, enter the same Provisioner Identifier you entered in the Terraform Plan step. [Learn More](https://docs.harness.io/article/uznls2lvod)
terraformEdit-TerraformDestroy-INFRASTRUCTURE_name: Enter a name for this step.
terraformEdit-TerraformDestroy-INFRASTRUCTURE_spec.configuration.type: |-
    When provisioning target infrastructure, select **Inherit from Apply**.

    The Terraform Delete step will delete the infrastructure provisioned by the Terraform Apply step. [Learn More](https://docs.harness.io/article/uznls2lvod)
terraformEdit-TerraformDestroy-INFRASTRUCTURE_spec.provisionerIdentifier: |-
    The Provisioner Identifier uniquely identifies the provisioning done by specific Terraform steps.

    When provisioning target infrastructure, enter the same Provisioner Identifier used but the Terraform Apply step.

    The Terraform Delete step will delete the infrastructure provisioned by the Terraform Apply step. [Learn More](https://docs.harness.io/article/uznls2lvod)
jiraCreate_name: Enter a name for this step.
jiraCreate_spec.projectKey: Select the Jira project where you want to create a ticket. [Learn More](https://docs.harness.io/article/yu40zr6cvm)
jiraCreate_spec.issueType: Select a Jira issue type from the list of types in the Jira project you selected. [Learn More](https://docs.harness.io/article/yu40zr6cvm)
jiraCreate_spec.summary: Add a summary for the new Jira ticket.
harnessApproval_name: Enter a name for this step.
harnessApproval_spec.includePipelineExecutionHistory: Enable this option to provide approvers with the execution history for this Pipeline. This can help approvers make their decision. [Learn More](https://docs.harness.io/article/fkvso46bok)
harnessApproval_spec.approvers.userGroups: Select the Harness User Groups that will approve the step. [Learn More](https://docs.harness.io/article/fkvso46bok)
harnessApproval_spec.approvers.minimumCount: Enter how many of the Users in the User Groups must approve the step. [Learn More](https://docs.harness.io/article/fkvso46bok)
harnessApproval_spec.approvers.disallowPipelineExecutor: Enable this option if you don't want to allow the User that initiated the Pipeline execution to approve this step. [Learn More](https://docs.harness.io/article/fkvso46bok)
terraformRollback_name: |
    Enter a name for this step. 
terraformRollback_spec.provisionerIdentifier: |-
    Enter the same Provisioner Identifier you used in the Terraform Plan and/or Apply steps that provisioned the infrastructure you want to roll back. Harness will roll back the exact infrastructure provisioned in those steps.
    [Learn More](https://docs.harness.io/article/jgi6d73noy)
shellScriptForm_name: Enter a name for this step.
shellScriptForm_spec.shell: Select the shell type of you script. [Learn More](https://docs.harness.io/article/k5lu0u6i1i)
k8BgSwap_name: Enter a name for this step. [Learn More](https://docs.harness.io/article/mog5tnk5pi)
k8BG_name: Enter a name for this step.
k8Apply_name: Enter a name for this step.
k8DeleteData_name: Enter a name for this step.
k8DeleteData_spec.deleteResources.type:
    content: |+
        Select how you want to remove resources. 

        These can be resources Harness deployed as part of this Stage's **Service Definition**, or any resource in your target infrastructure.

        ### Resource Name
        Delete specific resources by namespace, object type (Kind), and name.

        ### Manifest Path
        Delete specific resources that Harness deployed as part of this Stage's **Service Definition > Manifest Details**.

        ### Release Name
        Deletes all of the resources for a release.

        [Learn More](https://docs.harness.io/article/eaj0xuegln)

    width: "400"
k*CanaryDelete_name: Enter a name for this step.
k8RolloutDeploy_name: Enter a name for this step.
k8CanaryDeploy_name: Enter a name for this step.
k8Scale_name: Enter a name for this step.
k8Scale_spec.workload: |-
    Enter the name of the resource to scale in the format `[namespace/]Kind/Name`, with `namespace` optional. For example: 

    ```
    default/Deployment/harness-example
    ```

    You can scale a Deployment, DaemonSet, or StatefulSet.

    You can only enter one resource in **Workload**. To scale another resource, add another **K8s Scale** step. 

    [Learn More](https://docs.harness.io/article/jxe5z9domw)
k8RollingRB_name: Enter a name for this step.
terraformEdit-TerraformDestroy-EXECUTION_name: Enter a name for this step.
terraformEdit-TerraformDestroy-EXECUTION_spec.configuration.type: |-
    There are three options:

    - **Inline:** Removes the provisioned resources you identify using **Provisioner Identifier** and other settings. 

    - **Inherit from Plan:** Removes the resources defined in the Harness **Terraform Plan** step that you identify using **Provisioner Identifier**. Similar to `terraform plan -destroy`.

    - **Inherit from Apply:** Removes the resources defined in the Harness **Terraform Apply** step that you identify using **Provisioner Identifier**. Similar to `terraform destroy`.

    [Learn More](https://docs.harness.io/article/j75xc704c8)
terraformEdit-TerraformDestroy-EXECUTION_spec.provisionerIdentifier: Enter the same **Provisioner Identifier** you used in the **Terraform Plan** or **Terraform Apply** step that planned/provisioned the resources you want to destroy. [Learn More](https://docs.harness.io/article/j75xc704c8)
terraformEdit-TerraformApply-EXECUTION_name: Enter a name for this step.
terraformEdit-TerraformApply-EXECUTION_spec.configuration.type: |-
    Select **Inline** or **Inherit from Plan**.

    - If you select **Inherit from Plan**, you'll enter the unique Id used by a **Terraform Plan** step in **Provisioner Identifier**.

    - If you select **Inline**, you'll configure this **Terraform Apply** step to use a Terraform script without any **Terraform Plan** step.

    [Learn More](https://docs.harness.io/article/hdclyshiho)
terraformEdit-TerraformApply-EXECUTION_spec.provisionerIdentifier: |-
    The **Provisioner Identifier** identifies the provisioning applied in this step. 

    - If you selected **Inherit from Plan** in **Configuration Type**, enter the Id used by the **Terraform Plan** step for the plan you want to apply.

    - If you selected **Inline** in **Configuration Type**, create a new Id.

    [Learn More](https://docs.harness.io/article/hdclyshiho)
terraformPlanEditView-tfPlan-EXECUTION_name: Enter a name for this step.
terraformPlanEditView-tfPlan-EXECUTION_spec.configuration.command: |-
    Select how you want this plan used later in the stage:

    - **Apply:** The plan will be applied by a **Terraform Apply** step later in your stage.
    - **Destroy:** The plan will be applied by a **Terraform Destroy** step later in your stage.

    [Learn More](https://docs.harness.io/article/52n3j0ci72)
terraformPlanEditView-tfPlan-EXECUTION_spec.provisionerIdentifier: |-
    Enter a unique string to identify the provisioning configured in this step. 

    You will use this **Provisioner Identifier** in additional steps to refer to the provisioning set up in this step.

    The most common use of **Provisioner Identifier** is between the **Terraform Plan** and **Terraform Apply** steps. [Learn More](https://docs.harness.io/article/52n3j0ci72)
barrierStep_name: Enter a name for this step.
barrierStep_spec.barrierRef: |-
    Select a Barrier name for the new barrier. [Learn More](https://docs.harness.io/article/dmlf8w2aeh)

    Barriers are added in the Pipeline's **Flow Control** settings. If you do not see any names in **Barrier Reference**, then no barriers have been added to **Flow Control**.

    You can have multiple barriers in a stage. Every barrier in the same stage must use a unique Barrier Reference.
pipelineCreate_name: |-
    Enter a name for the Pipeline. You can also edit the automatically generated Id. 

    The Pipeline name can be edited later, but Ids cannot be edited once a Pipeline has been saved.

    If you are new to Harness, try a [Quickstart](https://docs.harness.io/article/u8lgzsi7b3).
pipelineCreate_timeout: |-
    Enter a timeout for the entire Pipeline. You can also make this setting a runtime input or use a Harness expression. 

    Keep in mind that all Pipeline steps have timeout settings too.

    Also, Approval steps and stages might pause execution but they do not stop the Pipeline Timeout counter.

    You can change this setting at any time.
ShellScript_stepName: |-
    The Shell Script step can execute scripts in the shell session of the stage in the following ways:

    - Execute scripts on the host running a Harness Delegate. You can use **Delegate Selector** in **Advanced** to identify which Harness Delegate to use.
    - Execute scripts on a remote target host.

    See **Execution Target** in **Optional Configuration** to select where the script is run. [Learn More](https://docs.harness.io/article/k5lu0u6i1i)
shellScriptForm_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
shellScriptForm_spec.source.spec.script: |-
    Enter your script. For example, here is a script that exports the variable names `BUILD_NO` and `LANG`:

    ```
    export BUILD_NO="345"
    export LANG="en-us" 
    ```
    You must use quotes around the value because environment variables are Strings.

    You can use Harness [variable expressions](https://docs.harness.io/article/lml71vhsim-harness-variables) in your script and its comments. Harness will attempt to evaluate and render the variable expressions at runtime. Do not use variable expressions that Harness cannot evaluate at this point in the Execution.
    [Learn More](https://docs.harness.io/article/k5lu0u6i1i)
Http_stepName: The HTTP step can run HTTP methods containing URLs, methods, headers, and variables. You can add assertions that use the response from the HTTP method.
httpWidget_name: Enter a name for this step. [Learn More](https://docs.harness.io/article/64hhfpbgbj)
httpWidget_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
httpWidget_spec.url: Enter the URL for the HTTP call.  [Learn More](https://docs.harness.io/article/64hhfpbgbj)
httpWidget_spec.method: Select the [HTTP method](https://restfulapi.net/http-methods/). [Learn More](https://docs.harness.io/article/64hhfpbgbj)
httpWidget_spec.requestBody: Enter the message body (if any) of the HTTP message. [Learn More](https://docs.harness.io/article/64hhfpbgbj)
httpWidget_spec.assertion: |-
    The assertion is used to validate the incoming response. [Learn More](https://docs.harness.io/article/64hhfpbgbj)

    For example, if you wanted to check the health of an HTTP connection, you could use the assertion `<+httpResponseCode> == 200`.

    The expression `<+httpResponseCode> == 200` will evaluate to `true` if the HTTP call returns a 200 code.

    Expressions can use the following aliases to refer to the HTTP responses, URL, and method:

    - `<+httpResponseCode>`
    - `<+httpUrl>`
    - `<+httpMethod>`
    - `<+httpResponseBody>`
httpWidget_spec.headers: |-
    Enter headers for the message, such as the media type for the message. [Learn More](https://docs.harness.io/article/64hhfpbgbj)

    For example, if you are using the GET method, the headers are used to specify the GET response body message type Harness will check for.

    You can enter multiple header entries. You can use Harness secrets for token headers, also.

    For example, in **Key**, enter **Token** .

    In **Value**, enter a secret reference like `<+secrets.getValue("aws-playground_AWS_secret_key")>`.
httpWidget_spec.outputVariables: |-
    Create output variables to be used by other steps in the stage. The **Value** setting can contain any HTTP step input, output, or response information.

    You can also use JSON and XML functors in the values for the output variable. [Learn More](https://docs.harness.io/article/64hhfpbgbj)
JiraApproval_stepName: |-
    You can use Jira issues to approve or reject a Pipeline or stage at any point in its execution.

    During deployment, the Jira issue you select is evaluated according to **Approval Criteria** you define in this step. 

    If the issue meets the criteria the Pipeline or stage may proceed. [Learn More](https://docs.harness.io/article/2lhfk506r8)
jiraApproval_name: Enter a name for this step.
jiraApproval_timeout: |-
    Enter a timeout for this step. Jira communication can take a few minutes. Do not use a brief timeout.

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
jiraApproval_spec.connectorRef: Create or select the Jira Connector to use. [Learn More](https://docs.harness.io/article/e6s32ec7i7)
jiraApprovalapprovalCriteria: |-
    The **Approval Criteria** determines if the Pipeline or stage is approved or rejected. [Learn More](https://docs.harness.io/article/2lhfk506r8)

    You can specify criteria using **Conditions** and/or **JEXL Expression**. If you use them in combination they both must evaluate to `True` for criteria to work.

    Whether the Pipeline/stage stops executing depends on the stage or step [Failure Strategy](https://docs.harness.io/article/0zvnn5s1ph-define-a-failure-strategy-on-stages-and-steps).

    In **Optional Configuration**, in **Rejection Criteria**, you can define criteria for rejecting the approval.

    If you add rejection criteria it is used in addition to the settings in **Approval Criteria**.
K8sBGSwapServices_stepName: In this step, Harness swaps the primary service (prod traffic) to the pod set running the new app and the stage service (stage traffic) to the set running the old app. [Learn More](https://docs.harness.io/article/mog5tnk5pi)
k8BgSwap_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
K8sBlueGreenDeploy_stepName: |-
    This step deploys your new app version to the stage pod set. 

    The first time this step is run it creates any needed Kubernetes services and pod sets for the app.

    The **Swap** step follows this step. It swaps the primary service to the new app version's pod set, and the stage service to old app version's stage pod set.

    [Learn More](https://docs.harness.io/article/mog5tnk5pi)
k8BG_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
k8BG_spec.skipDryRun: |-
    By default, Harness uses the `--dry-run` flag on the `kubectl apply` command, which prints the object that would be sent to the cluster without really sending it. 

    If the **Skip Dry Run** option is selected, Harness will not use the `--dry-run` flag.
k8Apply_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
K8sApply_stepName: |-
    The **K8s Apply** step allows you to deploy any resource you have set up in the **Manifests** section in **Service**.

    By default, the Harness Kubernetes Rolling, Canary, and Blue Green steps will deploy all of the resources you have set up in the **Manifests** section.

    In some cases, you might have resources in **Manifests** that you do not want to deploy as part of the main deployment, but want to apply as another step in the stage.

    In these cases, you use the **K8s Apply** step to deploy those resources. [Learn More](https://docs.harness.io/article/00el61pzok)
k8Apply_spec.filePaths: |-
    Enter the path to a manifest file. **File Path** has the following requirements:

    - The path to the manifest for the **Apply** step must be subordinate to the path for the manifest in the **Manifests** section of the **Service Definition**. The manifest cannot be in the same folder as **Manifests**.
    - The path must include the folder name and the file name.

    [Learn More](https://docs.harness.io/article/00el61pzok)
k8Apply_spec.skipDryRun: |-
    By default, Harness uses the `--dry-run` flag on the `kubectl apply` command, which prints the object that would be sent to the cluster without really sending it. 

    If the **Skip Dry Run** option is selected, Harness will not use the `--dry-run` flag.
k8Apply_spec.skipSteadyStateCheck: |-
    By default, Harness checks to see if a deployed workload has reached steady state.

    If you select this option, Harness will not check that the workload has reached steady state.
K8sDelete_stepName: The K8s Delete step can remove any deployed Kubernetes resources. [Learn More](https://docs.harness.io/article/eaj0xuegln)
k8DeleteData_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
k8DeleteData_spec.deleteResources.spec.deleteNamespace:
    content: |
        **Release Name** deletes all of the resources for a release. 

        Release names are configured in the Stage **Infrastructure** and release names can be viewed in the **Execution History** of a Pipeline.  

        If you select the **Delete namespace** option, Harness will delete the namespace(s) defined in the release.

        **Ensure that you are not deleting a namespace that is used by other deployments.**

        [Learn More](https://docs.harness.io/article/eaj0xuegln)
    width: "400"
K8sCanaryDelete_stepName: The **Canary Delete** step is used to clean up the workload deployed by the [Canary](https://docs.harness.io/article/17wrdeuv0x-) step. [Learn More](https://docs.harness.io/article/922mtcvank)
k*CanaryDelete_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
K8sRollingDeploy_stepName: |-
    The **K8s Rollout Deploy** step performs a Kubernetes [rolling update strategy](https://docs.harness.io/article/0zsf97lo3c-deployment-concepts). 

    All nodes within a single environment are incrementally added one-by-one with a new service/artifact version. The rolling update uses the number of pods you specified in **Manifests** (number of replicas). [Learn More](https://docs.harness.io/article/2bwlugh9gi)
k8RolloutDeploy_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
k8RolloutDeploy_spec.skipDryRun: |-
    By default, Harness uses the `--dry-run` flag on the `kubectl apply` command, which prints the object that would be sent to the cluster without really sending it. 

    If the **Skip Dry Run** option is selected, Harness will not use the `--dry-run` flag.
K8sCanaryDeploy_stepName: The **K8s Canary Deploy** step sets how many pods are created for a Canary deployment of the files in your Service Definition **Manifests** section. [Learn More](https://docs.harness.io/article/i5p4feil89)
k8CanaryDeploy_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
k8CanaryDeploy_spec.instanceSelection: |-
    Define how many pods are deployed for a Canary test of the configuration files in your Service Definition **Manifests** section:
     
    - If you selected **Instance Count**, this is simply the number of pods.
    - If you selected **Percentage**, enter a percentage of the pods defined in your Service Definition **Manifests** files.

    [Learn More](https://docs.harness.io/article/i5p4feil89)
k8CanaryDeploy_spec.skipDryRun: |-
    By default, Harness uses the `--dry-run` flag on the `kubectl apply` command, which prints the object that would be sent to the cluster without really sending it. 

    If the **Skip Dry Run** option is selected, Harness will not use the `--dry-run` flag.
K8sScale_stepName: The **K8s Scale** step you can scale the number of running pods up or down by count or percentage. [Learn More](https://docs.harness.io/article/jxe5z9domw)
k8Scale_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
k8Scale_spec.instanceSelection: |-
    Define how many pods you want:

    - If you selected **Instance Count**, this is simply the number of pods.
    - If you selected **Percentage**, enter a percentage of the pods defined in your Service Definition **Manifests** files.

    [Learn More](https://docs.harness.io/article/jxe5z9domw)
k8Scale_spec.skipSteadyStateCheck: |-
    By default, Harness checks to see if a deployed workload has reached steady state.

    If you select this option, Harness will not check that the workload has reached steady state.
K8sRollingRollback_stepName: |-
    The **K8s Rollout Rollback** step will roll back the workloads deployed by the Rolling Deployment step. [Learn More](https://docs.harness.io/article/xsla71qg8t)

    **Rollback rolls back workloads only.** If there are other objects or operations executed in your stage, Harness does not roll those back.
k8RollingRB_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
TerraformDestroy_stepName: |-
    The **Terraform Destroy** step removes any provisioned infrastructure, just like running the `terraform destroy` command. [Learn More](https://docs.harness.io/article/j75xc704c8)

    The **Terraform Destroy** step is independent of any other Terraform provisioning steps. It's not restricted to removing the infrastructure deployed in its stage. It can remove any infrastructure you've provisioned *using Harness*.

    The **Terraform Destroy** step can also be used as part of target infrastructure provisioning. [Learn More](https://docs.harness.io/article/uznls2lvod-provision-infra-dynamically-with-terraform)
terraformEdit-TerraformDestroy-EXECUTION_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
TerraformRollback_stepName: Use the Terraform Rollback step to roll back your infrastructure and resources and return your environment to its pre-deployment state. [Learn More](https://docs.harness.io/article/jgi6d73noy)
terraformRollback_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
terraformEdit-TerraformApply-EXECUTION_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
TerraformApply_stepName: |-
    You can apply a Terraform plan or script using the **Terraform Apply** step. [Learn More](https://docs.harness.io/article/hdclyshiho)

    Typically the **Terraform Apply** step is used with the **Terraform Plan** step to apply a plan. 

    For steps on using the Terraform Plan step, see [Plan Terraform Provisioning with the Terraform Plan Step](https://docs.harness.io/article/52n3j0ci72).
tfConfigurationFile: |-
    The **Configuration File Repository** is where the Terraform script and files you want to use are located.

    Here, you'll add a connection to the Terraform script repo. [Learn More](https://docs.harness.io/article/hdclyshiho)
configForm_spec.configuration.spec.configFiles.store.spec.connectorRef: Select or create a Connector for your Git repo. [Learn More](https://docs.harness.io/article/hdclyshiho)
configForm_spec.configuration.spec.configFiles.store.spec.gitFetchType: |-
    Select **Latest from Branch** or **Specific Commit ID**. When you run the Pipeline, Harness will fetch the script from the repo.

    If you think the script might change often, you might want to use a **Specific Commit ID**.

    For example, if you are going to be fetching the script multiple times in your Pipeline, Harness will fetch the script each time. If you select **Latest from Branch** and the branch changes between fetches, different scripts are run.
configForm_spec.configuration.spec.configFiles.store.spec.commitId: Enter the Commit Id to use.
configForm_spec.configuration.spec.configFiles.store.spec.branch: Enter the name of the branch to use.
configForm_spec.configuration.spec.configFiles.store.spec.folderPath: Enter the path from the root of the repo to the folder containing the script. [Learn More](https://docs.harness.io/article/hdclyshiho)
TerraformPlan_stepName: |-
    The **Terraform Plan** step runs a Terraform script as a Terraform plan.

    You can then add a **Terraform Apply** step later in your stage to apply the plan. [Learn More](https://docs.harness.io/article/52n3j0ci72)
terraformPlanEditView-tfPlan-EXECUTION_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
terraformPlanEditView-tfPlan-EXECUTION_spec.configuration.secretManagerRef: |-
    A Terraform plan is a sensitive file that could be misused to alter resources if someone has access to it. Harness avoids this issue by never passing the Terraform plan file as plain text.

    Select a [Secrets Manager](https://docs.harness.io/article/hngrlb7rd6) to use for encrypting/decrypting and saving the Terraform plan file. [Learn More](https://docs.harness.io/article/52n3j0ci72)
HarnessApproval_stepName: The Manual Approval step lets you specify Harness User Group(s) to approve or reject a Pipeline at any point in its execution. [Learn More](https://docs.harness.io/article/fkvso46bok)
harnessApproval_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
harnessApproval_spec.approvalMessage: Add the message for the Users in **Approvers**. [Learn More](https://docs.harness.io/article/fkvso46bok)
Barrier_stepName: |-
    Barriers allow you to synchronize different stages in your Pipeline, and control the flow of your deployment systematically.

    Before you add a **Barrier** step to a stage, barriers must be are added in the Pipeline's **Flow Control** settings. [Learn More](https://docs.harness.io/article/dmlf8w2aeh)
barrierStep_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
JiraCreate_stepName: |-
    You can use this step to create a Jira issue as part of the execution of a Pipeline. [Learn More](https://docs.harness.io/article/yu40zr6cvm)

    Jira issues are often used as part of a Jira Approval stage. [Learn More](https://docs.harness.io/article/2lhfk506r8)

    [Video walkthrough](https://youtu.be/xVeICozz4lU)
jiraCreate_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
jiraCreate_spec.connectorRef: Create or select the [Jira Connector](https://docs.harness.io/article/e6s32ec7i7) to use.
jiraCreate_spec.description: Add a description for the issue.
jiraCreateAddFields: |-
    Add specific fields within a Jira issue.

    Harness supports only Jira fields of type `Option`, `Array`, `Any`, `Number`, `Date`, and `String`. 

    Harness does not integrate with Jira fields that manage users, issue links, or attachments. This means that Jira fields like Assignee and Sprint are not accessible in Harness' Jira integration.
jiraSelectFromFieldList: Select from the fields Harness retrieved from Jira using the Jira Connector, Project, and Issue Type.
jiraProvideFromFieldList: Add fields for the issue.
JiraUpdate_stepName: You can update a Jira issue as a step in the execution of a Pipeline. [Learn More](https://docs.harness.io/article/urdkli9e74)
jiraUpdate_name: Enter a name for this step.
jiraUpdate_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
jiraUpdate_spec.connectorRef: Create or select the [Jira Connector](https://docs.harness.io/article/e6s32ec7i7) to use.
jiraUpdate_spec.issueKey: Enter the Jira issue key of the issue you want to update.
jiraUpdate_spec.transitionTo.status: Enter the status type (Issue Action) to update the issue with (In Progress, Done, etc). Harness will automatically update the issue with this status.
jiraUpdate_spec.transitionTo.transitionName: Enter the name of the transition to move the issues into.
terraformPlanEditView-tfPlan-INFRASTRUCTURE_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
terraformPlanEditView-tfPlan-INFRASTRUCTURE_spec.configuration.secretManagerRef: |-
    A Terraform plan is a sensitive file that could be misused to alter resources if someone has access to it. Harness avoids this issue by never passing the Terraform plan file as plain text.

    Select a [Secrets Manager](https://docs.harness.io/article/hngrlb7rd6) to use for encrypting/decrypting and saving the Terraform plan file.
terraformEdit-TerraformApply-INFRASTRUCTURE_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
terraformEdit-TerraformDestroy-INFRASTRUCTURE_timeout: |-
    Enter a timeout for this step. 

    You can use:

    - `w`  for weeks
    - `d`  for days
    - `h`  for hours
    - `m`  for minutes
    - `s`  for seconds
    - `ms`  for milliseconds

    The maximum is `53w`.

    Timeouts can be set at the Pipeline level also.
TerraformPlan_stepName_ProvisionerStepConfig: |-
    When used in a stage's **Dynamic Provisioning** settings, the **Terraform Plan** step is where you connect Harness to your script repo and add your Terraform scripts. You can also define options like Workspace, etc. [Learn More](https://docs.harness.io/article/uznls2lvod)

    Later, you will use the **Terraform Apply** step to apply the plan and provision the target infrastructure for the deployment.
TerraformApply_stepName_ProvisionerStepConfig: When used in **Dynamic Provisioning**, the **Terraform Apply** step simply inherits its configuration from the **Terraform Plan** step you already configured. [Learn More](https://docs.harness.io/article/uznls2lvod)
terraformPlanEditView-tfPlan-INFRASTRUCTURE_spec.configuration.workspace: |-
    Harness supports Terraform [workspaces](https://www.terraform.io/docs/state/workspaces.html). A Terraform workspace is a logical representation of one your infrastructures, such as Dev, QA, Stage, Production.

    In the Workspace setting, you can simply enter the name of the workspace to use. [Learn More](https://docs.harness.io/article/uznls2lvod)
terraformPlanEditView-tfPlan-INFRASTRUCTURE_spec.configuration.backendConfig.spec.content: |-
    The **Backend Configuration** section contains the [remote state](https://www.terraform.io/docs/language/state/remote.html) values. [Learn More](https://docs.harness.io/article/uznls2lvod)

    Enter values for each backend config (remote state variable).

    For example, if your config.tf file has the following backend:

    ```
    terraform {
      backend "gcs" {
        bucket  = "tf-state-prod"
        prefix  = "terraform/state"
      }
    }
    ```

    In **Backend Configuration**, you provide the required configuration variables for that backend type. See **Configuration variables** in Terraform's [gcs Standard Backend](https://www.terraform.io/docs/language/settings/backends/gcs.html#configuration-variables) doc.

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for credentials.
terraformPlanEditView-tfPlan-INFRASTRUCTURE_spec.configuration.targets: |-
    You can use the **Targets** setting to target one or more specific modules in your Terraform script, just like using the `terraform plan -target` command. [Learn More](https://docs.harness.io/article/uznls2lvod)

    You simply identify the module using the standard format `module.name`, like you would using `terraform plan -target="module.s3_bucket"`.

    If you have multiple modules in your script and you don't select one in Targets, all modules are used.

    See [Resource Targeting](https://www.terraform.io/docs/commands/plan.html#resource-targeting) from Terraform.
terraformPlanEditView-tfPlan-INFRASTRUCTURE_spec.configuration.environmentVariables: |-
    If your Terraform script uses environment variables, you can provide values for those variables here.

    For example:

    ```
    TF_LOG_PATH=./terraform.log
    TF_VAR_alist='[1,2,3]'
    ```

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for values.
terraformEdit-TerraformApply-INFRASTRUCTURE_spec.configuration.spec.workspace: |-
    Harness supports Terraform [workspaces](https://www.terraform.io/docs/state/workspaces.html). A Terraform workspace is a logical representation of one your infrastructures, such as Dev, QA, Stage, Production.

    In the **Workspace** setting, you can simply enter the name of the workspace to use. [Learn More](https://docs.harness.io/article/uznls2lvod)
terraformEdit-TerraformApply-INFRASTRUCTURE_: |-
    The **Terraform Var Files** section is for entering and/or linking to Terraform script Input variables.

    You can use inline or remote var files.

    Harness supports all [Terraform input types and values](https://www.terraform.io/docs/language/expressions/types.html).
terraformEdit-TerraformApply-INFRASTRUCTURE_spec.configuration.spec.backendConfig.spec.content: |-
    The **Backend Configuration** section contains the [remote state](https://www.terraform.io/docs/language/state/remote.html) values. [Learn More](https://docs.harness.io/article/uznls2lvod)

    Enter values for each backend config (remote state variable).

    For example, if your config.tf file has the following backend:

    ```
    terraform {
      backend "gcs" {
        bucket  = "tf-state-prod"
        prefix  = "terraform/state"
      }
    }
    ```

    In **Backend Configuration**, you provide the required configuration variables for that backend type. See **Configuration variables** in Terraform's [gcs Standard Backend](https://www.terraform.io/docs/language/settings/backends/gcs.html#configuration-variables) doc.

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for credentials.
terraformEdit-TerraformApply-INFRASTRUCTURE_spec.configuration.spec.targets: |-
    You can use the **Targets** setting to target one or more specific modules in your Terraform script, just like using the `terraform plan -target` command. [Learn More](https://docs.harness.io/article/uznls2lvod)

    You simply identify the module using the standard format `module.name`, like you would using `terraform plan -target="module.s3_bucket"`.

    If you have multiple modules in your script and you don't select one in Targets, all modules are used.

    See [Resource Targeting](https://www.terraform.io/docs/commands/plan.html#resource-targeting) from Terraform.
terraformEdit-TerraformApply-INFRASTRUCTURE_spec.configuration.spec.environmentVariables: |-
    If your Terraform script uses environment variables, you can provide values for those variables here.

    For example:

    ```
    TF_LOG_PATH=./terraform.log
    TF_VAR_alist='[1,2,3]'
    ```

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for values.
TerraformDestroy_stepName_ProvisionerStepConfig: When provisioning target infrastructure, the **Terraform Delete** step deletes the infrastructure provisioned by the **Terraform Apply** step. [Learn More](https://docs.harness.io/article/uznls2lvod)
terraformEdit-TerraformDestroy-INFRASTRUCTURE_spec.configuration.spec.workspace: |-
    Harness supports Terraform [workspaces](https://www.terraform.io/docs/state/workspaces.html). A Terraform workspace is a logical representation of one your infrastructures, such as Dev, QA, Stage, Production.

    In the **Workspace** setting, you can simply enter the name of the workspace to use. [Learn More](https://docs.harness.io/article/uznls2lvod)
terraformEdit-TerraformDestroy-INFRASTRUCTURE_spec.configuration.spec.backendConfig.spec.content: |-
    The **Backend Configuration** section contains the [remote state](https://www.terraform.io/docs/language/state/remote.html) values. [Learn More](https://docs.harness.io/article/uznls2lvod)

    Enter values for each backend config (remote state variable).

    For example, if your config.tf file has the following backend:

    ```
    terraform {
      backend "gcs" {
        bucket  = "tf-state-prod"
        prefix  = "terraform/state"
      }
    }
    ```

    In **Backend Configuration**, you provide the required configuration variables for that backend type. See **Configuration variables** in Terraform's [gcs Standard Backend](https://www.terraform.io/docs/language/settings/backends/gcs.html#configuration-variables) doc.

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for credentials.
terraformEdit-TerraformDestroy-INFRASTRUCTURE_spec.configuration.spec.targets: |-
    You can use the **Targets** setting to target one or more specific modules in your Terraform script, just like using the `terraform plan -target` command. [Learn More](https://docs.harness.io/article/uznls2lvod)

    You simply identify the module using the standard format `module.name`, like you would using `terraform plan -target="module.s3_bucket"`.

    If you have multiple modules in your script and you don't select one in Targets, all modules are used.

    See [Resource Targeting](https://www.terraform.io/docs/commands/plan.html#resource-targeting) from Terraform.
terraformEdit-TerraformDestroy-INFRASTRUCTURE_spec.configuration.spec.environmentVariables: |-
    If your Terraform script uses environment variables, you can provide values for those variables here.

    For example:

    ```
    TF_LOG_PATH=./terraform.log
    TF_VAR_alist='[1,2,3]'
    ```

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for values.
TerraformRollback_stepName_ProvisionerStepConfig: The **Terraform Rollback** step rolls back your provisioned infrastructure and resources and returns your environment to its pre-deployment state. [Learn More](https://docs.harness.io/article/jgi6d73noy)
terraformPlanEditView-tfPlan-EXECUTION_spec.configuration.workspace: |-
    Harness supports Terraform [workspaces](https://www.terraform.io/docs/state/workspaces.html). A Terraform workspace is a logical representation of one your infrastructures, such as Dev, QA, Stage, Production.

    In the **Workspace** setting, you can simply enter the name of the workspace to use. [Learn More](https://docs.harness.io/article/52n3j0ci72)
TerraformPlan_stepName_StepConfig: |-
    The **Terraform Plan** step runs a Terraform script as a Terraform plan. [Learn More](https://docs.harness.io/article/52n3j0ci72)

    You can run the **Terraform Plan** step to provision any resource. 

    The [Terraform Apply](https://docs.harness.io/article/hdclyshiho) and [Terraform Destroy](https://docs.harness.io/article/j75xc704c8) steps can inherit the plan and perform their apply and destroy operations.
terraformPlanEditView-tfPlan-EXECUTION_spec.configuration.backendConfig.spec.content: |-
    The **Backend Configuration** section contains the [remote state](https://www.terraform.io/docs/language/state/remote.html) values. [Learn More](https://docs.harness.io/article/52n3j0ci72)

    Enter values for each backend config (remote state variable).

    For example, if your config.tf file has the following backend:

    ```
    terraform {
      backend "gcs" {
        bucket  = "tf-state-prod"
        prefix  = "terraform/state"
      }
    }
    ```

    In **Backend Configuration**, you provide the required configuration variables for that backend type. See **Configuration variables** in Terraform's [gcs Standard Backend](https://www.terraform.io/docs/language/settings/backends/gcs.html#configuration-variables) doc.

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for credentials.
terraformPlanEditView-tfPlan-EXECUTION_spec.configuration.targets: |-
    You can use the **Targets** setting to target one or more specific modules in your Terraform script, just like using the `terraform plan -target` command. [Learn More](https://docs.harness.io/article/52n3j0ci72)

    You simply identify the module using the standard format `module.name`, like you would using `terraform plan -target="module.s3_bucket"`.

    If you have multiple modules in your script and you don't select one in Targets, all modules are used.

    See [Resource Targeting](https://www.terraform.io/docs/commands/plan.html#resource-targeting) from Terraform.
terraformPlanEditView-tfPlan-EXECUTION_spec.configuration.environmentVariables: |-
    If your Terraform script uses environment variables, you can provide values for those variables here.

    For example:

    ```
    TF_LOG_PATH=./terraform.log
    TF_VAR_alist='[1,2,3]'
    ```

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for values.
TerraformApply_stepName_StepConfig: |-
    The **Terraform Apply** step can apply a Terraform script and provision any infrastructure. [Learn More](https://docs.harness.io/article/hdclyshiho)

    Typically the **Terraform Apply** step is used with the **Terraform Plan** step to apply a plan. [Learn More](https://docs.harness.io/article/52n3j0ci72).
terraformEdit-TerraformApply-EXECUTION_spec.configuration.spec.workspace: |-
    Harness supports Terraform [workspaces](https://www.terraform.io/docs/state/workspaces.html). A Terraform workspace is a logical representation of one your infrastructures, such as Dev, QA, Stage, Production.

    In the **Workspace** setting, you can simply enter the name of the workspace to use. [Learn More](https://docs.harness.io/article/hdclyshiho)
terraformEdit-TerraformApply-EXECUTION_spec.configuration.spec.backendConfig.spec.content: |-
    The **Backend Configuration** section contains the [remote state](https://www.terraform.io/docs/language/state/remote.html) values. [Learn More](https://docs.harness.io/article/hdclyshiho)

    Enter values for each backend config (remote state variable).

    For example, if your config.tf file has the following backend:

    ```
    terraform {
      backend "gcs" {
        bucket  = "tf-state-prod"
        prefix  = "terraform/state"
      }
    }
    ```

    In **Backend Configuration**, you provide the required configuration variables for that backend type. See **Configuration variables** in Terraform's [gcs Standard Backend](https://www.terraform.io/docs/language/settings/backends/gcs.html#configuration-variables) doc.

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for credentials.
terraformEdit-TerraformApply-EXECUTION_spec.configuration.spec.targets: |-
    You can use the **Targets** setting to target one or more specific modules in your Terraform script, just like using the `terraform plan -target` command. [Learn More](https://docs.harness.io/article/hdclyshiho)

    You simply identify the module using the standard format `module.name`, like you would using `terraform plan -target="module.s3_bucket"`.

    If you have multiple modules in your script and you don't select one in Targets, all modules are used.

    See [Resource Targeting](https://www.terraform.io/docs/commands/plan.html#resource-targeting) from Terraform.
terraformEdit-TerraformApply-EXECUTION_spec.configuration.spec.environmentVariables: |-
    If your Terraform script uses environment variables, you can provide values for those variables here.

    For example:

    ```
    TF_LOG_PATH=./terraform.log
    TF_VAR_alist='[1,2,3]'
    ```

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for values.
TerraformRollback_stepName_StepConfig: The **Terraform Rollback** step rolls back your provisioned infrastructure and resources and returns your environment to its pre-deployment state. [Learn More](https://docs.harness.io/article/jgi6d73noy)
TerraformDestroy_stepName_StepConfig: The **Terraform Destroy** step removes any provisioned infrastructure, just like running the `terraform destroy` command. See [destroy](https://www.terraform.io/docs/commands/destroy.html) from Terraform. [Learn More](https://docs.harness.io/article/j75xc704c8)
terraformEdit-TerraformDestroy-EXECUTION_spec.configuration.spec.workspace: |-
    Harness supports Terraform [workspaces](https://www.terraform.io/docs/state/workspaces.html). A Terraform workspace is a logical representation of one your infrastructures, such as Dev, QA, Stage, Production.

    In the **Workspace** setting, you can simply enter the name of the workspace to use. See the same Workspace setting in [Terraform Plan](https://docs.harness.io/article/52n3j0ci72) for details.
terraformEdit-TerraformDestroy-EXECUTION_spec.configuration.spec.backendConfig.spec.content: |-
    The **Backend Configuration** section contains the [remote state](https://www.terraform.io/docs/language/state/remote.html) values. See the same **Backend Configuration** setting in [Terraform Plan](https://docs.harness.io/article/52n3j0ci72) for details.

    Enter values for each backend config (remote state variable).

    For example, if your config.tf file has the following backend:

    ```
    terraform {
      backend "gcs" {
        bucket  = "tf-state-prod"
        prefix  = "terraform/state"
      }
    }
    ```

    In **Backend Configuration**, you provide the required configuration variables for that backend type. See **Configuration variables** in Terraform's [gcs Standard Backend](https://www.terraform.io/docs/language/settings/backends/gcs.html#configuration-variables) doc.

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for credentials.
terraformEdit-TerraformDestroy-EXECUTION_spec.configuration.spec.targets: |-
    You can use the **Targets** setting to target one or more specific modules in your Terraform script, just like using the `terraform plan -target` command. See the same **Targets** setting in [Terraform Plan](https://docs.harness.io/article/52n3j0ci72) for details.

    You simply identify the module using the standard format `module.name`, like you would using `terraform plan -target="module.s3_bucket"`.

    If you have multiple modules in your script and you don't select one in Targets, all modules are used.

    See [Resource Targeting](https://www.terraform.io/docs/commands/plan.html#resource-targeting) from Terraform.
terraformEdit-TerraformDestroy-EXECUTION_spec.configuration.spec.environmentVariables: |-
    If your Terraform script uses environment variables, you can provide values for those variables here.

    For example:

    ```
    TF_LOG_PATH=./terraform.log
    TF_VAR_alist='[1,2,3]'
    ```

    You can use [Harness secrets](https://docs.harness.io/article/osfw70e59c) for values.
inlineVarFileForm_varFile.identifier: |-
    You can add inline variables just like you would in a tfvar file. See the same **Targets** setting in [Terraform Plan](https://docs.harness.io/article/52n3j0ci72) for details.

    In **Identifier**, enter an identifier so you can refer to variables using expressions if needed.
inlineVarFileForm_varFile.spec.content: |-
    Provide the input variables and values for your Terraform script. Harness follows the same format as Terraform.

    For example, if your Terraform script has the following:

    ```
    variable "region" {
      type = string
    }
    ```

    You could enter:

    ```
    region = "asia-east1-a"
    ```
approverInputs: You can enter variables and when the approver views the step, they can provide new values for the variables. [Learn More](https://docs.harness.io/article/fkvso46bok)
K8sApply_stepName_StepConfig: |-
    By default, the Harness Kubernetes Rolling, Canary, and Blue Green steps will deploy all of the resources you have set up in the Service Definition **Manifests** section.

    In some cases, you might have resources in **Manifests** that you do not want to deploy as part of the main deployment, but want to apply as another step in the stage.

    CD stages include an **K8s Apply** step that allows you to deploy any resource you have set up in the **Manifests** section. [Learn More](https://docs.harness.io/article/00el61pzok)
K8sRollingDeploy_stepName_StepConfig: |-
    The **K8s Rollout Deploy** step performs a rolling update strategy. 

    It updates Kubernetes deployments with zero downtime by incrementally updating pod instances with new ones. New pods are scheduled on nodes using the available resources. [Learn More](https://docs.harness.io/article/xsla71qg8t)
K8sCanaryDeploy_stepName_StepConfig: The **K8s Canary Deploy** step defines how many pods are deployed for a Canary test of the configuration files in your Service Definition **Manifests** section. [Learn More](https://docs.harness.io/article/i5p4feil89)
K8sScale_stepName_StepConfig: |-
    When you deploy a Kubernetes workload using Harness, the number of pods you want is set in your manifests and in the deployment steps.

    With the ** K8s Scale** step, you can scale this number of running pods up or down by count or percentage. [Learn More](https://docs.harness.io/article/jxe5z9domw)
K8sRollingRollback_stepName_StepConfig: |-
    The **K8s Rollout Rollback** step roll back the workloads deployed by the **K8s Rollout Deploy** step.

    If a Harness Kubernetes deployment fails, Harness will rollback to the last successful version of your workload. [Learn More](https://docs.harness.io/article/rt449t1xhy)
K8sCanaryDelete_stepName_StepConfig: The **Canary Delete** step is used to clean up the workload deployed by the Canary Deployment step. [Learn More](https://docs.harness.io/article/922mtcvank)
K8sDelete_stepName_StepConfig: You can remove any deployed Kubernetes resources with the **K8s Delete** step. [Learn More](https://docs.harness.io/article/eaj0xuegln)
K8sBlueGreenDeploy_stepName_StepConfig: |
    The **K8s Blue Green Deploy** step is added automatically when you apply the Blue Green strategy. [Learn More](https://docs.harness.io/article/mog5tnk5pi)

    The **K8s Blue Green Deploy** step creates the Kubernetes services and pod sets needed for your new app versions, and the deploys your new app version to the pod set receiving stage traffic.
K8sBGSwapServices_stepName_StepConfig: |-
    The **K8s Blue Green Swap Services** step is added automatically when you apply the Blue Green strategy. [Learn More](https://docs.harness.io/article/mog5tnk5pi)

    The **K8s Blue Green Swap Services** step swaps the primary service to the pod set running the new app and the stage service to the pod set running the previous app version. [Learn More](https://docs.harness.io/article/mog5tnk5pi)
ShellScript_stepName_StepConfig: |
    You can run shell scripts in a CD stage using the **Shell Script** step. [Learn More](https://docs.harness.io/article/k5lu0u6i1i)

    With the **Shell Script** step, you can execute scripts in the shell session of the stage in the following ways:

    - Execute scripts on the host running a Harness Delegate. You can use the **Delegate Selectors**  setting in **Advanced** to identify which Harness Delegate to use.
    - Execute scripts on a remote target host in the deployment Infrastructure Definition.
Barrier_stepName_StepConfig: Barriers allow you to synchronize different stages in your Pipeline, and control the flow of your deployment systematically. [Learn More](https://docs.harness.io/article/dmlf8w2aeh)
"flowControl_barriers[0].name": |-
    Barriers allow you to synchronize different stages in your Pipeline, and control the flow of your deployment systematically. [Learn More](https://docs.harness.io/article/dmlf8w2aeh)

    Once you add a Barrier here in **Flow Control**, you reference it in the **Barrier** steps you add to the stages of your Pipeline.
Verify_stepName_StepConfig: |-
    The **Verify** step in a CD stage uses Harness Continuous Verification (CV) to verify your deployments.

    Harness CV integrates with your APMs and logging tools to:

    - Verify that the deployed service is running safely and perform automatic rollbacks.
    - Apply machine learning to every deployment to identify and flag anomalies in future deployments.

    [Learn More](https://docs.harness.io/article/3xhqq9xllp)
cvData_name:
    content: Enter a name for the Verify step.
    width: "400"
cvData_timeout:
    content: |-
        In Timeout, enter a timeout value for the step. You can use:
        w for weeks
        d for days
        h for hours
        m for minutes
        s for seconds
        ms for milliseconds

        [Learn More](https://docs.harness.io/article/3xhqq9xllp-verify-deployments-with-the-verify-step#step_2_enter_a_name_and_timeout)
    width: "400"
cvData_spec.type:
    content: In Continuous Verification Type, select a type that matches your deployment strategy. Rolling, Canary, Blue Green, and Load Test simply refer to the strategy in the stage. [Learn More](https://docs.harness.io/article/3xhqq9xllp-verify-deployments-with-the-verify-step#step_3_select_a_continuous_verification_type)
    width: "400"
cvData_spec.monitoredServiceRef:
    content: Harness automatically creates a Monitored Service using a concatenation of the Service and Environment names. In Monitored Service, click Click to autocreate a monitored service. If the stage Service or Environment settings are Runtime Inputs, the Monitored Service and Health Sources settings will show up in the Runtime Input settings when you run the Pipeline. [Learn More](https://docs.harness.io/article/3xhqq9xllp-verify-deployments-with-the-verify-step#step_4_create_a_monitored_service)
    width: "400"
cvData_spec.spec.sensitivity:
    content: In Sensitivity, you select the risk level that will be used as failure criteria during the deployment. When the criteria are met, the Failure Strategy for the stage or step is executed. [Learn More](https://docs.harness.io/article/3xhqq9xllp-verify-deployments-with-the-verify-step#step_6_select_sensitivity)
    width: "400"
cvData_spec.spec.duration:
    content: In Duration, select the number of data points Harness uses. If you enter 10 minutes, Harness will take the first 10 minutes worth of the log/APM data points and analyze it. The recommended Duration is 10 min for logging providers and 15 min for APM and infrastructure providers. [Learn More](https://docs.harness.io/article/3xhqq9xllp-verify-deployments-with-the-verify-step#step_7_select_duration)
    width: "400"
cvData_spec.spec.trafficsplit: ""
cvData_spec.spec.deploymentTag: |-
    Use a [Harness expression](https://newdocs.helpdocs.io/article/lml71vhsim) to reference the artifact in the stage Service settings.

    The expression `<+serviceConfig.artifacts.primary.tag>` references the primary artifact. [Learn More](https://docs.harness.io/article/3xhqq9xllp)
awsAuthentication: Provide the credentials Harness will use to connect to AWS. [Learn More](https://docs.harness.io/article/m5vkql35ca)
stepAwsAuthForm_accessKey: |-
    Enter the Access Key. You can either the key in plaintext or use an Encrypted [Harness Secret](https://docs.harness.io/article/osfw70e59c).

    See [Access Keys and Secret Keys](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys) from AWS.
stepAwsAuthForm_secretKeyRef: |-
    Enter the Secret Key. You can either create a new Encrypted [Harness Secret](https://docs.harness.io/article/osfw70e59c) or select an existing one.

    See [Access Keys and Secret Keys](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys) from AWS.
Connectviaanyavailabledelegate: If you do not select specific Delegates, Harness uses any available Delegate to perform this Connector's tasks. [Learn More](https://docs.harness.io/article/2k7lnc7lvl)
Connectonlyviadelegateswhichhasallofthefollowingtags: If you select specific Delegates to perform tasks for this Connector, Harness uses those Delegates only. If these Delegates cannot perform the task, Harness does **not** use another Delegate. [Learn More](https://docs.harness.io/article/2k7lnc7lvl)
gcpAuthenticationDetails:
    content: |-
        Choose the method for Harness to use when connecting to GCP. [Learn More](https://docs.harness.io/article/yykfduond6)

        Select one of the following:

        - **Specify credentials here**: Enter the **Service Account Key** below.
        - **Use the credentials of a specific Harness Delegate**: Select this option to have the Connector inherit the credentials used by the Harness Delegate running in GCP.

        **Note:** For connections to a Kubernetes cluster, you can also use the Harness platform-agnostic [Kubernetes Cluster Connector](https://docs.harness.io/article/1gaud2efd4).
    width: "400"
gcpConnectorSecretKeyTooltip: |-
    Select or create a new [Harness Encrypted Text secret](https://docs.harness.io/article/ygyvp998mu) that contains the Google Cloud's Account Service Key File. [Learn More](https://docs.harness.io/article/yykfduond6)

    To obtain the Google Cloud's Account Service Key File, see [Creating and managing service account keys](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) from Google.

    Use JSON formatting. P12 service account keys are not recommended unless they are necessary for backwards compatibility.

    Here's an [Account Service Key download example](https://files.helpdocs.io/kw8ldg1itf/articles/6x52zvqsta/1593629254966/image.png).
K8sConnectorDetails: |+
    Choose the method for Harness to use when connecting to the cluster. [Learn More](https://docs.harness.io/article/sjjik49xww)

    Select one of the following:

    - **Specify master URL and credentials**: Enter the **Service Account Key** below.
    - **Use the credentials of a specific Harness Delegate**: Select this option to have the Connector inherit the credentials used by the Harness Delegate running in the cluster.

K8sAuthenticationTooltip: |-
    If you want to enter specific credentials manually, there are several options. [Learn More](https://docs.harness.io/article/sjjik49xww)

    **Note**: Typically, username and password is not used. The cluster would need Basic authentication enabled and a specific username and password configured for authentication.
k8ClusterForm_username: You can use an inline username or a [Harness Encrypted Text secret](https://docs.harness.io/article/ygyvp998mu). [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_password: Select or create a new [Harness Encrypted Text secret](https://docs.harness.io/article/ygyvp998mu). [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_serviceAccountToken: |-
    Add the service account token for the service account. The token should have the cluster-admin role. [Learn More](https://docs.harness.io/article/sjjik49xww)

    The token must be pasted in decoded in the [Harness Encrypted Text secret](https://docs.harness.io/article/ygyvp998mu) you create/select.
k8ClusterForm_oidcIssuerUrl: The issuer URI for the provider authentication server. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_oidcUsername: Username for a user assigned to the provider app. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_oidcPassword: Password for a user assigned to the provider app. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_oidcCleintId: Public identifier for the client that is required for all OAuth flows. In Okta, this is located in the **Client Credentials** for the app. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_oidcCleintSecret: The client secret for the app. In Okta, this is located in the **Client Credentials** for the app. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_oidcScopes: OIDC scopes are used by an application during authentication to authorize access to a user's details, like name and picture. In Okta, you can find them in the **Authorization Server Scopes** tab. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_clientKey: Create or select a Harness secret to add the client key for the client certificate. The key can be pasted into the secret either Base64 encoded or decoded. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_clientKeyCertificate: |-
    Create or select a Harness secret to add the client certificate for the cluster.

    The public client certificate is generated along with the private client key used to authenticate. The certificate can be pasted in either Base64 encoded or decoded. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_clientKeyPassphrase: Create or select a Harness secret to add the client key passphrase. The passphrase can be pasted in either Base64 encoded or decoded. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_clientKeyAlgo: Specify the encryption algorithm used when the certificate was created. Typically, RSA. [Learn More](https://docs.harness.io/article/sjjik49xww)
k8ClusterForm_clientKeyCACertificate: Create or select a Harness secret to add the Certificate authority root certificate used to validate client certificates presented to the API server. For more information, see [Authenticating](https://kubernetes.io/docs/reference/access-authn-authz/authentication/) from Kubernetes. [Learn More](https://docs.harness.io/article/sjjik49xww)
artifactRepositoryAuthentication:
    content: |-
        Make sure the following permissions are granted to the user:

        - **Privileged User** is required to access the API, whether Anonymous or a using a specific username (username and passwords are not mandatory).
        - **Read** permission to all Repositories.

        If used as a Docker Repo, the user account needs:

        - List images and tags
        - Pull images

        See [Managing Permissions: JFrog Artifactory User Guide](https://www.jfrog.com/confluence/display/RTF/Managing+Permissions).
    width: "400"
artifactRepositoryDetails: Harness supports both cloud and on-prem versions of Artifactory. [Learn More](https://docs.harness.io/article/euueiiai4m)
stepArtifactoryAuthForm_username: Username for the Artifactory account user.
stepArtifactoryAuthForm_password: Select or create a new Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c`).
dockerConnectorProviderType: Select the Docker registry platform that you want to connect with Harness. [Learn More](https://docs.harness.io/article/u9bsd77g5a)
dockerConnectorAuthentication: |-
    Make sure the connected user account has the following permissions:

    - Read permission for all repositories.

    The user needs access and permissions to the following:

    - List images and tags
    - Pull images

    See [Docker Permissions](https://docs.docker.com/datacenter/dtr/2.0/user-management/permission-levels/).

    **Note:** If you are using anonymous access to a Docker registry for a Kubernetes deployment, then `imagePullSecrets` should be removed from the container specification. This is standard Kubernetes behavior and not related to Harness specifically.
dockerAuthForm_username: The username for the Docker registry account.
dockerAuthForm_password: The password uses a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c).
helmRepoAuthForm_username: If the charts are backed by HTTP basic authentication, you can also supply the username. See [Share your charts with others](https://helm.sh/docs/topics/chart_repository/#share-your-charts-with-others) from Helm.
helmRepoAuthForm_password: If the charts are backed by HTTP basic authentication, you can also supply the password. See [Share your charts with others](https://helm.sh/docs/topics/chart_repository/#share-your-charts-with-others) from Helm.
NexusConnectorDetailsTooltip: Connect Harness to your Nexus artifact repo. [Learn More](https://docs.harness.io/article/faor0dc98d)
NexusConnectorAuthentication: |-
    Ensure the connected user account has the following permissions in the Nexus Server. 

    - Repo: All repositories (Read)
    - Nexus UI: Repository Browser

    In Nexus, it looks like [this](https://files.helpdocs.io/i5nl071jo5/articles/faor0dc98d/1609804056785/image.png).

    If used as a Docker Repo, the user needs:

    - List images and tags
    - Pull images

    See [Nexus Managing Security](https://help.sonatype.com/display/NXRM2/Managing+Security).
nexusAuth_username: The username for the Nexus account.
nexusAuth_password: The password uses a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c).
awsCCDetailsTooltip: Connect Harness to AWS CodeCommit to fetch code or sync Projects. [Learn More](https://docs.harness.io/article/jed9he2i45)
awsCcAuthForm_accessKey: Enter the AWS Access for the account you want to use.
awsCcAuthForm_secretKey: Enter the AWS Secret Key using a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c).
githubURLType: |-
    You can select **Git Account** (which is a GitHub **organization**) or **Git Repository**.

    You can add a connection to your entire Git org or just a repo in the org. Selecting a Git org enables you to use one Connector for all of your subordinate repos.

    Later when you test this connection, you will use a repo in the org.

    [Learn More](https://docs.harness.io/article/v9sigwjlgo)
githubConnectionType:
    content: |-
        You can select **HTTP** or **SSH** for the connection. 

        You will need to provide the protocol-relevant URL in **URL**.

        If you use Two-Factor Authentication for your Git repo, you connect over HTTPS or SSH. HTTPS is required a personal access token.

        [Learn More](https://docs.harness.io/article/v9sigwjlgo)
    width: "400"
githubDetailsStepForm_url:
    content: |-
        The GitHub URL is the URL for a Git org or repo. Ensure that it matches the **Connection Type** option you selected.

        - If you selected **Git Repository** in **URL Type**, enter the full URL for the repo. Examples: 
             - `https://github.com/org-name/repo-name` (HTTP)
             - `git@github.com:org-name/repo-name`(SSH).

        - If you selected **Git Account** in **URL Type**, enter the URL without the repo name (you will provide this when you use the Connector). Examples:
             - `https://github.com/org-name`(HTTP)
             - `git@github.com:org-name`(SSH)

        [Learn More](https://docs.harness.io/article/v9sigwjlgo)
    width: "400"
githubDetailsStepForm_validationRepo: Enter a repo name in your GitHub account.
githubAuthentication: |-
    Enter the credentials for the org or repo you selected.

    You can use a password/token for HTTPS credentials.

    If you selected SSH as the connection protocol, you must add the SSH Key for use with the connection. 

    **Note:** Readonly GitHub repos also require username and password/token.

    [Learn More](https://docs.harness.io/article/v9sigwjlgo)
stepGithubAuthForm_username: Your personal GitHub account username.
stepGithubAuthForm_password: |-
    A Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) for the credentials of your GitHub user account.

    A Personal Access Token (PAT) is required if your GitHub authentication uses 2FA. Select **Username and Token** in **Authentication**.

    Typically, you can validate your token from the command line before using it in Harness. For example:

    `curl -i https://api.github.com -u <username>:<token>`
gitHubPersonalAccessTooltip: |-
    A Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) for the Personal Access Token (PAT).

    A PAT is required if your GitHub authentication uses 2FA.

    Typically, you can validate your token from the command line before using it in Harness. For example:

    `curl -i https://api.github.com -u <username>:<token>`

    **Note:** If you've set up 2FA in your Git repo, then you need to generate a PAT in your repo and enter that token in the **Personal Access Token** setting. See [GitHub settings](https://github.com/settings/tokens/new) for steps on setting up the personal access token. 
stepGithubAuthForm_accessToken: |-
    A Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) for the Personal Access Token (PAT).

    A PAT is required if your GitHub authentication uses 2FA.

    Typically, you can validate your token from the command line before using it in Harness. For example:

    `curl -i https://api.github.com -u <username>:<token>`

    **Note:** If you've set up 2FA in your Git repo, then you need to generate a PAT in your repo and enter that token in the **Personal Access Token** setting. See [GitHub settings](https://github.com/settings/tokens/new) for steps on setting up the personal access token. 
stepGithubAuthForm_apiAccessToken: ""
githubApiAuthentication: You can use a Personal Access Token or GitHub App for authentication. [Learn More about using a GitHub App with Harness](https://docs.harness.io/article/nze5evmqu1)
stepGithubAuthForm_installationId: |-
    Enter the Installation ID located in the URL of the installed GitHub App.

    See an [example](https://files.helpdocs.io/i5nl071jo5/articles/nze5evmqu1/1614213226801/image.png).
stepGithubAuthForm_applicationId: |-
    Enter the **GitHub App ID** from the GitHub App **General** tab.

    See an [example](https://files.helpdocs.io/i5nl071jo5/articles/nze5evmqu1/1614213187702/image.png).
createUpdateSecretForm_secretManagerIdentifier: Harness includes a built-in Secrets Management feature that enables you to store encrypted secrets, such as access keys, and use them in your Harness Connectors and Pipelines. [Learn More](https://docs.harness.io/article/bo4qbrcggv)
createUpdateSecretForm_name: Enter a name for the encrypted text. This is the name you will use to reference the text elsewhere in your resources. [Learn More](https://docs.harness.io/article/osfw70e59c)
createUpdateSecretForm_value: Enter a value for the encrypted text. [Learn More](https://docs.harness.io/article/osfw70e59c)
createUpdateSecretForm_description: Enter a description for the secret. A description can be very helpful when your team uses a lot of secrets for the same resource.
createUpdateSecretForm_tags: Use tags to help you sort secrets.
cfFlagBool_kind: Harness Feature Flags support Boolean and Multivariate flag type. A boolean flag can have false set as its default off variation and true set as its default on variation.
"cfFlagBool_variations[0].name": In boolean, you can have only two variations true or false. In this step give a name to your flag.
"cfFlagBool_variations[0].value": In boolean, you can have only two variations true or false. In this step name the flag and set the value associated with it. The value can be true or false.
"cfFlagBool_variations[1].name": In this step, give a name to other variation and set value associated with it.
"cfFlagBool_variations[1].value": In this step give a value to the flag for which you have given a name.
ff_ffListing_heading: |-
    Feature Flags (FF) is a feature management solution that enables users to change the software's functionality without deploying new code.

    [Learn more](https://docs.harness.io/article/7n9433hkc0-cf-feature-flag-overview)
ff_targets_heading:
    content: |
        Targets are used to control which user sees the variation of a feature flag. Targets can be used to add users for internal testing or beta programs before a broader rollout.
        The targets added in your code are discovered automatically and populated in the Harness UI.
        [Learn More](https://docs.harness.io/article/dbk9uoaid3-add-targets)
    width: "400"
ff_segments_heading: |-
    The Target Groups are a collection of targets. Target Groups allow you to serve flag variations to a list of targets in bulk.

    [Learn More](https://docs.harness.io/article/5qz1qrugyk-add-target-groups)
ff_env_heading:
    content: |
        Harness Environments represent your deployment targets (QA, Prod, etc). You can add the same Environment to as many Pipelines and stages as you need. [Learn More](https://docs.harness.io/article/cqgeblt4uh)
    width: "400"
ff_ffVariations_heading: |-
    A Feature flag has default variations.  A boolean flag can have false set as its default off variation and true set as its default on variation. A multivariate flag could have variation 1 set as its default off variation and variation 2 set as its default on variation, with variation 3 configured to appear when a user has a certain email address
    [Learn More](https://docs.harness.io/article/8bf3us11kz)
ff_ffPrerequisites_heading: |-
    Prerequisites allow you to add a flag as a dependency to enable a feature. You can add any other existing flags from your environment as a prerequisite. 
    [Learn More](https://docs.harness.io/article/iijdahygdm)
ff_ffDefaultRules_heading:
    content: Using default rules, you can specify to serve a specific variation.
    width: "400"
ff_ffCustomRules_heading: |
    Custom rules serve specific targets differently. In Custom Rules, you can add the following rules:
    •   Serve Variation to Target
    •   On Request, check for condition and serve variation
ff_targetTargetSettings_heading: Target Settings  are used to include or exclude Targets from the Target Group.
ff_targetFlagSettings_heading: In this step the flag is added to the target group. Select the flag and serve its variation.
ff_targetTargetGroups_manuallyAdded: In this step, the target group is added manually. Create a target group and add a name for your target group.
ff_targetTargetGroups_exclusionList: In this step, the target group is selected that needs to be excluded from the list.
bitbucketURLType: |-
    You can select Account or Git Repository.

    You can add a connection to your entire Git account or just a repo in the account. Selecting a Git account enables you to use one Connector for all of your subordinate repos.

    Later when you test this connection, you will use a repo in the account. [Learn More](https://docs.harness.io/article/iz5tucdwyu)
bitbucketConnectionType: |-
    You can select HTTPS or SSH for the connection.

    Add the protocol-relevant URL in **Bitbucket Account URL**.

    If you use 2FA for your Git repo, you connect over HTTPS or SSH. HTTPS requires a personal access token.
    [Learn More](https://docs.harness.io/article/iz5tucdwyu)
bitbucketDetailsStepForm_url: |-
    The URL for your Git repo. Make sure that it matches the **Connection Type** option you selected.

    - If you selected **Repository** in **URL Type**, enter the full URL for the repo.
    - If you selected **Account** in **URL Type**, enter the URL without the repo name. When you use this Connector in a Harness setting you will be prompted to provide a repo name.

    [Learn More](https://docs.harness.io/article/iz5tucdwyu)
bitbucketDetailsStepForm_validationRepo: Enter a repo in the account for the URL you provided. Harness will use this repo to test the connection. [Learn More](https://docs.harness.io/article/iz5tucdwyu)
bitbAuthForm_username: The username for the Bitbucket account.
bitbAuthForm_password: |-
    Create or select a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) for the credentials of your Bitbucket user account.

    **Note:** If you have set up 2FA in your Bitbucket account, then you need to generate a personal access token in your account and enter that token in **Password**.
bitbAuthForm_enableAPIAccess: This option is required for using Git-based triggers, Webhooks management, and updating Git statuses.
bitbAuthForm_apiAccessUsername: Enter the username connected to the personal access token.
bitbAuthForm_accessToken: |-
    Create or select a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) for the personal access token. 

    See [Personal Access Tokens](https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html) from Bitbucket.
connectorDetailsStepFormGit_name: |-
    Enter a name for this Connector.

    The Git Connector is a Git platform-agnostic Connector. While you can use it with any Git provider, the most popular providers like GitHub have their own Harness Connectors. [Learn More](https://docs.harness.io/category/xyexvcc206)
gitURLType: |-
    You can select Account or Repository.

    You can add a connection to your entire Git account or just a repo in the account. Selecting a Git account enables you to use one Connector for all of your subordinate repos.

    Later when you test this connection, you will use a repo in the account. [Learn More](https://docs.harness.io/article/tbm2hw6pr6)
gitConnectionType: |-
    You can select HTTPS or SSH for the connection.

    Add the protocol-relevant URL in **Git Account URL**.

    If you use 2FA for your Git repo, you connect over HTTPS or SSH. HTTPS requires a personal access token. [Learn More](https://docs.harness.io/article/tbm2hw6pr6)
stepGitAuthForm_username: The username for the Git account to use in the Connector. You can use a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c).
stepGitAuthForm_password: Create or select a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) for the password.
connectorDetailsStepFormGitlab_name: Enter a name for this GitLab Connector. [Learn More](https://docs.harness.io/article/5abnoghjgo)
gitlabURLType: |-
    You can select Account or Repository.

    You can add a connection to your entire GitLab account or just a repo in the account. Selecting a GitLab account enables you to use one Connector for all of your subordinate repos.

    Later when you test this connection, you will use a repo in the account. [Learn More](https://docs.harness.io/article/5abnoghjgo)
gitlabConnectionType: |-
    You can select HTTPS or SSH for the connection.

    You will need to provide the protocol-relevant URL in **GitLab Account URL**.

    If you use 2FA for your GitLab repo, you connect over HTTPS or SSH. HTTPS is required a personal access token.

    [Learn More](https://docs.harness.io/article/5abnoghjgo)
gitlabDetailsStepForm_url: |-
    The URL for your GitLab repo. Ensure that it matches the **Connection Type** option you selected.

    - If you selected **Repository** in **Type**, enter the full URL for the repo.
    - If you selected **Account** in **Type**, enter the URL without the repo name. When you use this Connector in a Harness setting you will be prompted to provide a repo name.

    [Learn More](https://docs.harness.io/article/5abnoghjgo)
gitlabDetailsStepForm_validationRepo: Enter the repo for Harness to use to test the connection.
stepGitlabAuth_username: |-
    Enter the GitLab account username for Harness to use. 

    Often, the username `git` will work. [Learn More](https://docs.harness.io/article/5abnoghjgo)
stepGitlabAuth_password: |-
    Create or select a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) for the credentials of your GitLab user account.

     [Learn More](https://docs.harness.io/article/5abnoghjgo)
stepGitlabAuth_enableAPIAccess: This option is required for using Git-based triggers, Webhooks management, and updating Git statuses. [Learn More](https://docs.harness.io/article/5abnoghjgo)
stepGitlabAuth_apiAccessToken: Create or select a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) for the personal access token.
jiraDetailsForm_jiraUrl: |-
    Enter the base URL by which your users access your Jira applications. For example: `https://mycompany.atlassian.net`.

    In Jira, the base URL is set to the same URL that Web browsers use to view your Jira instance. 

    For details, see [Configuring the Base URL](https://confluence.atlassian.com/adminjiraserver071/configuring-the-base-url-802593107.html) from Atlassian.

    If you are using the on-premises Jira server with HTTPS redirects enabled, use the HTTPS URL to ensure the [JIRA client follows redirects](https://confluence.atlassian.com/adminjiraserver/running-jira-applications-over-ssl-or-https-938847764.html).
jiraDetailsForm_username: The Jira account username. Use the full email address you use to log into Jira.
jiraDetailsForm_passwordRef: |-
    Create or select a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) for the API key.

    See [Manage API tokens for your Atlassian account](https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/) from Atlassian.
connectorDetailsStepFormAwsKms_name: Enter a name for this AWS KMS Connector. [Learn More](https://docs.harness.io/article/pt52h8sb6z)
awsKmsConfigForm_roleArn: |-
    Enter the Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target deployment AWS account.

    [Learn More](https://docs.harness.io/article/pt52h8sb6z)
awsKmsConfigForm_externalName: |-
    If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.

    For more information, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) from AWS.

    [Learn More](https://docs.harness.io/article/pt52h8sb6z)
awsKmsConfigForm_assumeStsRoleDuration: |-
    This is the AssumeRole Session Duration. See **Session Duration** in the [AssumeRole](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) in AWS docs.

    [Learn More](https://docs.harness.io/article/pt52h8sb6z)
connectorDetailsStepFormAwsSecretManager_name: Enter a name for this AWS Secret Manager Connector.
awsSMConfigForm_credType: |-
    You can select the following options for authenticating with AWS:

    - AWS Access Key
    - Assume IAM Role on Delegate
    - Assume Role Using STS on Delegate
awsSMConfigForm_accessKey: Create or select a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) using the AWS Access Key ID for the IAM user you want to use for AWS Secrets Manager connections.
awsSMConfigForm_secretKey: Create or select a Harness [Encrypted Text secret](https://docs.harness.io/article/osfw70e59c) using the contents of the Secret Key corresponding to the Access Key ID.
awsSMConfigForm_secretNamePrefix: |-
    Enter a prefix to be added to all secrets. 

    For example, `devops` will result in secrets like `devops/mysecret`. The prefix is not a folder name, but a prefix. 

    AWS Secrets Manager uses is a flat naming method.
awsSMConfigForm_region: Select the AWS Region for the Secrets Manager.
awsSMConfigForm_default: Enable this option to make this Secrets Manager the default for all secrets operations.
awsSMConfigForm_roleArn: Enter the Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target deployment AWS account.
awsSMConfigForm_externalId: |-
    If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.

    For more information, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html) from AWS.
awsSMConfigForm_assumeStsRoleDuration: |-
    This is the AssumeRole Session Duration. 

    See **Session Duration** in the [AssumeRole](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html) AWS docs.
connectorDetailsStepFormAzureKeyVault_name: Enter a name for this Azure Key Vault Connector. [Learn More](https://docs.harness.io/article/53jrd1cv4i)
connectorDetailsStepFormVault_name: Enter a name for this HashiCorp Vault Connector. [Learn More](https://docs.harness.io/article/s65mzbyags)
vaultConfigForm_renewalIntervalMinutes: Enter how often Harness Delegate reloads the Vault access token. [Learn More](https://docs.harness.io/article/s65mzbyags)
autostoppingRule: AutoStopping Rules make sure that your non-production resources run only when used, and never when idle. It also allows you to run your workloads on fully orchestrated spot instances without any worry of spot interruptions. [Learn More](https://docs.harness.io/article/wzr5tz0ero)
summaryOfRulesHeader: |-
    AutoStopping dashboard allows you to view a summary of all the AutoStopping rules you have created in a simple and intuitive interface. The following are the key features of the AutoStopping Rules dashboard:

    - View total savings in your setup after AutoStopping rules are created
    - View total spend in your setup after AutoStopping rules are created
    - Number of instances managed using AutoStopping rules
    - State of the instances where AutoStopping rules are applied
    - Number of active AutoStopping rules in your setup

    [Learn More](https://docs.harness.io/article/ehmi6kiynl)
ciRunTests_name:
    content: Enter a unique step name.
    width: "400"
ciRunTests_description: Description for the step.
RunTests_stepName_StepConfig: The Run Tests step can be used to run tests in your CI stages. When you use Run Tests, you enable Test Intelligence for your CI stage. [Learn More](https://docs.harness.io/article/ota4xj59le)
ciRunTests_spec.runOnlySelectedTests: This option enables Test Intelligence. If this option is unchecked and set to False, then the Test Intelligence will be disabled and all tests will run. [Learn More](https://docs.harness.io/article/vtu9k1dsfa)
ciBuildInfra_connectorRef: Select a Harness Connector for a Kubernetes cluster. A Kubernetes cluster is used as a build farm. [Learn More](https://docs.harness.io/article/ia5dwx5ya8)
notificationsOverview_name: Enter a name for your Notification Rule. Notification Rules are used to create a notification strategy for your Pipeline. [Learn More](https://docs.harness.io/article/4bor7kyimj)
pipelineEvents_types.AllEvents: Select this option to receive notifications for all Pipeline events. [Learn More](https://docs.harness.io/article/4bor7kyimj)
pipelineEvents_types.PipelineStart: Select this option to receive notifications when the Pipeline execution starts. [Learn More](https://docs.harness.io/article/4bor7kyimj)
pipelineEvents_types.PipelineEnd: Select this option to receive notifications when the Pipeline execution ends. [Learn More](https://docs.harness.io/article/4bor7kyimj)
pipelineEvents_types.PipelineSuccess: Select this option to receive notifications if the Pipeline execution is successful. For CD, Harness considers a deployment successful when the deployed service reaches steady state. [Learn More](https://docs.harness.io/article/4bor7kyimj)
pipelineEvents_types.PipelineFailed: Select this option to receive notifications when the Pipeline execution fails. [Learn More](https://docs.harness.io/article/4bor7kyimj)
pipelineEvents_types.PipelinePaused: Select this option to receive notifications when the Pipeline execution is paused. [Learn More](https://docs.harness.io/article/4bor7kyimj)
pipelineEvents_types.StageFailed:
    content: Select this option to receive notifications when the Stage execution fails. [Learn More](https://docs.harness.io/article/4bor7kyimj)
    width: "400"
pipelineEvents_types.StageSuccess: Select this option to receive notifications when each Pipeline stage execution is successful. You can select the stages to use. [Learn More](https://docs.harness.io/article/4bor7kyimj)
pipelineEvents_types.StageStart: Select this option to receive notifications when each Pipeline stage execution starts. You can select the stages to use. [Learn More](https://docs.harness.io/article/4bor7kyimj)
pipelineEvents_types.StepFailed:
    content: Select this option to receive notifications when each Pipeline step execution fails. [Learn More](https://docs.harness.io/article/4bor7kyimj)
    width: "400"
manifestDetails_repoName: Enter the name of the repo where the files are located. [Learn More](https://docs.harness.io/article/ssbq0xh0hx)
manifestDetails_paths:
    content: |-
        Enter the path to the manifest file or folder in the repo.

        If the Connector you selected in **Specify K8s Manifest Store** already has the repo name, you simply need to add the path from the root of the repo. [Learn More](https://docs.harness.io/article/ssbq0xh0hx)

        ### All manifests and values files
        If you enter a folder, Harness will automatically detect and use all of the manifests and values YAML files in that folder. Values files can also be added separately as a [Values YAML type](https://docs.harness.io/article/q002wjjl4d). 
    width: "400"
manifestDetails_skipResourceVersioning: |-
    By default, Harness versions ConfigMaps and Secrets deployed into Kubernetes clusters. Harness uses a ConfigMap for release versioning.

    In some cases, you might want to skip versioning.

    When you enable **Skip Resource Versioning**, Harness will not perform versioning of ConfigMaps and Secrets for the deployment.

    If you have enabled **Skip Resource Versioning** for a few deployments and then disable it, Harness will start versioning ConfigMaps and Secrets.

    [Learn More](https://docs.harness.io/article/ssbq0xh0hx)
Http_stepName_StepConfig: You can use the HTTP step to run HTTP methods containing URLs, methods, headers, assertions, and variables. [Learn More](https://docs.harness.io/article/64hhfpbgbj)
HarnessApproval_stepName_StepConfig: |-
    You can specify Harness User Group(s) to approve or reject a Pipeline at any point in its execution. During deployment, the User Group members use the Harness Manager to approve or reject the Pipeline deployment manually. [Learn More](https://docs.harness.io/article/fkvso46bok)

    Approvals are added in between Stages to prevent the Pipeline execution from proceeding without an approval.
cdEditStage_name:
    content: A Stage is a subset of a Pipeline that contains the logic to perform one major segment of the Pipeline process. Stages are based on the different milestones of your Pipeline, such as building, approving, and delivering. [Learn More](https://docs.harness.io/article/2chyf1acil)
    width: "400"
overviewStageVariables: |-
    Stage variables are custom variables you can add and reference in your stage and Pipeline. They are available across the Pipeline. You can override their values in subsequent stages. [Learn More](https://docs.harness.io/article/2chyf1acil)

    You can even reference stage variables in the files fetched at runtime.

    For example, you could create a stage variable `name` and then reference it in the Kubernetes values.yaml file used by this stage: `name: <+stage.variables.name>`. When you run this Pipeline, you provide a value for `name` and that value is used for the values.yaml file.

    You reference stage variables **within their stage** using the expression `<+stage.variables.[variable name]>`.

    You reference stage variables **outside their stage** using the expression `<+pipeline.stages.[stage name].variables.[variable name]>`.
addEditCustomVariableForm_name: |-
    Enter a name for this stage variable. You reference stage variables within their stage using the expression `<+stage.variables.[name]>`

    You reference stage variables **outside their stage** using the expression `<+pipeline.stages.[stage name].variables.[variable name]>`.  [Learn More](https://docs.harness.io/article/2chyf1acil)
addEditCustomVariableForm_type: Select the variable type. If you select **Secret**, click **Save** and then create or select a Harness secret for the **Value**. [Learn More](https://docs.harness.io/article/osfw70e59c)
delegateSetupStepForm_name: Enter a name for the Delegate. The name you enter is added as metadata in the StatefulSet for the Kubernetes Delegate. [Learn More](https://docs.harness.io/article/f9bd10b3nj)
delegateSetupStepForm_delegateConfigurationId: Delegate Configurations profiles are depricated, please use `INIT_SCRIPT` instead. [Learn More](https://docs.harness.io/article/yte6x6cyhn-run-scripts-on-delegates)
delegateSetupStepForm_k8sConfigDetails.namespace: |
    By default, the Delegate resides in a namespace in the target cluster with a service account attached to it. The service account uses a ClusterRole for permission to deploy to all namespaces in the cluster.

    This centralized model is simple and efficient, but it doesn't let you restrict teams to deploying into specific namespaces. Any team member can deploy to any namespace.

    As an alternative, you can use a distributed model that places a Delegate in a specific namespace in the cluster. It limits each Delegate to deploying into its own namespace only. 

    Later, when you set up a Harness Kubernetes Cluster Connector to the cluster, you can use a service account in that namespace with the Cluster Admin role. [Learn More](https://docs.harness.io/article/jud4rz7wl4)
orgForm_name: |-
    Enter a name for this organization. 

    Harness Organizations (Orgs) allow you to group Harness Projects that share the same goal. For example, all Projects for a business unit or division. [Learn More](https://docs.harness.io/article/7fibxie636)
vaultConfigForm_namespace: Enter the Vault [namespace](https://www.vaultproject.io/docs/enterprise/namespaces) if you use Vault namespaces to support tenant isolation.
gitSyncRepoForm_name: |-
    Enter a name for the repo. 

    It doesn't have to be the same as the Git repo name. The name you enter here will appear in Harness only. It'll identify the Project repo. [Learn More](https://docs.harness.io/article/hzajxmb3oj)


    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
gitSyncRepoForm_repo: |-
    Once you add a Connector above you should see the repo URL in **Repository Name**.

    Click **Test Connection**. Once Harness verifies the connection, you will see `Connection Successful`. [Learn More](https://docs.harness.io/article/hzajxmb3oj) 

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
gitSyncRepoForm_rootfolder: |-
    The Harness Folder is the default folder in the repo where you are syncing your Project.

    Enter the name of the folder in your repo where you want to sync. [Learn More](https://docs.harness.io/article/hzajxmb3oj)

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
gitSyncRepoForm_branch: |-
    Select the branch that you want to use, such as **main**. [Learn More](https://docs.harness.io/article/hzajxmb3oj) 

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
gitSyncRepoTab_repo: |-
    This is the URL of the repo where Harness syncs this Project.

    Click **Test Connection**. Harness verifies the connection. [Learn More](https://docs.harness.io/article/hzajxmb3oj)

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
gitSyncRepoTab_rootFolder: |-
    The Harness Folder is the default folder in the repo where you are syncing your Project.

    Enter the name of the folder in your repo where you want to sync. [Learn More](https://docs.harness.io/article/hzajxmb3oj)

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
gitSyncRepoTab_isDefault: |-
    **What is the default folder?** When a Pipeline in one repo needs to access a Connector/Secret/etc in another repo at runtime, the Pipeline will always use the Connector/Secret/etc in their **default folder**. Learn More](https://docs.harness.io/article/hzajxmb3oj)

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
connectorDetailsStepFormGithub_repo: |-
    Enter a name for the repo.

    It doesn't have to be the same as the Git repo name. The name you enter here will appear in Harness only. It'll identify the Project repo for other users. [Learn More](https://docs.harness.io/article/hzajxmb3oj)

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
saveToGitForm_name: |-
    Enter a name for the Connector.

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
saveToGitForm_repoIdentifier: |-
    Enter the name of the repo to use. 

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
saveToGitForm_rootFolder: |-
    The Harness Folder is the default folder in the repo where you are syncing your Project.

    Enter the name of the folder in your repo where you want to sync. [Learn More](https://docs.harness.io/article/auqv67yr6x)

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
saveToGitForm_filePath: |-
    Enter a name for the YAML file, such as `Example.yaml`. Harness will generate one automatically from the Pipeline name, but you can add your own. [Learn More](https://docs.harness.io/article/auqv67yr6x) 

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
saveToGitForm_commitMsg: |-
    Enter a message for the commit that adds this Connector. [Learn More](https://docs.harness.io/article/auqv67yr6x) 

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
saveToGitForm_createPr: |-
    You can start a pull request for adding this Connector. [Learn More](https://docs.harness.io/article/auqv67yr6x) 

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
saveToGitForm_branch: |-
    Enter a branch name to add this Connector to a branch. [Learn More](https://docs.harness.io/article/auqv67yr6x)

    New to Harness Git Experience? See the [Quickstart](https://docs.harness.io/article/dm69dkv34g-harness-git-experience-quickstart).
conditionalExecutionDeployStage: Conditional Execution applies to all steps that do not have their own Conditional Execution. A step's Conditional Execution overrides its stage's Conditional Execution. [Learn More](https://docs.harness.io/article/i36ibenkq2)
failureStrategyDeployStage: |-
    Define the failure strategy for this stage. [Learn More](https://docs.harness.io/article/htrur23poj)

    You can apply failure strategies to the stage and its steps and step groups.

    Failure strategies follow this order:

    - **Step-level:** this failure strategy overrides (or enhances) the stage-level failure strategy.
    - **Step Group-level:** you can set up a failure strategy for all steps in the group. Individual steps in the group will not have a failure strategy. This strategy also overrides the stage-level strategy.
    - **Stage-level:** the failure strategy for all steps and step groups in the stage. The stage-level strategy can be overridden by step and step group failure strategies, if present.
overlayInputSet_name: Overlays are groups of Input Sets. Overlays enable you to provide several Input Sets when executing a Pipeline. [Learn More](https://docs.harness.io/article/3fqwa8et3d)
inputSetForm_name: |-
    An Input Set includes all the runtime inputs for the Pipeline. 

    You can create multiple Input Sets, each with a different set of values for the Pipeline's runtime inputs.

    When you run the Pipeline you can select an Input Set to automatically populate the runtime inputs. [Learn More](https://docs.harness.io/article/3fqwa8et3d)
userRoleAssignementForm_user: |-
    Enter the email address(es) that the User will use to log into Harness.

    If you have Roles and Resource Groups defined, select the Roles and Resource Groups for this user.  [Learn More](https://docs.harness.io/article/hyoe7qcaz6)
userGroupForm_name: |-
    Enter a name for this User Group.

    Harness User Groups help you manage User access. [Learn More](https://docs.harness.io/article/dfwuvmy33m)
userGroupForm_userList: |-
    Select the Users for this User Group. 

    Each User in a User Group inherits the roles assigned to that group. [Learn More](https://docs.harness.io/article/dfwuvmy33m)
serviceAccountForm_name: Admin Users of an account can create a Service Account with specific Role Bindings. [Learn More](https://docs.harness.io/article/e5p4hdq6bd)
resourceGroupModalForm_name: A Resource Group is a set of Harness resources that a User or User Group can access. [Learn More](https://docs.harness.io/article/yp4xj36xro)
createDashboardForm_folderId: Select the dashboard folder for this dashboard. [Learn More](https://docs.harness.io/article/ardf4nbvcy)
createDashboardForm_name: Enter a name for this dashboard. [Learn More](https://docs.harness.io/article/ardf4nbvcy)
createDashboardForm_description: Tag this dashboard so you can locate it easily and group it with other dashboards and Harness entities. [Learn More](https://docs.harness.io/article/ardf4nbvcy)
coGetStarted: |-
    AutoStopping Rules make sure that your non-production resources run only when used, and never when idle:
    - Automatically detect idle times and shut down (on-demand) or terminate (spot) resources.
    - Automatically restart resources whenever there is traffic or usage requests.
    - Stopped/terminated machines are always accessible using the same access patterns that the team is used to – DNS link, SSH, RDP, background tasks.
    - Enable running workloads on fully-orchestrated spot instances without worrying about spot interruptions.

    To configure AutoStopping Rules, you first need to create a connector to connect Harness to your account and then create AutoStopping Rules.


    Connectors allow Harness to connect to your deployment environments, such as Kubernetes Clusters, AWS, Google Cloud Platform, Azure, etc. For more information, see the following topics:
    - [Create an AWS Connector for AutoStopping Rules](https://docs.harness.io/article/hiyi6xvj36)
    - [Create an Azure Connector for AutoStopping Rules](https://docs.harness.io/article/e7yidxmtmj)


    Once you have connected your cloud account to Harness, create intelligent AutoStopping Rules to optimize your cloud costs. For more information, see the following topics:
    - [Create AutoStopping Rules for AWS](https://docs.harness.io/article/7025n9ml7z)
    - [Create AutoStopping Rules for Azure](https://docs.harness.io/article/r5x5pvuqfn)
awsSetupAccess: |-
    Define how to access the underlying application running on the resources managed by this AutoStopping Rule. You can use any of the following methods:
    - DNS Link: If the underlying applications running on the resources managed by the AutoStopping Rule are accessed by an HTTP or HTTPS URL.
    - SSH/RDP: If the underlying applications running on the resources managed by AutoStopping Rule are accessed via SSH or RDP.
    See [Setup Access Using DNS Link](https://docs.harness.io/article/7025n9ml7z-create-autostopping-rules-aws#setup_access_using_dns_link) and [Setup Access Using SSH/RDP](https://docs.harness.io/article/7025n9ml7z-create-autostopping-rules-aws#setup_access_using_ssh_rdp)
azureSetupAccess: |-
    Define how to access the underlying application running on the resources managed by this AutoStopping Rule. You can use any of the following methods:
    - DNS Link: If the underlying applications running on the resources managed by the AutoStopping Rule are accessed by an HTTP or HTTPS URL.
    - SSH/RDP: If the underlying applications running on the resources managed by AutoStopping Rule are accessed via SSH or RDP.
    See [Setup Access Using DNS Link](https://docs.harness.io/article/r5x5pvuqfn-create-auto-stopping-rules-for-azure#setup_access_using_dns_link) and [Setup Access Using SSH/RDP](https://docs.harness.io/article/r5x5pvuqfn-create-auto-stopping-rules-for-azure#setup_access_using_ssh_rdp)
defineHealthsource_healthSourceName:
    content: "Enter a name for the Health Source. "
    width: "400"
mapGCOMetrics_metricTags: Select the desired query from the options displayed on the left side of the panel. The corresponding metric tag auto-populates in this field.
mapGCOMetrics_metricName: Enter a name for the metric.
mapGCOMetrics_riskCategory: Select a risk type. [Learn More](https://docs.harness.io/article/owqpo59gp5-verify-deployments-with-google-cloud-operations#step_5_add_health_sources)
mapGCOMetrics_higherBaselineDeviation: Choose this option if a higher value of the selected risk type is a risk.
mapGCOMetrics_lowerBaselineDeviation: Choose this option if a lower value of the selected risk type is a risk.
mapGCOLogs_metricName: Enter a name for the query.
mapGCOLogs_serviceInstance: Click the plus icon to select the path of the service instance.
mapGCOLogs_messageIdentifier: Click the plus icon to select the message identifier.
appDHealthSourceform_appdApplication: Select an AppDynamics application.
appDHealthSourceform_metricData.Errors: Select this option if you want error metrics to be monitored.
appDHealthSourceform_metricData.Performance: Select this option if you want performance metrics to be monitored.
appDHealthSourceform_appDTier: Select an AppDynamics tier.
mapPrometheus_metricName: Enter a name for the metric.
mapPrometheus_groupName: Enter a name for the Prometheus group.
mapPrometheus_prometheusMetric: Select a Prometheus metric.
mapPrometheus_envFilter: Select a filter for the environment.
mapPrometheus_serviceFilter: Select one or more filters for the service.
mapPrometheus_additionalFilter: Select this option to add additional filters for the service.
mapPrometheus_aggregator: Select an aggregator for the metric.
mapPrometheus_riskCategory: Select a risk type.
mapPrometheus_higherBaselineDeviation: Select this option if higher value of the selected risk type is a risk.
mapPrometheus_lowerBaselineDeviation: Select this option if lower value of the selected risk type is a risk.
newRelicHealthSourceform_newRelicApplication: Select a New Relic application.
newRelicHealthSourceform_metricData.Performance: Select this option to monitor performance metrics.
whatToDeploy:
    content: A Stage can deploy microservices and other workloads. Select the type of deployment this Stage performs. [Learn More](https://docs.harness.io/article/2chyf1acil)
    width: "400"
gcpInfraConnector: Google Cloud Platform (GCP) is integrated with Harness using a Harness GCP Connector. Create or select a GCP Connector to connect to the target Google Kubernetes Engine (GKE) cluster. [Learn More](https://docs.harness.io/article/cii3t8ra3v)
gcpInfraCluster: |-
    Select the target GKE cluster. The GCP Connector you selected in **Connector** determine what clusters are displayed here. [Learn More](https://docs.harness.io/article/0ud2ut4vt2)

    If you see an error like `Failed to list GCP clusters` the permissions assigned to the GCP service account used in the Connector might not be sufficient.

    The GCP service account used for any credentials requires the **Kubernetes Engine Admin (GKE Admin)** role to get the Kubernetes master username and password. Harness also requires **Storage Object Viewer** permissions. [Learn More](https://docs.harness.io/article/yykfduond6)
gcpInfraNamespace: |-
    Enter the target namespace in target cluster. 
    The namespace must already exist during deployment. Harness will not create a new namespace if you enter one here. [Learn More](https://docs.harness.io/article/0ud2ut4vt2)
gcpInfraAllowSimultaneousDeployments: By default, Harness queues deployments to the same infrastructure to avoid conflicts. If you want to allow simultaneous deployments to this infrastructure, enable this option.
cfFlagElem_name: "Enter a name for your boolean flag. When you name a feature flag, Harness automatically generates its identifier. "
cfFlagElem_permanent: If you need to make the feature flag a permanent flag, select the checkbox This is a permanent flag.
cfEnvDialog_name: Enter the name of your Environment.
userGroupRleAssignmentForm_name: Assign role bindings for the user group. [Learn more](https://docs.harness.io/article/vz5cq0nfg2-rbac-in-harness#role_assignment)
userRoleAssignementForm_users: Enter the name or email address of the user you want to invite. [Learn more](https://docs.harness.io/article/hyoe7qcaz6-add-users#step_add_new_user)
userRoleAssignementForm_userGroups: Select user group(s) to add this user as a member. [Learn more](https://docs.harness.io/article/dfwuvmy33m-add-user-groups)
ServiceAccountRoleAssignementForm_name: Assign role bindings for this Service Account. [Learn more](https://docs.harness.io/article/vz5cq0nfg2-rbac-in-harness#role_assignment)
resourceGroupModalForm_color: Select a color for the resource group.
roleForm_name: Enter a name for the role. [Learn more] (https://docs.harness.io/article/tsons9mu0v-add-manage-roles#step_add_a_new_role)
ciRunStep_spec.connectorRef:
    content: The Harness Connector for the container registry hosting the container image Harness will use run build commands on, such as DockerHub. [Learn More](https://docs.harness.io/article/1i1ttvftm4)
    width: "400"
imagePullPolicy: |-
    Set the image's pull policy by selecting an option.
    1. **Always** : the kubelet queries the container image registry to resolve the name to an image digest every time the kubelet launches a container. If the kubelet encounters an exact digest cached locally, it uses its cached image; otherwise, the kubelet downloads (pulls) the image with the resolved digest, and uses that image to launch the container.
    2. **If Not Present** : the image is pulled only if it is not already present locally.
    3. **Never** : the image is assumed to exist locally. No attempt is made to pull the image.
shell: |-
    Select your preferred shell script.
    - **Bash**
    - **Shell**
runAsUser:
    content: Run with this user Id for all containers in the pod.  A typical example of a Run as User value would be 1000. To override this default, set Run as User in individual Steps.
    width: "400"
ccmOverviewTitle: |-
    Harness Cloud Cost Management (CCM) is an intelligent cloud cost management solution for FinOps, Infrastructure, and Engineering teams. Harness CCM provides:

    - Complete cost transparency across engineering and finance with robust business intelligence (BI)
    - Ability to reduce wasted cloud costs by up to 75% with Intelligent Cloud AutoStopping
    - ML-based recommendations
     
    [Learn more](https://docs.harness.io/article/n8e7rddf8w)
overviewSummaryTotalCost: For Kubernetes clusters, the total cost is the sum of all the node costs. For ECS clusters, the sum of all container instances.
overviewSummaryForecastedCost: |
    Forecasted costs are predictions based on your historical cost data. The forecasted date is applicable only where historical data exists. If there is insufficient data to compute the forecast, the value is not displayed. The forecasted cost is predicted for the same future time period as your selected date range.


    [Learn more](https://docs.harness.io/article/hs7cyi1nix-harness-key-cloud-cost-concepts#forecasted_cost)
overviewCostEfficiencyScore: |-
    A measure of how cost-optimized your resource usage is across your clusters. It is derived from the total and idle (and or unallocated) spend of your resources.  

    [Learn more](https://docs.harness.io/article/hs7cyi1nix-harness-key-cloud-cost-concepts#cost_efficiency_score)
ccmPerspectives: Perspectives allow you to group your resources in ways that are more meaningful to your business needs. It provides a unified view of your cloud cost data across the cloud environment. For example, you can group and filter by Account, Environment, Service, Region, Product, Label, Namespace, Workload, etc. and create a perspective for your business, finance, and engineering teams. [Learn more](https://docs.harness.io/article/dvspc6ub0v)
perspectiveBuilder:
    content: |-
        Perspectives help you add business context to CCM data. [Learn more](https://docs.harness.io/article/dvspc6ub0v)

        For example, add rules to group data by Account, Project, etc and then add Budgets, Reports, and Alerts.
    width: "400"
ccmRecommendations: |-
    One of the most impactful ways to reduce spend on Kubernetes infrastructure is to make sure your clusters are optimally sized for the workloads and node pools they run. Harness CCM recommends optimal compute resources for your workloads and node pools. It can help you reduce costs and improve performance, by analyzing your historical utilization metrics.



    [Workload Recommendations](https://docs.harness.io/article/o75arkcg8i)
    [Node Pool Recommendations](https://docs.harness.io/article/x75xp0xime)
gitOps: |
    Argo CD GitOps, as a tool, keeps all configurations in sync and applies the desired state directly (and only from Git). 
    Harness provides GitOps by integrating Argo CD into the Harness Manager. Once integrated, you can perform your Harness deployments and create and manage your Argo CD Application from within the same interface.

    [Learn more](https://docs.harness.io/article/ptlvh7c6z2)
GitOpsProviderStepFormundefined_name: |
    Enter the name for your Adapter.
    This is a mandatory field. The name you enter must be unique and should not contain any special characters.
    Harness integrates with Argo CD by using a Harness Argo CD Adapter installed in the Argo CD cluster. The Harness Argo CD Adapter acts as a proxy server and enables Cross-Origin Resource Sharing (CORS). This allows Argo CD Server to be loaded in the Harness Manager. Because of the Harness Argo CD Adapter, no configuration changes are required in your Argo CD clusters.
GitOpsProviderStepFormNameIdDescriptionTags_description: |-
    Give a description for your Adapter.
    Description field contains a summary of the Adapter.

    Information in the description field is automatically and instantly saved so that you can work on the same item at the same time and see the changes you make in real time. 
GitOpsProviderStepFormNameIdDescriptionTags_tags:
    content: |
        Enter a tag for your Adapter.
        This is an optional field. 
        A Tag field allows you to label the content with keywords (tags)
    width: "400"
GitOpsProviderStepFormundefined_spec.adapterUrl: |-
    Enter the Harness Argo CD Adapter URL. Do not enter any trailing slash in the URL.
    This URL allows customers to interact with the ArgoCD server directly from Harness UI with minimal configuration.

    [Learn more to Create Argo CD Adapter](https://docs.harness.io/article/ptlvh7c6z2)
ciBuildInfra_initTimeout: Enter the Timeout for the initialization phase. During this phase, Harness downloads the build step images and spins up the containers to execute the build steps.
ciBuildInfra_annotations: Kubernetes Annotation to the pod YAML that will be used to create the pod in which the stage's steps will be executed. [Learn More](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
ciBuildInfra_labels: Key/Value pair that will be added to the Kubernetes pod YAML, which is used to create the pod in which the stage's steps will be executed. [Learn More](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
GCSUpload_stepName_StepConfig:
    content: |-
        Use this step to upload non-container artifacts to Google Cloud Storage (GCS). [Learn More](https://docs.harness.io/article/3qeqd8pls7)

        See [Uploads and downloads](https://cloud.google.com/storage/docs/uploads-downloads) from GCS.
    width: "400"
ciGcsStep_name: Enter a name for the Step.
manualInputQuery_metricName: Enter a name for the metrics. [Learn More](https://docs.harness.io/article/owqpo59gp5-verify-deployments-with-google-cloud-operations#step_5_add_health_sources)
mapSplunk_metricName: Enter a name for the query.
mapSplunk_savedSearchQuery: Select a query from the list which is an optional step.
mapSplunk_serviceInstance: Once the records are fetched, click the plus icon in Identify Service Instance to select the path for service instance.
mapPrometheus_serviceInstance:
    content: Click Service Instance Identifier to retrieve host specific metrics.
    width: "400"
wizardForm_webhook_name:
    content: Enter a name for the Trigger. [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
webhookTrigger_description:
    content: Enter a description for the Trigger. [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
webhookTrigger_tags:
    content: |-
        Add tags for the Trigger. 

        [Learn More about Triggers](https://docs.harness.io/article/hndnde8usz)

        [Learn More about Tags](https://docs.harness.io/article/i8t053o0sq)
    width: "400"
wizardForm_webhook_sourceRepo:
    content: Select the Git provider used for your resources. The Git provider you select determines what Git events you can select. [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
wizardForm_webhook_event:
    content: |-
        Select the Git event type for the Webhook.

        If the event type you select results in the **Actions** settings appearing, select the actions for the Webhook or select **Any Actions**.
         [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
wizardForm_webhook_anyAction:
    content: |
        Select **Any Actions** to have any of the actions in the event type's payload object initiate the Trigger. For example, `opened`, `edited`, `deleted`.

        [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
wizardForm_webhook_autoAbortPreviousExecutions:
    content: |-
        Use this option if you want to override active Pipeline executions whenever the branch is updated.

        If you select this option, when the branch you specified in the **Connector** is updated, then any active Pipeline executions using both that branch and this Trigger are cancelled.

        The updated branch will initiate a new Trigger execution. [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
wizardForm_webhook_sourceBranchOperator:
    content: |-
        Select the operator for matching the value in **Matches Value**.

        If you want to use OR, NOT or other operators across the payload, simply use **JEXL Condition** and leave the rest empty.

        [Learn More](https://docs.harness.io/article/rset0jry8q)

        **Note:** Conditions are ANDed together (boolean AND operation). All Conditions must match an event payload for it to execute the Trigger.
    width: "400"
wizardForm_webhook_sourceBranchValue:
    content: |-
        Enter a value for the Source Branch condition. This is the source branch of the Git merge.

        For example: Source Branch starts with `new-`

        You can enter multiple values separated by commas and use wildcards.

        [Learn More](https://docs.harness.io/article/rset0jry8q)
    width: "400"
wizardForm_webhook_targetBranchOperator:
    content: |-
        Select the operator for matching the value in **Matches Value**.

        If you want to use OR, NOT or other operators across the payload, simply use **JEXL Condition** and leave the rest empty.

        [Learn More](https://docs.harness.io/article/rset0jry8q)

        **Note:** Conditions are ANDed together (boolean AND operation). All Conditions must match an event payload for it to execute the Trigger.
    width: "400"
wizardForm_webhook_targetBranchValue:
    content: |-
        Enter a value for the Target Branch condition. This is the target branch of the Git merge.

        For example: Target Branch starts with `new-`

        You can enter multiple values separated by commas and use wildcards.

        [Learn More](https://docs.harness.io/article/rset0jry8q)
    width: "400"
wizardForm_webhook_changedFilesOperator:
    content: |-
        Select the operator for matching the value in **Matches Value**.

        If you want to use OR, NOT or other operators across the payload, simply use **JEXL Condition** and leave the rest empty.

        [Learn More](https://docs.harness.io/article/rset0jry8q)

        **Note:** Conditions are ANDed together (boolean AND operation). All Conditions must match an event payload for it to execute the Trigger.
    width: "400"
wizardForm_webhook_changedFilesValue:
    content: |-
        Enter a value for the Changed Files condition. These are the changed files in the Git merge.

        You can enter multiple values separated by commas and use wildcards.

        [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
wizardForm_webhook_jexlCondition:
    content: |-
        You can refer to payload data and headers using [JEXL expressions](https://commons.apache.org/proper/commons-jexl/reference/syntax.html). That includes all constants, methods, and operators in [JexlOperator](https://commons.apache.org/proper/commons-jexl/apidocs/org/apache/commons/jexl3/JexlOperator.html).

        For example:

        - `<+trigger.payload.pull_request.diff_url>.contains("triggerNgDemo")`
        - `<+trigger.payload.pull_request.diff_url>.contains("triggerNgDemo") ||<+trigger.payload.repository.owner.name> == "wings-software"`

        [Learn More](https://docs.harness.io/article/rset0jry8q)
    width: "650"
wizardForm_webhook_headerConditions.0.key:
    content: |-
        Enter the header attribute for comparison.

        The header expression format is `<+trigger.header['key-name']>`. 

        For example `<+trigger.header['X-GitHub-Event']>`.

        <img src="https://files.helpdocs.io/i5nl071jo5/articles/hndnde8usz/1624919275031/clean-shot-2021-06-28-at-15-27-08.png" width="95%" height="95%">

        [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "650"
wizardForm_webhook_headerConditions.0.operator:
    content: |-
        Select the operator for matching the value in **Matches Value**. 

        If you want to use OR, NOT or other operators across the payload, simply use **JEXL Condition** and leave the rest empty. [Learn More](https://docs.harness.io/article/rset0jry8q) 

        **Note:** Conditions are ANDed together (boolean AND operation). All Conditions must match an event payload for it to execute the Trigger.
    width: "400"
wizardForm_webhook_headerConditions.0.value:
    content: |-
        Enter a value for the header condition comparison.

        When Harness evaluates the header key you enter, the comparison is case insensitive.

        You can enter multiple values separated by commas and use wildcards. [Learn More](https://docs.harness.io/article/rset0jry8q)
    width: "400"
wizardForm_webhook_payloadConditions.0.key:
    content: |-
        Payload conditions are based on the values of the JSON payload. [Learn More](https://docs.harness.io/article/rset0jry8q)

        Enter the payload attribute for comparison.

        Harness treats the JSON payload as a data model and parses the payload and listens for events on a JSON payload key.

        To reference payload values, you use `<+eventPayload.` followed by the path to the key name. For example, `<+eventPayload.repository.name>`.

        <img src="https://files.helpdocs.io/i5nl071jo5/articles/hndnde8usz/1624919275031/clean-shot-2021-06-28-at-15-27-08.png" width="95%" height="95%">
    width: "650"
wizardForm_webhook_payloadConditions.0.operator:
    content: |-
        Select the operator for matching the value in **Matches Value**. 

        If you want to use OR, NOT or other operators across the payload, simply use **JEXL Condition** and leave the rest empty. [Learn More](https://docs.harness.io/article/rset0jry8q) 

        **Note:** Conditions are ANDed together (boolean AND operation). All Conditions must match an event payload for it to execute the Trigger.
    width: "400"
wizardForm_webhook_payloadConditions.0.value:
    content: |-
        Enter a value for the payload condition comparison. [Learn More](https://docs.harness.io/article/rset0jry8q)

        For example:

        <img src="https://files.helpdocs.io/i5nl071jo5/articles/rset0jry8q/1613777562060/image.png" width="95%" height="95%">
    width: "650"
k8sDirectInfraConnector:
    content: |-
        Select or create the Connector that connects Harness to your target cluster. [Learn More](https://docs.harness.io/article/0ud2ut4vt2)

        Here's a [video](https://youtu.be/wUC23lmqfnY) that walks through setting up a Kubernetes Cluster Connector.
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.spec.namespace":
    content: |-
        Enter the target namespace in the target cluster. 

        The namespace must already exist during deployment. Harness will not create a new namespace using the one you entered here. [Learn More](https://docs.harness.io/article/0ud2ut4vt2)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.provisioner.steps[0].step.spec.provisionerIdentifier":
    content: |-
        Enter a unique value in Provisioner Identifier.

        The Provisioner Identifier identifies the provisioning done in this step. You use the Provisioner Identifier in additional steps to refer to the provisioning done in this step. [Learn More](https://docs.harness.io/article/uznls2lvod)

        The most common use of Provisioner Identifier is between the Terraform Plan and Terraform Apply steps. To have the Terraform Apply step apply the provisioning from this Terraform Plan step, you use the same Provisioner Identifier in both steps.
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.provisioner.steps[0].step.spec.configuration.secretManagerRef":
    content: |-
        A Terraform plan is a sensitive file that could be misused to alter resources if someone has access to it. Harness avoids this issue by never passing the Terraform plan file as plain text.

        Select a [Secrets Manager](https://docs.harness.io/article/hngrlb7rd6) to use for encrypting/decrypting and saving the Terraform plan file.
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.provisioner.steps[0].step.spec.configuration.configFiles.store.spec.connectorRef":
    content: |-
        Select the Connector for your Terraform plan repo. [Learn More](https://docs.harness.io/article/uznls2lvod)

        When you run the Pipeline, Harness will fetch the script from the repo.
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.provisioner.steps[0].step.spec.configuration.configFiles.store.spec.branch":
    content: Select the branch for your Terraform plan. [Learn More](https://docs.harness.io/article/uznls2lvod)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.provisioner.steps[0].step.spec.configuration.configFiles.store.spec.folderPath":
    content: Enter the path from the root of the repo to the folder containing the script. [Learn More](https://docs.harness.io/article/uznls2lvod)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.provisioner.steps[1].step.spec.approvalMessage":
    content: Add the message for the Users in Approvers. [Learn More](https://docs.harness.io/article/fkvso46bok)
    width: "400"
harnessApprovalRuntime_userGroups:
    content: Select the Harness User Groups that will approve the step. [Learn More](https://docs.harness.io/article/fkvso46bok)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.provisioner.steps[1].step.spec.approvers.minimumCount":
    content: Enter how many of the Users in the User Groups must approve the step. [Learn More](https://docs.harness.io/article/fkvso46bok)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.provisioner.steps[2].step.spec.provisionerIdentifier":
    content: When provisioning target infrastructure, enter the same Provisioner Identifier you entered in the Terraform Plan step. [Learn More](https://docs.harness.io/article/uznls2lvod)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.infrastructure.infrastructureDefinition.provisioner.steps[3].step.spec.provisionerIdentifier":
    content: |-
        The Provisioner Identifier uniquely identifies the provisioning done by specific Terraform steps.

        When provisioning target infrastructure, enter the same Provisioner Identifier used but the Terraform Apply step.

        The Terraform Delete step will delete the infrastructure provisioned by the Terraform Apply step. [Learn More](https://docs.harness.io/article/uznls2lvod)
    width: "400"
wizardForm_webhook_spec.provisionerIdentifier:
    content: |-
        Enter the same Provisioner Identifier you used in the Terraform Plan and/or Apply steps that provisioned the infrastructure you want to roll back. Harness will roll back the exact infrastructure provisioned in those steps.
        [Learn More](https://docs.harness.io/article/jgi6d73noy)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.execution.steps[0].parallel[0].step.spec.url":
    content: Enter the URL for the HTTP call.  [Learn More](https://docs.harness.io/article/64hhfpbgbj)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.execution.steps[0].parallel[0].step.spec.requestBody":
    content: Enter the message body (if any) of the HTTP message. [Learn More](https://docs.harness.io/article/64hhfpbgbj)
    width: "400"
wizardForm_webhook_spec.workload:
    content: |-
        Enter the name of the resource to scale in the format `[namespace/]Kind/Name`, with `namespace` optional. For example: 

        ```
        default/Deployment/harness-example
        ```

        You can scale a Deployment, DaemonSet, or StatefulSet.

        You can only enter one resource in **Workload**. To scale another resource, add another **K8s Scale** step. 

        [Learn More](https://docs.harness.io/article/jxe5z9domw)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.execution.steps[2].parallel[0].step.spec.provisionerIdentifier":
    content: Enter the same **Provisioner Identifier** you used in the **Terraform Plan** or **Terraform Apply** step that planned/provisioned the resources you want to destroy. [Learn More](https://docs.harness.io/article/j75xc704c8)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.execution.steps[2].parallel[2].step.spec.provisionerIdentifier":
    content: |-
        The **Provisioner Identifier** identifies the provisioning applied in this step. 

        - If you selected **Inherit from Plan** in **Configuration Type**, enter the Id used by the **Terraform Plan** step for the plan you want to apply.

        - If you selected **Inline** in **Configuration Type**, create a new Id.

        [Learn More](https://docs.harness.io/article/hdclyshiho)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.execution.steps[2].parallel[2].step.spec.configuration.spec.configFiles.store.spec.connectorRef":
    content: Select or create a Connector for your Git repo. [Learn More](https://docs.harness.io/article/hdclyshiho)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.execution.steps[2].parallel[2].step.spec.configuration.spec.configFiles.store.spec.branch":
    content: Enter the name of the branch to use.
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.execution.steps[2].parallel[2].step.spec.configuration.spec.configFiles.store.spec.folderPath":
    content: Enter the path from the root of the repo to the folder containing the script. [Learn More](https://docs.harness.io/article/hdclyshiho)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.execution.steps[2].parallel[3].step.spec.provisionerIdentifier":
    content: |-
        Enter a unique string to identify the provisioning configured in this step. 

        You will use this **Provisioner Identifier** in additional steps to refer to the provisioning set up in this step.

        The most common use of **Provisioner Identifier** is between the **Terraform Plan** and **Terraform Apply** steps. [Learn More](https://docs.harness.io/article/52n3j0ci72)
    width: "400"
"wizardForm_webhook_pipeline.stages[0].stage.spec.execution.steps[2].parallel[3].step.spec.configuration.secretManagerRef":
    content: |-
        A Terraform plan is a sensitive file that could be misused to alter resources if someone has access to it. Harness avoids this issue by never passing the Terraform plan file as plain text.

        Select a [Secrets Manager](https://docs.harness.io/article/hngrlb7rd6) to use for encrypting/decrypting and saving the Terraform plan file. [Learn More](https://docs.harness.io/article/52n3j0ci72)
    width: "400"
pipelineStep.infrastructureDefinition:
    content: |-
        Infrastructure Definitions represent the physical infrastructure of the Environment. They are the actual clusters, hosts, etc. 

        For example, the target Infrastructure Definition for a Kubernetes deployment. [Learn More](https://docs.harness.io/article/0ud2ut4vt2)
    width: "400"
pipelineStep.infrastructureDefinitionMethod:
    content: |-
        There are different ways to connect to your target infrastructure: 

        #### Direct Connection 
        A vendor-agnostic connection to the cluster that uses a Harness [Kubernetes Cluster Connector](https://docs.harness.io/article/1gaud2efd4). The Connector uses the cluster master URL and an auth method such as a Kubernetes service account or it inherits credentials from a Harness Delegate running in your infrastructure.

        #### Cloud Provider
        A connection to the cloud platform where your cluster is hosted, such as GKE on GCP. It uses a platform [Cloud Connector](https://docs.harness.io/category/1ehb4tcksy) to connect to the cluster. The Connector uses platform-specific auth such as a GCP service account (with Kubernetes Engine Admin and Storage Object Viewer roles) or it inherits credentials from a Harness Delegate running in your infrastructure.
    width: "500"
    apiKeyForm_name: Enter a name for the API Key. [Learn more](https://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys)
apiKeyForm_identifier: |-
    You can edit the automatically generated Id. [Learn more](https://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys)

    The API Key name can be edited later, but Ids cannot be edited once an API Key has been saved.
tokenForm_identifier: |-
    You can edit the automatically generated Id. [Learn more](https://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys#generate_personal_access_token)

    The Token name can be edited later, but Ids cannot be edited once a Token has been generated.
tokenForm_name: Enter a name for the Token. [Learn more](https://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys#generate_personal_access_token)
rightBarForm_connectorRef:
    content: Use the dropdown to select an existing Harness Git connector or to create a new connector. [Learn More](https://docs.harness.io/article/v9sigwjlgo)
    width: "400"
rightBarForm_repoName:
    content: |+
        If you select **Git Repository** as the URL Type, the repo name will be displayed automatically.



        If you select **Git Account** as the URL Type, you will be prompted to provide a **repo name** when you use this connector in a Harness Pipeline. [Learn More](https://docs.harness.io/article/v9sigwjlgo)

    width: "400"
rightBarForm_depth:
    content: |
        The number of commits to fetch when Harness clones a repo.

        - For manual Builds, when a user clicks **Build** in the Harness UI, the default Depth is 50 (each `git clone` operation fetches the most recent 50 commits). A setting of 0 fetches all commits in the branch.
        - For triggered Builds, the default Depth is 0 (fetch all commits to the branch).

        For details, see [https://git-scm.com/docs/git-clone](https://git-scm.com/docs/git-clone).
    width: "400"
rightBarForm_sslVerify:
    content: |-
        If True (the default), the Pipeline verifies your Git SSL certificates. The build fails if the certificate check fails. You should set this to False only if you have a known issue with the certificate and are willing to run your builds anyway.
        You can use self-signed certificates in your build infrastructure. [Learn more](https://docs.harness.io/article/e5qkn9atiw)
    width: "400"
manifestStore_connectorRef:
    content: |-
        Select or add a Connector to connect Harness to the repo or registry for your manifests or charts. See:

        - [Connect to a Git Repo](https://docs.harness.io/article/zbhehjzsnv) for Kubernetes manifests, etc.
        - [Connect to an Artifact Repo](https://docs.harness.io/article/xxvnk67c5x) for Helm charts from an HTTP Helm server.
        - [Connect to a Cloud Provider](https://docs.harness.io/article/s9j6cggx1p-connect) for AWS S3 or Google Cloud Storage.
    width: "400"
helmWithHttp_identifier:
    content: Enter a name that identifies this Helm chart. It doesn't have to be the chart name. It can be the name of the service you are deploying or another name. [Learn More](https://docs.harness.io/article/7owpxsaqar)
    width: "400"
helmWithHttp_chartName:
    content: |-
        Enter the name of the Helm chart for Harness to pull. Don't include the chart version. You will add that in the **Chart Version** setting. [Learn More](https://docs.harness.io/article/7owpxsaqar)

        If you want to provide the chart name later, you have the following options: 

        - Configure this setting as a [Runtime Input](https://docs.harness.io/article/f6yobn7iq0) and provide the name at runtime.
        - Configure this setting as a Runtime Input and use [Input Sets](https://docs.harness.io/article/3fqwa8et3d) to provide the chart name.
        - Configure this setting as an [Expression](https://docs.harness.io/article/f6yobn7iq0) and enter a Stage, Service, or custom [variable expression](https://docs.harness.io/article/lml71vhsim). The value for the expression will be added at runtime.
    width: "400"
helmWithHttp_chartVersion:
    content: |-
        Enter the version of the chart you want to deploy. This is found in the Chart.yaml `version` label in your chart. 

        You can list all available versions of a chart using the `search repo` command with the `--versions` option. See [helm search repo](https://helm.sh/docs/helm/helm_search_repo) from Helm.

        If you leave **Chart Version** empty Harness gets the latest chart. [Learn More](https://docs.harness.io/article/7owpxsaqar)

        If you are going to use a Harness Trigger to run this Pipeline when a new version is added to your chart repo, select the [Runtime Input](https://docs.harness.io/article/f6yobn7iq0) option. When you set up the Trigger, you will select this chart and Harness will listen on the repo for new versions. [Learn More](https://docs.harness.io/article/54eqk0d1bd)
    width: "400"
helmWithHttp_helmVersion:
    content: Select the version of Helm used in your chart. See [Helm Version Support Policy](https://helm.sh/docs/topics/version_skew/) from Helm.
    width: "450"
helmWithHttp_skipResourceVersioning:
    content: |-
        By default, Harness versions ConfigMaps and Secrets deployed into Kubernetes clusters. 

        In some cases, such as when using public manifests or Helm charts, you cannot add the annotation.

        When you enable **Skip Resource Versioning**, Harness will not perform versioning of ConfigMaps and Secrets for the resource.

        If you have enabled **Skip Resource Versioning** for a few deployments and then disable it, Harness will start versioning ConfigMaps and Secrets.
    width: "400"
helmWithHttp_commandFlags:
    content: |
        You can use Helm command flags to extend the Helm commands that Harness runs when deploying your Helm chart.

        Harness will run Helm-specific Helm commands and their flags as part of preprocessing. All the commands you select are run before `helm install/upgrade`.
    width: "400"
"helmWithHttp_commandFlags[0].commandType":
    content: |-
        Select the Helm command type you want to use. For example:

        - [Template](https://v2.helm.sh/docs/helm/#helm-template): `helm template` to render the helm template files.
        - [Fetch](https://v2.helm.sh/docs/helm/#helm-fetch): `helm fetch` (v1) or [`helm pull`](https://helm.sh/docs/helm/helm_pull/) (v2) to get the Helm chart.
    width: "400"
"helmWithHttp_commandFlags[0].flag":
    content: Add any options for the command.
    width: "400"
artifactManifestLabel:
    content: |-
        Select the manifest that Harness will listen on for this Trigger. This is a manifest in the **Service Definition** section of one of this Pipeline's stages. [Learn More](https://docs.harness.io/article/54eqk0d1bd)

        Depending on how the **Service Definition** is set up, the manifest might be a Helm Chart package or other package.

        **Note:** for manifests stored in a Git repo, like Kubernetes manifests, use a [Git-based Trigger](https://docs.harness.io/article/hndnde8usz) instead.
    width: "500"
wizardForm_artifacts_identifier:
    content: |-
        Harness entities and resources use a unique Id (entity identifier) that's immutable once the entity is created. Identifiers provide a permanent way to refer to an entity and avoid issues that can arise when a name is changed.

        This unique Id is generated automatically using the name you entered in **Name**, but you can edit it as needed. [Learn More](https://docs.harness.io/article/li0my8tcz3)
    width: "400"
wizardForm_artifacts_name:
    content: Enter a name for this Trigger. The name will identify the Trigger on the Deployments page and this Pipeline's Execution History page so you can see which Trigger executed the Pipeline.
    width: "400"
artifactTrigger_description:
    content: "Enter a description for this Trigger that tells other Project members when this Trigger is used. "
    width: "400"
artifactTrigger_tags:
    content: You can add Tags to Harness entities and then use the Tags to search for all matching entities. For example, you can add a Tag to a Trigger and then filter the list of Triggers by Tag. [Learn More](https://docs.harness.io/article/i8t053o0sq)
    width: "400"
listenOnNewArtifactManifest:
    content: |
        ### On New Manifest Triggers

        Harness will listen on the manifest (Helm Chart) that you select. When a new version of the manifest is added to its repo, the Trigger will execute this Pipeline. 

        For example, see [Helm Chart Triggers](https://docs.harness.io/article/54eqk0d1bd).

        **Note:** if this setting is not enabled, it is because the version setting in the **Service Definition** is not a [Runtime Input](https://docs.harness.io/article/f6yobn7iq0) (`<+input>`). For example, for a Helm Chart package in **Service Definition**, the **Chart Version** setting must be `<+input>`.
         
         
        ![Chart Version](https://files.helpdocs.io/i5nl071jo5/articles/7oml3zx0fw/1648509593378/clean-shot-2022-03-28-at-16-19-11.png)

        ---

        ### On New Artifact Triggers

        On New Artifact Triggers simply listen to the registry where one or more of the artifacts in your Pipeline are hosted. [Learn More](https://docs.harness.io/article/c1eskrgngf)

        **Note:** If this setting is not enabled, it is because the artifact **Tag** setting is not a Runtime Input (`<+input>`).
    width: "500"
"wizardForm_artifacts_stages[0].stage.spec.serviceConfig.serviceDefinition.spec.manifests[0].manifest.spec.store.spec.connectorRef":
    content: This setting appears because it is configured as a Runtime Input in the manifest you selected.
    width: "400"
"wizardForm_artifacts_stages[0].stage.spec.serviceConfig.serviceDefinition.spec.manifests[0].manifest.spec.chartVersion":
    content: |-
        The **Chart Version** setting appears because it is configured as a Runtime Input in the manifest you selected.

        The expression `<+trigger.manifest.version>` tells Harness to obtain the chart version that initiated this Trigger and use it during deployment. [Learn More](https://docs.harness.io/article/54eqk0d1bd)
    width: "400"
artifactManifestConditions:
    content: Enter a condition that must be matched in order for the Trigger to execute. [Learn More](https://docs.harness.io/article/54eqk0d1bd)
    width: "400"
version:
    content: |-
        Enter the condition that must be matched in order for the Trigger to execute. 

        You can use wildcards in the condition's value and you can select **Regex** and use regular expressions. 

        For example, if a build is todolist-v2.0: 

        - With Regex **not selected**, both `todolist*` or `*olist*` will match. 
        - With Regex selected, the regex `todolist-v\d.\d` will match. 

        The same Regex and wildcard formatting applies to manifests, artifacts, or whatever Trigger type you are creating.

        [Learn more about different Trigger types](https://docs.harness.io/category/oya6qhmmaw)
    width: "400"
pipelineInputLabel:
    content: |+
        If some of your Pipeline settings use [Runtime Inputs](https://docs.harness.io/article/f6yobn7iq0), you can provide the values for those settings here and they will be used when this Trigger executes.

        If your Pipeline uses [Input Sets](https://docs.harness.io/article/3fqwa8et3d), you can select the Input Set to use when the Trigger executes the Pipeline.

        [Learn more about different Trigger types](https://docs.harness.io/category/oya6qhmmaw-trigger-category)

    width: "400"
triggerConfigurationLabel:
    content: |-
        You can trigger Pipelines in response to Git events automatically.

        For example, when a pull request or push event occurs on a Git repo, a CI or CD Pipeline can execute. [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
wizardForm_webhook_identifier:
    content: |-
        Harness entities and resources use a unique Id (entity identifier) that's immutable once the entity is created. 

        Identifiers provide a permanent way to refer to an entity and avoid issues that can arise when a name is changed.

        This unique Id is generated automatically using the name you entered in **Name**, but you can edit it as needed. [Learn More](https://docs.harness.io/article/li0my8tcz3)
    width: "400"
listenOnNewWebhook:
    content: Define the Webhook for this Trigger. The Webhook events you select determine what Git events initiate this Trigger. [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
wizardForm_webhook_connectorRef:
    content: Select or add the Harness Connector to connect Harness with your Git Provider. [Learn More](https://docs.harness.io/article/hndnde8usz)
    width: "400"
conditionsOptional:
    content: |
        Enter conditions that must be matched in order for the Trigger to execute. [Learn More](https://docs.harness.io/article/rset0jry8q)

        **Note:** Conditions are ANDed together (boolean AND operation). All Conditions must match an event payload for it to execute the Trigger.
    width: "400"
sourceBranch:
    content: |-
        Enter a value or pattern for the Source Branch condition. This is the source branch of the Git merge.

        For example: Source Branch starts with `new-`.

        You can enter multiple values separated by commas and use wildcards. [Learn More](https://docs.harness.io/article/rset0jry8q)
    width: "400"
targetBranch:
    content: |-
        Enter a value for the Target Branch condition. This is the target branch of the Git merge.

        For example: Target Branch starts with `new-`.

        You can enter multiple values separated by commas and use wildcards. [Learn More](https://docs.harness.io/article/rset0jry8q)
    width: "400"
changedFiles:
    content: |
        Enter a value for the **Changed Files** condition. These are the changed files in the Git merge.

        You can enter multiple values separated by commas and use wildcards. [Learn More](https://docs.harness.io/article/rset0jry8q)
    width: "400"
headerConditions:
    content: |-
        Enter the header attribute for comparison. 

        The header expression format is `<+trigger.header['key-name']>`. 

        For example `<+trigger.header['X-GitHub-Event']>`.

        <img src="https://files.helpdocs.io/i5nl071jo5/articles/hndnde8usz/1624919275031/clean-shot-2021-06-28-at-15-27-08.png" width="95%" height="95%">

        **Notes:** 
        - When Harness evaluates the header key you enter, the comparison is case insensitive.
        - Conditions are ANDed together (boolean AND operation). All Conditions must match an event payload for it to execute the Trigger.
        - If you want to use OR, NOT or other operators across the payload, simply use **JEXL Condition** and leave the rest empty.

        [Learn More](https://docs.harness.io/article/rset0jry8q)
    width: "600"
payloadConditions:
    content: |-
        Payload conditions are based on the values of the JSON payload. [Learn More](https://docs.harness.io/article/rset0jry8q)

        Harness treats the JSON payload as a data model and parses the payload and listens for events on a JSON payload key.

        To reference payload values, you use `<+eventPayload.` followed by the path to the key name. For example, `<+eventPayload.repository.name>`.

        <img src="https://files.helpdocs.io/i5nl071jo5/articles/hndnde8usz/1624919275031/clean-shot-2021-06-28-at-15-27-08.png" width="95%" height="95%">

        **Notes:** 
        - Conditions are ANDed together (boolean AND operation). All Conditions must match an event payload for it to execute the Trigger.
        - If you want to use OR, NOT or other operators across the payload, simply use **JEXL Condition** and leave the rest empty.

        [Learn More](https://docs.harness.io/article/rset0jry8q)
    width: "600"
wizardForm_scheduled_name:
    content: Enter a name for this Trigger. The name will identify the Trigger on the Deployments page and this Pipeline's Execution History page so you can see which Trigger executed the Pipeline.
    width: "400"
triggerOverview_description:
    content: Enter a description for this Trigger that tells other Project members when this Trigger is used.
    width: "400"
triggerOverview_tags:
    content: You can add Tags to Harness entities and then use the Tags to search for all matching entities. For example, you can add a Tag to a Trigger and then filter the list of Triggers by Tag. [Learn More](https://docs.harness.io/article/i8t053o0sq)
    width: "400"
cronExpression:
    content: This checks if the Cron expression is valid. If it is highlighted in red, it is invalid. Revise the expression to try again. [Learn More](https://docs.harness.io/article/4z9mf24m1b)
    width: "400"
expressionBreakdown:
    content: This is the how the Cron expression is evaluated as a scedule. [Learn More](https://docs.harness.io/article/4z9mf24m1b)
    width: "400"
schedulePanel:
    content: |-
        Use the settings to schedule the Trigger. 

        You can use the schedule options to define the Cron expression or type in a Cron expression of your own and see how it evaluates. [Learn More](https://docs.harness.io/article/4z9mf24m1b)
    width: "400"
kustomizeGit_identifier:
    content: Enter a unique name for the Kustomize manifest. This doesn't have to be the same as the actual file or folder name. Enter a name that tells other Project members what Kustomization this is. [Learn More](https://docs.harness.io/article/uiqe6jz9o1)
    width: "400"
kustomizeGit_gitFetchType:
    content: Select if you want Harness to fetch the latest file from the branch or a specific Commit Id. [Learn More](https://docs.harness.io/article/uiqe6jz9o1)
    width: "400"
kustomizeGit_branch:
    content: Enter the branch name or CommitId, depending on what you selected in **Git Fetch Type**. [Learn More](https://docs.harness.io/article/uiqe6jz9o1)
    width: "400"
kustomizePathHelperText:
    content: Enter the path from the root of the repo to the Kustomize folder. [Learn More](https://docs.harness.io/article/uiqe6jz9o1)
    width: "400"
pluginPathHelperText:
    content: |-
        Enter the path from the root of the repo to a Kustomize plugin.

        Kustomize offers a plugin framework to generate and/or transform a Kubernetes resource as part of a kustomization.

        When Harness deploys, it will apply the plugin you reference just like you would with the `--enable_alpha_plugins` parameter. See [No Security from Kustomize](https://github.com/kubernetes-sigs/kustomize/tree/master/docs/plugins#no-security).
    width: "400"
helmSkipResourceVersion:
    content: |-
        By default, Harness versions ConfigMaps and Secrets deployed into Kubernetes clusters. Harness uses a ConfigMap for release versioning.

        In some cases, you might want to skip versioning.

        When you enable **Skip Resource Versioning**, Harness will not perform versioning of ConfigMaps and Secrets for the deployment.

        If you have enabled **Skip Resource Versioning** for a few deployments and then disable it, Harness will start versioning ConfigMaps and Secrets.

        [Learn More](https://docs.harness.io/article/ssbq0xh0hx)
    width: "400"
osTemplateWithGit_identifier:
    content: Enter a unique name for the OpenShift manifest. This doesn't have to be the same as the actual file or folder name. Enter a name that tells other Project members what OpenShift manifest this is.
    width: "400"
osTemplateWithGit_gitFetchType:
    content: Select if you want Harness to fetch the latest file from the branch or a specific Commit Id.
    width: "400"
osTemplateWithGit_branch:
    content: Enter the branch name or CommitId, depending on what you selected in **Git Fetch Type**.
    width: "400"
osTemplateWithGit_path:
    content: Enter the path from the root of the repo to the OpenShift manifest folder.
    width: "400"
osTemplateWithGit_skipResourceVersioning:
    content: |-
        By default, Harness versions ConfigMaps and Secrets deployed into Kubernetes clusters. Harness uses a ConfigMap for release versioning.

        In some cases, you might want to skip versioning.

        When you enable **Skip Resource Versioning**, Harness will not perform versioning of ConfigMaps and Secrets for the deployment.

        If you have enabled **Skip Resource Versioning** for a few deployments and then disable it, Harness will start versioning ConfigMaps and Secrets.
    width: "400"
osWithGit_identifier:
    content: Enter a unique name for the OpenShift param file. This doesn't have to be the same as the actual file name. Enter a name that tells other Project members what OpenShift param file this is.
    width: "400"
osWithGit_gitFetchType:
    content: Select if you want Harness to fetch the latest file from the branch or a specific Commit Id.
    width: "400"
osWithGit_branch:
    content: Enter the branch name or CommitId, depending on what you selected in **Git Fetch Type**.
    width: "400"
osWithGit_paths:
    content: Enter the path from the root of the repo to the param file.
    width: "400"
samlProviderForm_entityIdentifier:
    content: Enter your custom Entity ID. The default Entity ID is `app.harness.io`. The value you enter here will override the default Entity ID. [Learn more](https://docs.harness.io/article/mlpksc7s6c-single-sign-on-saml)
    width: "400"
kustomizePath_identifier:
    content: Enter a name for this kustomize patch so your team members will know what kustomization it performs. [Learn More](https://docs.harness.io/article/98u2hvzj0t-use-kustomize-for-kubernetes-deployments#option_kustomize_patches)
    width: "400"
kustomizePath_gitFetchType:
    content: Select the branch or Git commit Id to use when fetching the kustomize patch. [Learn More](https://docs.harness.io/article/98u2hvzj0t-use-kustomize-for-kubernetes-deployments#option_kustomize_patches)
    width: "400"
kustomizePath_branch:
    content: Enter the name of the branch where the kustomize patch is located. [Learn More](https://docs.harness.io/article/98u2hvzj0t-use-kustomize-for-kubernetes-deployments#option_kustomize_patches)
    width: "400"
kustomizePath_paths:
    content: |-
        Enter the path to the patch file(s) from the root of the repo. The files you add should be the same files listed in `patchesStrategicMerge` of the main kustomize file in your Service. [Learn More](https://docs.harness.io/article/98u2hvzj0t-use-kustomize-for-kubernetes-deployments#option_kustomize_patches)

        **Important:** You cannot use Harness [variables](https://docs.harness.io/article/lml71vhsim) in the base manifest or kustomization.yaml. You can only use Harness variables in kustomize patches you add here in Kustomize Patches **Manifest Details**.
    width: "400"
ciBuildInfra_serviceAccountName:
    content: The Service Account for Step containers to use when communicating with the Kubernetes API server. Leave blank to use the default service account for the namespace. [Learn More](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)
    width: "400"
ciRunStep_timeout:
    content: The default **Timeout** limit for the step is **10 minutes**. The Step fails when the Timeout is reached, and the Pipeline execution continues.
    width: "400"
limitMemory:
    content: Maximum memory that the container can use. You can specify an integer or fixed-point value with the suffix G, M, Gi, or Mi. Do not include spaces when entering a fixed value. Default is **500Mi**.
    width: "400"
limitCPULabel:
    content: Maximum number of cores that the container can use. CPU resource limits are measured in CPU units. You can specify a fraction as well. 0.1 is equivalent to 100m, or 100 millicpu. Do not include spaces when entering a fixed value. Default is **400m**.
    width: "400"
ciRunTests_timeout:
    content: The default **Timeout** for the CI step is **10 minutes**. The Step fails when the Timeout is reached, and the Pipeline execution continues.
    width: "400"
addEditStageCustomVariableForm_name:
    content: |-
        Enter a name for the stage variable.

        You reference stage variables **within their stage** using the expression `<+stage.variables.[variable name]>`. You reference stage variables **outside their stage** using the expression `<+pipeline.stages.[stage name].variables.[variable name]>`.

        [Learn More](https://docs.harness.io/article/2chyf1acil-add-a-stage)
    width: "400"
addEditStageCustomVariableForm_type:
    content: |-
        Select the variable type.

        If you select **Secret**, you can select the secret to use once you click **Save**.
    width: "400"
addEditServiceCustomVariableForm_name:
    content: |-
        Enter the name of the variable.

        To reference this variable in configuration files (like a values.yaml file) or Execution steps, use the expressions `<+serviceVariables.[var_name]>`.

        The variables can also be referenced in sequence, starting with `0`: `<+serviceVariables[0].name>`, `<+serviceVariables[1].name>`, etc.

        You can also reference the Service variable using the FQN `<+stage.spec.serviceConfig.serviceDefinition.spec.variables.[var_name]>`.

        [Learn More](https://docs.harness.io/article/lml71vhsim-harness-variables)
    width: "350"
addEditServiceCustomVariableForm_type:
    content: |-
        Select the variable type.

        If you select **Secret**, you can select the secret to use once you click **Save**.
    width: "400"
workloadRecommendationTimeWeighted:
    content: |-
        Time-weighted considers the active duration of pods when calculating the CPU and memory utilization. Let's try to understand how time-weighted values are calculated using the following examples:

        - [Example 1](https://docs.harness.io/article/o75arkcg8i-workload-recommendations#example_1)
        - [Example 2](https://docs.harness.io/article/o75arkcg8i-workload-recommendations#example_2)
    width: "400"
workloadRecommendationAbsolute:
    content: |-
        Absolute simply aggregates the CPU and memory utilization values. Let's try to understand how absolute values are calculated using the following examples:

        - [Example 1](https://docs.harness.io/article/o75arkcg8i-workload-recommendations#example_1)
        - [Example 2](https://docs.harness.io/article/o75arkcg8i-workload-recommendations#example_2)
    width: "400"
selectPerspective_perspective:
    content: Select the Perspective for which you want to set a budget. Budgets are created on Perspectives. If you do not have a Perspective of the resources you would like to budget, first create a new Perspective and then proceed to set a budget. [Learn More](https://docs.harness.io/article/08r3t4z0jo-create-a-budget#create_a_new_budget)
    width: "400"
selectPerspective_budgetName:
    content: Enter a name for your budget that will appear in the budget dashboard to identify this budget.
    width: "400"
budgetPeriod:
    content: Select the period for which you want to set the budget.
    width: "400"
selectPerspective_type:
    content: |-
        Select a budget type:

        - **Specified Amount**: Enter the amount that you want to set as the budget limit.
        - **Previous Month Spend**: Sets the previous month spent as your budget.
    width: "400"
growthRateCheckbox:
    content: |
        To add growth rate to your budgeted amount, select the checkbox Add growth rate to budget amount. Growth rate refers to the percentage change of the budgeted amount within the specified time period. When you've decided to add growth rate to the budget amount, specify the growth rate percentage. 


        In Specify Growth rate, enter the percentage of the growth rate to the budget amount. You can view the increased amount of your budget in the graph. The graph displays the amount and budget period.
    width: "400"
createBudgetSetBudget:
    content: |
        In Set Budget Amount you can specify the budget period, amount, type, etc. The Set Budget Amount window also displays the Total cost last period and Projected cost end of this period.

        - [Set Budget Amount](https://docs.harness.io/article/08r3t4z0jo-create-a-budget#set_budget_amount)

        - [Projected Cost](https://docs.harness.io/article/08r3t4z0jo-create-a-budget#projected_cost)
    width: "400"
helmWithGit_identifier:
    content: Enter a name that identifies this Helm chart. It doesn't have to be the chart name. It can be the name of the service you are deploying or another name. [Learn More](https://docs.harness.io/article/7owpxsaqar)
    width: "400"
helmWithGit_repoName:
    content: |-
        If you selected an account in the Git Connector, then you need to specify the repo here. 

        Put the full repo path, such as `https://github.com/myorg/reponame.git` if you selected `HTTP` in the Connector or `git@github.com:myorg/reponame.git` if you selected `SSH` in the Connector. [Learn More](https://docs.harness.io/article/tbm2hw6pr6-git-connector-settings-reference)
    width: "400"
helmWithGit_gitFetchType:
    content: |-
        Select **Latest from Branch** or **Specific Commit ID**, and then enter the branch or commit ID for the repo.

        For **Specific Commit ID**, you can also use a [Git commit tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging).
    width: "400"
helmWithGit_folderPath:
    content: Enter the path to the chart folder from the root of the repo.
    width: "400"
helmWithGit_helmVersion:
    content: |-
        Select the version of Helm used in your chart.

        We recommend you use Helm 3. If you select Helm 2, you must have Tiller installed on the target cluster. Helm 3 does not have this requirement.

        See the following topics from Helm:
        - [Migrating Helm v2 to v3](https://helm.sh/docs/topics/v2_v3_migration/)
        - [Helm Version Support Policy](https://helm.sh/docs/topics/version_skew/)
    width: "400"
helmWithGit_skipResourceVersioning:
    content: |-
        By default, Harness versions ConfigMaps and Secrets deployed into Kubernetes clusters. 

        In some cases, such as when using public manifests or Helm charts, you cannot add the annotation.

        When you enable **Skip Resource Versioning**, Harness will not perform versioning of ConfigMaps and Secrets for the resource.

        If you have enabled **Skip Resource Versioning** for a few deployments and then disable it, Harness will start versioning ConfigMaps and Secrets.
    width: "400"
helmWithGit_commandFlags:
    content: |-
        You can use Helm command flags to extend the Helm commands that Harness runs when deploying your Helm chart.

        Harness will run Helm-specific Helm commands and their flags as part of preprocessing. All the commands you select are run before `helm install/upgrade`.
    width: "400"
"helmWithGit_commandFlags[0].commandType":
    content: |-
        Harness supports multiple Helm commands. Select the Helm command you want to use. 

        For example, use **Template** to render the Helm template files.

        Select commands available in the Helm version you selected in **Helm Version**.

        See commands for [Helm 2](https://v2.helm.sh/docs/helm/) and [Helm 3](https://v3.helm.sh/docs/helm/).
    width: "400"
"helmWithGit_commandFlags[0].flag":
    content: |-
        Harness supports all the flags (options) of the Helm command selected in **Command Type**. 

        See commands for [Helm 2](https://v2.helm.sh/docs/helm/) and [Helm 3](https://v3.helm.sh/docs/helm/).
    width: "400"
helmWithGit_branch:
    content: |-
        Enter the branch or commit ID for the repo. 

        For **Specific Commit ID**, you can also use a [Git commit tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging).
    width: "400"
helmWithS3_identifier:
    content: Enter a name that identifies this Helm chart. It doesn't have to be the chart name. It can be the name of the service you are deploying or another name. [Learn More](https://docs.harness.io/article/7owpxsaqar)
    width: "400"
helmWithS3_region:
    content: "Select the AWS region you want to use, such as `US East (N. Virginia)`. "
    width: "400"
helmWithS3_bucketName:
    content: Select the S3 bucket where the chart is located.
    width: "400"
helmWithS3_folderPath:
    content: Enter the path to the chart in the bucket you selected.
    width: "400"
helmWithS3_chartName:
    content: |-
        Enter the name of the Helm chart for Harness to pull. Don't include the chart version. You will add that in the **Chart Version** setting. [Learn More](https://docs.harness.io/article/7owpxsaqar)

        If you want to provide the chart name later, you have the following options: 

        - Configure this setting as a [Runtime Input](https://docs.harness.io/article/f6yobn7iq0) and provide the name at runtime.
        - Configure this setting as a Runtime Input and use [Input Sets](https://docs.harness.io/article/3fqwa8et3d) to provide the chart name.
        - Configure this setting as an [Expression](https://docs.harness.io/article/f6yobn7iq0) and enter a Stage, Service, or custom [variable expression](https://docs.harness.io/article/lml71vhsim). The value for the expression will be added at runtime.
    width: "400"
helmWithS3_chartVersion:
    content: |-
        Enter the version of the chart you want to deploy. This is found in the Chart.yaml `version` label in your chart. 

        You can list all available versions of a chart using the `search repo` command with the `--versions` option. See [helm search repo](https://helm.sh/docs/helm/helm_search_repo) from Helm.

        If you leave **Chart Version** empty Harness gets the latest chart. [Learn More](https://docs.harness.io/article/7owpxsaqar)

        If you are going to use a Harness Trigger to run this Pipeline when a new version is added to your chart repo, select the [Runtime Input](https://docs.harness.io/article/f6yobn7iq0) option. When you set up the Trigger, you will select this chart and Harness will listen on the repo for new versions. [Learn More](https://docs.harness.io/article/54eqk0d1bd)
    width: "400"
helmWithS3_helmVersion:
    content: Select the version of Helm used in your chart. See [Helm Version Support Policy](https://helm.sh/docs/topics/version_skew/) from Helm.
    width: "400"
helmWithS3_skipResourceVersioning:
    content: |-
        By default, Harness versions ConfigMaps and Secrets deployed into Kubernetes clusters. 

        In some cases, such as when using public manifests or Helm charts, you cannot add the annotation.

        When you enable **Skip Resource Versioning**, Harness will not perform versioning of ConfigMaps and Secrets for the resource.

        If you have enabled **Skip Resource Versioning** for a few deployments and then disable it, Harness will start versioning ConfigMaps and Secrets.
    width: "400"
helmWithS3_commandFlags:
    content: |-
        You can use Helm command flags to extend the Helm commands that Harness runs when deploying your Helm chart.

        Harness will run Helm-specific Helm commands and their flags as part of preprocessing. All the commands you select are run before `helm install/upgrade`.
    width: "400"
"helmWithS3_commandFlags[0].commandType":
    content: |-
        Select the Helm command type you want to use. For example:

        - [Template](https://v2.helm.sh/docs/helm/#helm-template): `helm template` to render the helm template files.
        - [Fetch](https://v2.helm.sh/docs/helm/#helm-fetch): `helm fetch` (v1) or [`helm pull`](https://helm.sh/docs/helm/helm_pull/) (v2) to get the Helm chart.
    width: "400"
"helmWithS3_commandFlags[0].flag":
    content: Add any options for the command.
    width: "400"
helmWithGcs_identifier:
    content: Enter a name that identifies this Helm chart. It doesn't have to be the chart name. It can be the name of the service you are deploying or another name. [Learn More](https://docs.harness.io/article/7owpxsaqar)
    width: "400"
helmWithGcs_bucketName:
    content: Select the GCS bucket where the chart is located.
    width: "400"
helmWithGcs_folderPath:
    content: Enter the folder path to the chart in the GCS bucket you selected.
    width: "400"
helmWithGcs_chartName:
    content: |-
        Enter the name of the Helm chart for Harness to pull. Don't include the chart version. You will add that in the **Chart Version** setting. [Learn More](https://docs.harness.io/article/7owpxsaqar)

        If you want to provide the chart name later, you have the following options: 

        - Configure this setting as a [Runtime Input](https://docs.harness.io/article/f6yobn7iq0) and provide the name at runtime.
        - Configure this setting as a Runtime Input and use [Input Sets](https://docs.harness.io/article/3fqwa8et3d) to provide the chart name.
        - Configure this setting as an [Expression](https://docs.harness.io/article/f6yobn7iq0) and enter a Stage, Service, or custom [variable expression](https://docs.harness.io/article/lml71vhsim). The value for the expression will be added at runtime.
    width: "400"
helmWithGcs_chartVersion:
    content: |-
        Enter the version of the chart you want to deploy. This is found in the Chart.yaml `version` label in your chart. 

        You can list all available versions of a chart using the `search repo` command with the `--versions` option. See [helm search repo](https://helm.sh/docs/helm/helm_search_repo) from Helm.

        If you leave **Chart Version** empty Harness gets the latest chart. [Learn More](https://docs.harness.io/article/7owpxsaqar)

        If you are going to use a Harness Trigger to run this Pipeline when a new version is added to your chart repo, select the [Runtime Input](https://docs.harness.io/article/f6yobn7iq0) option. When you set up the Trigger, you will select this chart and Harness will listen on the repo for new versions. [Learn More](https://docs.harness.io/article/54eqk0d1bd)
    width: "400"
helmWithGcs_helmVersion:
    content: Select the version of Helm used in your chart. See [Helm Version Support Policy](https://helm.sh/docs/topics/version_skew/) from Helm.
    width: "400"
helmWithGcs_skipResourceVersioning:
    content: |-
        By default, Harness versions ConfigMaps and Secrets deployed into Kubernetes clusters. 

        In some cases, such as when using public manifests or Helm charts, you cannot add the annotation.

        When you enable **Skip Resource Versioning**, Harness will not perform versioning of ConfigMaps and Secrets for the resource.

        If you have enabled **Skip Resource Versioning** for a few deployments and then disable it, Harness will start versioning ConfigMaps and Secrets.
    width: "400"
helmWithGcs_commandFlags:
    content: |-
        You can use Helm command flags to extend the Helm commands that Harness runs when deploying your Helm chart.

        Harness will run Helm-specific Helm commands and their flags as part of preprocessing. All the commands you select are run before `helm install/upgrade`.
    width: "400"
"helmWithGcs_commandFlags[0].commandType":
    content: |-
        Select the Helm command type you want to use. For example:

        - [Template](https://v2.helm.sh/docs/helm/#helm-template): `helm template` to render the helm template files.
        - [Fetch](https://v2.helm.sh/docs/helm/#helm-fetch): `helm fetch` (v1) or [`helm pull`](https://helm.sh/docs/helm/helm_pull/) (v2) to get the Helm chart.
    width: "400"
"helmWithGcs_commandFlags[0].flag":
    content: Add any options for the command.
    width: "400"
gcrImagePath_registryHostname:
    content: Select the registry where the artifact source is located.
    width: "400"
gcrImagePath_imagePath:
    content: |-
        Enter the name of the artifact you want to deploy. 

        Images in repos need to reference a path starting with the project ID that the artifact is in, for example: `myproject-id/image-name`.
    width: "400"
gcrImagePath_tag:
    content: |-
        Enter the GCR image tag for the image.

        If you use a Runtime Input, you can select the GCR image tag when you run this Pipeline. 
    width: "400"
ecrArtifact_identifier:
    content: Enter a name that identifies this artifact.
    width: "400"
ecrArtifact_region:
    content: Select the region where the artifact source is located.
    width: "400"
ecrArtifact_imagePath:
    content: |-
        Enter the name of the artifact you want to deploy. 

        Often, images in repos need to reference a path, for example: `app/myImage`.
    width: "400"
ecrArtifact_tag:
    content: Enter the Docker image tag.
    width: "400"
artifactConnForm_connectorId:
    content: |-
        Select or add a Connector to connect Harness with your cloud or registry. [Learn More](https://docs.harness.io/article/euueiiai4m)
          

        CD Pipelines typically pull from registries only. CI Pipelines typically pull and push with registries.
    width: "400"
ServiceNowApproval_stepName_StepConfig:
    content: Enter the name of the ServiceNow Approval step.
    width: "400"
serviceNowApproval_identifier:
    content: Enter a name that identifies this Approval step.
    width: "400"
serviceNowApproval_name:
    content: Enter the name of the ServiceNow Approval.
    width: "400"
serviceNowApproval_timeout:
    content: Enter how long you want Harness to try to complete the step before failing. [Learn More](https://docs.harness.io/article/h1so82u9ub-service-now-approvals)
    width: "400"
serviceNowApproval_spec.connectorRef:
    content: Create or select the ServiceNow Connector to use. [Learn More](https://docs.harness.io/article/h1so82u9ub-service-now-approvals)
    width: "400"
serviceNowApprovalTicketType:
    content: Select the ServiceNow Ticket Type.
    width: "400"
serviceNowApprovalTicketNumber:
    content: Enter the Ticket Number.
    width: "400"
servicenowApprovalapprovalCriteria:
    content: The Approval Criteria in the step determines if the Pipeline or stage is approved or rejected. [Learn More](https://docs.harness.io/article/h1so82u9ub-service-now-approvals)
    width: "400"
ceGcpBillingExport_datasetId:
    content: Enter the dataset name. From the GCP console, copy the dataset name where the billing export is available. [Learn More](https://docs.harness.io/article/kxnsritjls-set-up-cost-visibility-for-gcp#step_2_gcp_billing_export)
    width: "400"
ceGcpBillingExport_tableId:
    content: Enter the table name. From the GCP console, copy the table name where the billing export is available. In your BigQuery dataset, the table is named gcp_billing_export_v1_*BILLING_ACCOUNT_ID*.  [Learn More](https://docs.harness.io/article/kxnsritjls-set-up-cost-visibility-for-gcp#step_2_gcp_billing_export)
    width: "400"
stepGitAuthForm_sshKey:
    content: Enter the SSH key to use for authentication with your Git provider account. [GitHub example](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
    width: "400"
ArtifactoryUpload_stepName_StepConfig:
    content: The Upload Artifacts to JFrog Artifactory step creates a Docker image from a Dockerfile and pushes it to a JFrog Artifactory Docker repository. [Learn More](https://docs.harness.io/article/gjoggc66fy)
    width: "400"
jfrogArt_spec.connectorRef:
    content: Select the Harness Artifactory Connector to use for this upload. [Learn More](https://docs.harness.io/article/euueiiai4m-artifactory-connector-settings-reference)
    width: "400"
jfrogArt_timeout:
    content: Enter a timeout for this step.
    width: "400"
BuildAndPushECR_stepName_StepConfig:
    content: The Build and Push to ECR step creates a Docker image from a Dockerfile and pushes it to an ECR Docker repository. [Learn More](https://docs.harness.io/article/aiqbxaef15)
    width: "400"
ciEcrStep_spec.connectorRef:
    content: |-
        The Harness AWS Connector to use to connect to ECR.

        The AWS IAM roles and policies associated with the account used in the Harness AWS Connector must be able to push to ECR. [Learn More](https://docs.harness.io/article/m5vkql35ca)
    width: "400"
ciEcrStep_spec.tags:
    content: |-
        Specify one or more [tags](https://docs.docker.com/engine/reference/commandline/build/#tag-an-image--t) for the Docker image.

        Each tag should added separately. 

        Click **Add** to add each tag separately.
    width: "600"
ciEcrStep_spec.labels:
    content: Use Labels to add metadata to the Docker image.
    width: "400"
ciEcrStep_spec.buildArgs:
    content: The Docker [build-time variables](https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg) (`--build-arg`).
    width: "400"
ciEcrStep_timeout:
    content: Timeout for the step. Once the timeout is reached, the step fails.
    width: "400"
ciGcrStep_spec.connectorRef:
    content: The Harness GCP Connector to use to connect to GCR. [Learn More](https://docs.harness.io/article/yykfduond6)
    width: "400"
ciGcrStep_spec.tags:
    content: |-
        Specify one or more [tags](https://docs.docker.com/engine/reference/commandline/build/#tag-an-image--t) for the Docker image.

        Each tag should added separately. 

        Click **Add** to add each tag separately.
    width: "400"
ciGcrStep_spec.labels:
    content: "[Docker object labels](https://docs.docker.com/config/labels-custom-metadata/) to add metadata to the Docker image."
    width: "400"
ciGcrStep_spec.buildArgs:
    content: The Docker [build-time variables](https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg) (`--build-arg`).
    width: "400"
ciGcrStep_timeout:
    content: Timeout for the step. Once the timeout is reached, the step fails.
    width: "400"
BuildAndPushGCR_stepName_StepConfig:
    content: The Build and Push to GCR step creates a Docker image from a Dockerfile and pushes it to a GCR Docker repository. [Learn More](https://docs.harness.io/article/66ykcm0sf0)
    width: "400"
BuildAndPushDockerRegistry_stepName_StepConfig:
    content: The Build and Push an Image to Docker Registry step creates a Docker image from a Dockerfile and pushes it to a Docker registry. [Learn More](https://docs.harness.io/article/q6fr5bj63w)
    width: "400"
dockerHubStep_spec.connectorRef:
    content: The Harness Docker Registry Connector to use for uploading the image. [Learn More](https://docs.harness.io/article/u9bsd77g5a)
    width: "400"
dockerHubStep_spec.tags:
    content: |-
        Specify one or more [tags](https://docs.docker.com/engine/reference/commandline/build/#tag-an-image--t) for the Docker image.

        Each tag should added separately. 

        Click **Add** to add each tag separately.
    width: "400"
dockerHubStep_spec.labels:
    content: "[Docker object labels](https://docs.docker.com/config/labels-custom-metadata/) to add metadata to the Docker image."
    width: "400"
dockerHubStep_spec.buildArgs:
    content: The Docker [build-time variables](https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg) (`--build-arg`).
    width: "400"
dockerHubStep_timeout:
    content: Timeout for the step. Once the timeout is reached, the step fails.
    width: "400"
S3Upload_stepName_StepConfig:
    content: Use this step to upload artifacts to AWS S3 or other providers that supports the S3 protocol, such as MinIo. [Learn More](https://docs.harness.io/article/wdzojt3ep3)
    width: "400"
ciS3Base_spec.connectorRef:
    content: |-
        The Harness AWS Connector to use when connecting to AWS S3.

        The AWS IAM roles and policies associated with the account used in the Harness AWS Connector must be able to push to S3. [Learn More](https://newdocs.helpdocs.io/article/m5vkql35ca)
    width: "400"
ciS3Base_name:
    content: Enter a name for this step.
    width: "400"
ciS3Base_timeout:
    content: Timeout for the step. Once the timeout is reached, the step fails.
    width: "400"
ciGcsStep_spec.connectorRef:
    content: The Harness GCP Connector for the GCP account where you want to upload the artifact. [Learn More](https://docs.harness.io/article/yykfduond6)
    width: "400"
ciGcsStep_timeout:
    content: Timeout for the step. Once the timeout is reached, the step fails.
    width: "400"
RestoreCacheGCS_stepName_StepConfig:
    content: The Restore Cache from GCS step restores files and directories that were saved using the [Save Cache to GCS](https://docs.harness.io/article/11nzeuntrz) step. [Learn More](https://docs.harness.io/article/e2o4sektz1)
    width: "400"
restoreCacheGcs_spec.connectorRef:
    content: The Harness GCP Connector for the GCP account where you saved the cache using the [Save Cache to GCS](https://docs.harness.io/article/11nzeuntrz) step.
    width: "400"
restoreCacheGcs_timeout:
    content: Timeout for the step. Once the timeout is reached, the step fails.
    width: "400"
RestoreCacheS3_stepName_StepConfig:
    content: The Save Cache to S3 step preserves files and directories between builds. You can restore cache using the [Restore Cache from S3](https://docs.harness.io/article/zlpx6lli6d) step. [Learn More](https://docs.harness.io/article/qtvjvrp9sn)
    width: "400"
restoreCacheS3_spec.connectorRef:
    content: |-
        The Harness AWS Connector to use when restoring the cache from AWS S3. [Learn More](https://newdocs.helpdocs.io/article/m5vkql35ca-aws-connector-settings-reference)

        Typically, this is the same Connector used when you saved the cache using the [Save Cache to S3](https://docs.harness.io/article/qtvjvrp9sn-save-cache-to-s-3-step-settings) step.

        The AWS IAM roles and policies associated with the account used in the Harness AWS Connector must be able to read from S3.
    width: "400"
restoreCacheS3_timeout:
    content: Timeout for the step. Once the timeout is reached, the step fails.
    width: "400"
SaveCacheGCS_stepName_StepConfig:
    content: |-
        The Save Cache to GCS step saves files and directories to a GCS bucket. [Learn More](https://docs.harness.io/article/11nzeuntrz)

        The [Restore Cache from GCS](https://docs.harness.io/article/e2o4sektz1) step restores files and directories that were saved using the Save Cache to GCS step.
    width: "400"
savedCacheGcs_spec.connectorRef:
    content: The Harness Connector to use when saving the cache to Google GCS. [Learn More](https://docs.harness.io/article/v0agy0hlyj-save-cache-in-gcs)
    width: "400"
savedCacheGcs_spec.sourcePaths:
    content: A list of the files/folders to cache. Add each file/folder separately.
    width: "400"
savedCacheGcs_timeout:
    content: Timeout for the step. Once the timeout is reached, the step fails.
    width: "400"
Run_stepName_StepConfig:
    content: |-
        The Run step executes one or more commands on a host. [Learn More](https://docs.harness.io/article/1i1ttvftm4)

        Typically, this command is used to compile packages and dependencies.

        The Run step pulls in a Docker image, like the Docker image for Maven, and then you run a script with the tool, like `mvn clean install`.
    width: "400"
ciRunStep_spec.command:
    content: |-
        POSIX shell script executed inside the container. In the **Shell** setting in **Optional Configuration**, you can select Bash or Shell.

        The script is invoked as if it were the container’s entry point. [Learn More](https://docs.harness.io/article/1i1ttvftm4)
    width: "400"
ciRunStep_spec.outputVariables:
    content: Output Variables can be used to expose Environment Variables to be used by other steps/stages of the pipeline.
    width: "400"
ciRunStep_spec.envVariables:
    content: Environment variables injected into the container and used in the script in **Command**. [Learn More](https://docs.harness.io/article/1i1ttvftm4)
    width: "400"
ciRunTests_spec.connectorRef:
    content: The Harness Connector for a container registry. This is the container registry for the image Harness will use run build commands on, such as DockerHub.
    width: "400"
ciRunTests_spec.preCommand:
    content: |-
        Enter the commands for setting up the environment before running the tests. For example: `printenv`

        This script prints all or part of the environment.
    width: "400"
ciRunTests_spec.postCommand:
    content: |-
        Enter the commands used for cleaning up the environment after running the tests. 

        For example, if you enter `sleep 600` this script suspends the process for 600 seconds.
    width: "400"
ciRunTests_spec.reportPaths:
    content: |-
        The path to the file(s) that store results in the JUnit XML format.

        You can enter multiple paths. Regex is supported.
    width: "400"
ciRunTests_spec.envVariables:
    content: Environment variables injected into the container to be used in the commands.
    width: "400"
ciRunTests_spec.outputVariables:
    content: Output Variables can be used to expose Environment Variables to be used by other steps/stages of the pipeline.
    width: "400"
Plugin_stepName_StepConfig:
    content: |-
        Plugins are Docker containers that perform predefined tasks. 

        Plugins are configured as steps in your stage. 

        Plugins can be used to deploy code, publish artifacts, send notifications, and more. [Learn More](https://docs.harness.io/article/8r5c3yvb8k)
    width: "400"
pluginStep_spec.connectorRef:
    content: Harness Connector for the container registry where the plugin image is located.
    width: "400"
pluginImageInfo:
    content: |-
        The name of the Plugin Docker image.

        The image name should include the tag and will default to the latest tag if unspecified.

        You can use any Docker image from any Docker registry, including Docker images from private registries.
    width: "400"
pluginStep_spec.settings:
    content: Plugin specific settings. Please refer to the plugin's documentation page.
    width: "400"
pluginStep_spec.reportPaths:
    content: Enter paths to file(s) that store results in the JUnit XML format. Regex is supported.
    width: "400"
pluginStep_timeout:
    content: Timeout for the step. Once the timeout is reached, the step fails.
    width: "400"
artifactory_file_path:
    content: Enter the full artifact file path. [Learn More](https://docs.harness.io/article/euueiiai4m-artifactory-connector-settings-reference#artifactory_with_terraform_scripts_and_variable_definitions_tfvars_files)
    width: "400"
editPolicyForm_name:
    content: |-
        Enter a name for this new Governance policy.

        Use a name that describes the policy for other users. [Learn More](https://docs.harness.io/article/1d3lmhv4jl)

        **New to Harness Governance?**
        Try the [Harness Governance Quickstart](https://docs.harness.io/article/jws2znftay).
    width: "400"
CreatePolicySet_type:
    content: |-
        Select the type of Harness entity to apply the policy on. For example, **Pipeline**. [Learn More](https://docs.harness.io/article/1d3lmhv4jl)

        **New to Harness Governance?**
        Try the [Harness Governance Quickstart](https://docs.harness.io/article/jws2znftay).

        **Note:** A Policy with the **Custom** entity type allows the flexibility to enforce policy evaluations during Pipeline execution with different input data. [Learn More](https://docs.harness.io/article/1d3lmhv4jl)
    width: "400"
CreatePolicySet_event:
    content: |-
        Select what type of evaluation to perform. [Learn More](https://docs.harness.io/article/1d3lmhv4jl)

        **New to Harness Governance?**
        Try the [Harness Governance Quickstart](https://docs.harness.io/article/jws2znftay).
    width: "400"
CreatePolicySet_action:
    content: |-
        Select when to apply the policy on the entity type you selected. [Learn More](https://docs.harness.io/article/1d3lmhv4jl)

        **New to Harness Governance?**
        Try the [Harness Governance Quickstart](https://docs.harness.io/article/jws2znftay).
    width: "400"
CreatePolicySet_name:
    content: |-
        Enter a name for the policy set. Use a name that describes the policy set to others. [Learn More](https://docs.harness.io/article/1d3lmhv4jl)

        **New to Harness Governance?** Try the [Harness Governance Quickstart](https://docs.harness.io/article/jws2znftay).
    width: "400"
pipelineCreate_description:
    content: Enter a description that tells your team members the purpose of this Pipeline.
    width: "400"
pipelineCreate_tags:
    content: Tag this Pipeline so you can filter and search for it in Harness. [Learn More](https://docs.harness.io/article/i8t053o0sq)
    width: "400"
"wizardForm_artifacts_stages[0].stage.spec.serviceConfig.serviceDefinition.spec.artifacts.primary.spec.tag":
    content: |-
        Provide values for any Runtime inputs you have in your artifact settings. 

        The `<+trigger.artifact.build>` expression is used for **Tag** to ensure that the new artifact version that executed the Trigger is used for the deployment. [Learn More](https://docs.harness.io/article/c1eskrgngf)
    width: "400"
cdEditStage_identifier:
    content: The stage identifier is created when you first name the stage and it cannot be changed. Changing the stage name doesn't change the stage identifier (Id). [Learn More](https://docs.harness.io/article/li0my8tcz3)
    width: "400"
RollingDetailsHeader:
    content: |-
        When to use Rolling Deployments:
        - When you need to support both new and old deployments.
        - Load balancing scenarios that require reduced downtime.
        [Learn More](https://docs.harness.io/article/0zsf97lo3c)
    width: "400"
BlueGreenDetailsHeader:
    content: |-
        When to use Blue/Green Deployments:
        - When you want to perform verification in a full production environment.
        - When you want zero downtime.
        [Learn More](https://docs.harness.io/article/0zsf97lo3c)
    width: "400"
CanaryDetailsHeader:
    content: |-
        When to use Canary Deployments:
        - When you want to verify whether the new version of the application is working correctly in your production environment before replacing the previous version.
        - This is currently the most common way to deploy apps/services into production.
    width: "400"
DefaultDetailsHeader:
    content: Select this option if you do not want Harness to automatically provide deployment steps.
    width: "400"
build:
    content: |-
        You can use wildcards in the condition's value and you can select Regex.

        For example, if the build is `todolist-v2.0`:

        - With **Regex** not selected, both `todolist*` or `*olist*` will match.
        - With **Regex** selected, the regex `todolist-v\d.\d` will match.

        If the regex expression does not result in a match, Harness ignores the value.

        Harness supports standard Java regex. For example, if Regex is enabled and the intent is to match any branch, the wildcard should be `.*` instead of simply a wildcard `*`. If you wanted to match all of the files that end in `-DEV.tar` you would enter `.*-DEV\.tar`.

        [Learn More](https://docs.harness.io/article/c1eskrgngf)
    width: "400"
samlProviderForm_clientId:
    content: Enter the Application ID of your Azure app. [Learn more](https://docs.harness.io/article/mlpksc7s6c-single-sign-on-saml#users_in_over_150_groups)
    width: "400"
samlProviderForm_clientSecret:
    content: Enter the client secret from your Azure app. [Learn more](https://docs.harness.io/article/mlpksc7s6c-single-sign-on-saml#users_in_over_150_groups)
    width: "400"
notifications.notificationMethod:
    content: Select the Notification Method. [Learn more](https://docs.harness.io/article/4bor7kyimj-notify-users-of-pipeline-events)
    width: "400"
configureSlackNotifications_webhookUrl:
    content: Enter your Slack Webhook URL. [Learn more](https://docs.harness.io/article/4bor7kyimj-notify-users-of-pipeline-events#option_slack_notifications)
    width: "400"
configureSlackNotifications_userGroups:
    content: Select user groups to send notifications.
    width: "400"
configureMSTeamsNotifications_msTeamKeys:
    content: Enter your Microsoft Teams Webhook URL. [Learn more](https://docs.harness.io/article/4bor7kyimj-notify-users-of-pipeline-events#option_microsoft_teams_notifications)
    width: "400"
configureMSTeamsNotifications_userGroups:
    content: Select user groups to send notifications.
    width: "400"
configureEmailNotifications_userGroups:
    content: Select user groups to send notifications.
    width: "400"
configureEmailNotifications_emailIds:
    content: Enter the email addresses that you want to notify. [Learn more](https://docs.harness.io/article/4bor7kyimj-notify-users-of-pipeline-events#option_email_notifications)
    width: "400"
k8DeleteData_spec.deleteResources.spec.resourceNames:
    content: |-
        Enter a resource name in the format `[namespace]/Kind/Name`, with `namespace` being optional. 

        For example:

        ```
        Deployment/harness-example-deployment-canary
        ``` 

        [Learn More](https://docs.harness.io/article/eaj0xuegln)
    width: "400"
k8DeleteData_spec.deleteResources.spec.manifestPaths:
    content: |-
        Enter the path to the manifest for the resource you want to delete. The path is relative to the folder path entered in **File/Folder Path** in the **Manifest Details** settings.

        <figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/30bs4noarh/1649101864406/clean-shot-2022-04-04-at-12-50-51.png" /></figure>

        [Learn More](https://docs.harness.io/article/eaj0xuegln)
    width: "500"
monitoredServicesTitle:
    content: A Harness Monitored Service is a Service and Environment combination that Harness monitors for any changes (such as deployments, infrastructure changes (Kubernetes events, auditing, etc),and incidents (PagerDuty)) and health trend deviations (using logs, metrics, and errors obtained from Logging tools, APMS, and Harness Error Tracking respectively).
    width: "400"
monitoredServiceType:
    content: Select the Service type. You can choose Application or Infrastructure.
    width: "150"
serviceSelectOrCreate:
    content: Select a user journey from the list. To create a new user journey, click Add New. A user journey is a visualization of a user's interaction with a service to achieve a specific goal over time and across different channels.
    width: "300"
environmentSelectOrCreate:
    content: Environment represents your deployment targets logically (QA, Prod, etc). Select the Environment where the Harness Service is deployed from the list or click Add New to create a new Environment.
    width: "400"
MonitoredServiceForm_name:
    content: |+
        The field auto-populates the concatenation of the selected Harness Service and Environment name.

    width: "400"
changeSourceaForm_name:
    content: "Enter a name for the Change Source. "
    width: "400"
selectHealthSourceType:
    content: "Select the Health Source type. "
    width: "400"
defineHealthsource_healthSourceIdentifier:
    content: A Health Source monitors the health trends of the Monitored Service using logs or metrics collected from an APM or logging tool. [Learn More](https://docs.harness.io/article/lwi37ku94x-change-impact-analysis-quickstart#step_3_define_a_health_source)
    width: "400"
selectHealthSourceConnector:
    content: In the Connector settings, select an existing Connector or click New Connector to create a new one. Harness uses Connectors to authenticate and perform operations with a 3rd party tool.
    width: "400"
selectFeature:
    content: Select the APM or logging tool feature to be used.
    width: "400"
NameIdDescriptionTagsHealthSource_description:
    content: It is a text string.
    width: "400"
NameIdDescriptionTagsHealthSource_tags:
    content: You can add Tags to Harness entities and then use the Tags to search for all matching entities.
    width: "400"
changeSourceProviderType:
    content: Select the Change Source type.
    width: "400"
createSLO:
    content: "A Service Level Objective (SLO) is an agreed-upon objective or a reliability target value for a system's availability, measured by service level indicator (SLI) metrics. It is the minimum reliability level, in terms of customer expectations, that you expect a service to achieve most of the time. "
    width: "400"
TotalSLOs_tooltip:
    content: Total number of SLOs existing for all your services.
    width: "400"
Exhausted_tooltip:
    content: |
        Number of SLOs for which the remaining Error Budget is zero or less than zero.
    width: "300"
Unhealthy_tooltip:
    content: Number of SLOs for which the remaining Error Budget is between 0 to 25%.
    width: "400"
NeedAttention_tooltip:
    content: Number of SLOs for which the remaining Error Budget is greater than 25% but less than 50%.
    width: "400"
Observe_tooltip:
    content: Number of SLOs for which the remaining Error Budget is greater than 50% but less than 75%.
    width: "400"
Healthy_tooltip:
    content: Number of SLOs for which the remaining Error Budget is above 75%.
    width: "400"
slosMonitoredService:
    content: Name of the Monitored Service for which the SLO is set.
    width: "400"
sliType:
    content: SLI Type can be Latency or Availability. Latency indicates if a proportion of valid requests are served faster than the threshold. Availability indicates if valid requests are served successfully.
    width: "400"
slosHealthSource:
    content: A Health Source is a combination of a Harness Service and the associated Environment that tracks changes in health trends of the service using logs or metrics collected from an APM or logging tool.
    width: "400"
burnRatePerDay:
    content: Rate at which the Error Budget is being consumed.
    width: "400"
timeRemaining:
    content: Time period for which a Service can violate the allowed SLO.
    width: "400"
SLOPerformanceTrend:
    content: "It shows you the SLO and SLI percentages, which helps you understand how often the set threshold has been breached. This enables you to analyze if the reliability of the service during a given period meets the expectations of most of the users. "
    width: "400"
SLO:
    content: Shows the SLO status percentage.
    width: "400"
SLI:
    content: Shows the SLI status percentage.
    width: "400"
SLO_form_name:
    content: Enter a name for the SLO.
    width: "400"
SLO_form_monitoredServiceRef:
    content: Select the desired Monitored Service from the list or click New Monitored Service to create a new one.
    width: "400"
SLO_form_healthSourceRef:
    content: "Select the Health Source for which you want to define an SLO. To create a new Health Source, click New Health Source. "
    width: "400"
SLO_form_eventType:
    content: Select the event type. You can select Good or Bad.
    width: "400"
SLO_form_goodRequestMetric:
    content: If you select Event Type as Good, select the metric for good requests. If you select Event Type as Bad select the metric for bad requests.
    width: "400"
SLO_form_validRequestMetric:
    content: Select the metrics that will most accurately track the user experience. To create a new metric, click New Metric.
    width: "400"
SLO_form_objectiveValue:
    content: Specify the threshold value for your SLI.
    width: "400"
SLO_form_SLIMissingDataType:
    content: In some cases, a metric can deviate from expected behavior and miss out on data points. Harness SRM lets you interpret these undetected metric values from your Health Source as Good, Bad, or Ignore.
    width: "400"
SLO_form_periodType:
    content: |+
        Specifies the period for which the SLO runs its calculation. This helps to measure whether the reliability of a Service during a given duration meets the expectations of most of its users. 

    width: "400"
SLO_form_periodLength:
    content: Specify the duration of the selected Period Type.
    width: "400"
SLO_form_SLOTargetPercentage:
    content: You can enter a value from 1 to 99.9.
    width: "400"
sshStepDetailsForm_name:
    content: Enter a Name for the SSH Credential. [Learn more](https://docs.harness.io/article/xmp9j0dk8b-add-use-ssh-secrets#add_ssh_credential)
    width: "400"
stepAuthenticationForm_authScheme:
    content: Select an Authentication Scheme. [Learn more](https://docs.harness.io/article/xmp9j0dk8b-add-use-ssh-secrets#add_ssh_credential)
    width: "400"
stepAuthenticationForm_userName:
    content: Enter the username for the user account on the remote server. [Learn more](https://docs.harness.io/article/xmp9j0dk8b-add-use-ssh-secrets#add_ssh_credential)
    width: "400"
stepAuthenticationForm_key:
    content: Enter the Secret Key. You can either create a new Encrypted [File Secret](https://docs.harness.io/article/77tfo7vtea-add-file-secrets#step_1_add_encrypted_file) or Encrypted [Text Secret](https://docs.harness.io/article/osfw70e59c-add-use-text-secrets) or select an existing one.
    width: "400"
stepAuthenticationForm_encryptedPassphrase:
    content: Enter the SSH key [passphrase](https://www.ssh.com/academy/ssh/passphrase).
    width: "400"
stepAuthenticationForm_port:
    content: Enter the SSH port. [Learn more](https://docs.harness.io/article/xmp9j0dk8b-add-use-ssh-secrets#add_ssh_credential)
    width: "400"
SecretsListViewname:
    content: |-
        Harness includes a built-in Secrets Management feature that enables you to store encrypted secrets, such as access keys, and use them in your Harness account. 

        Some key points about Secrets Management:

        - Secrets are always stored in encrypted form and decrypted when they are needed.
        - Harness Manager does not have access to your key management system, and only the Harness Delegate, which sits in your private network, has access to it. Harness never makes secrets management accessible publicly. This adds an important layer of security.
        - You can connect Harness with your own secrets management tools, or use the built-in Harness Secrets Manager.

        Learn More:
        - [Secrets Management](https://docs.harness.io/article/hngrlb7rd6)
        - [Text Secrets](https://docs.harness.io/article/osfw70e59c)
        - [File Secrets](https://docs.harness.io/article/77tfo7vtea)
        - [SSH Credentials](https://docs.harness.io/article/xmp9j0dk8b)
    width: "400"
sshVerifyConnectionForm_host:
    content: Enter the hostname of the remote server you want to SSH into. [Learn more](https://docs.harness.io/article/xmp9j0dk8b-add-use-ssh-secrets#add_ssh_credential)
    width: "400"
portBindings:
    content: |
        When a Pipeline runs on an AWS build farm, some Steps might run on a bare metal VM and others run in a container. The port used to communicate with the Service Dependency depends on where the Step is running: bare-metal Steps use the Host Port and containerized Steps use the Container Port. 

        Suppose you create a Service Dependency with the Name and Id **myloginservice**. 
        - A containerized Step talks to the service using **myloginservice:_container_port_**. 
        - A  Run or Run Test Step that runs directly on the VM talks to the service using **localhost:_host_port_**.

        The binding of Host and Container Ports is similar to [port mapping in Docker](https://docs.docker.com/config/containers/container-networking/). Usually the ports are the same unless the default Host Port for the service dependency is already in use by another local service. 
    width: "400"
dependencyBase_spec.portBindings:
    content: |
        When a Pipeline runs on an AWS build farm, some Steps might run on a bare metal VM and others run in a container. The port used to communicate with the Service Dependency depends on where the Step is running: bare-metal Steps use the Host Port and containerized Steps use the Container Port. 

        Suppose you create a Service Dependency with the Name and Id **myloginservice**. 
        - A containerized step talks to the service using **myloginservice:_container_port_**. 
        - A  Run or Run Test step that runs directly on the VM talks to the service using **localhost:_host_port_**.

        The binding of Host and Container Ports is similar to [port mapping in Docker](https://docs.docker.com/config/containers/container-networking/). Usually the ports are the same unless the default Host Port for the service dependency is already in use by another local service. 
    width: "400"
depth:
    content: |
        The number of commits to fetch when Harness clones a repo.

        - For manual Builds, when a user clicks **Build** in the Harness UI, the default Depth is 50 (each `git clone` operation fetches the most recent 50 commits). A setting of 0 fetches all commits in the branch.
        - For triggered Builds, the default Depth is 0 (fetch all commits to the branch).

        For details, see [https://git-scm.com/docs/git-clone](https://git-scm.com/docs/git-clone).
    width: "400"
prCloneStrategy:
    content: |
        When a build is triggered by a pull request, this setting determines the branch to use for the artifact after the build process clones the repo.

        - If **Merge Commit** (the default) is selected, the Pipeline tries to merge the Pull Request branch with the target branch before building the artifact. The artifact includes all PR and target commits, but builds can take longer and result in build failures.
        - If **Source Branch** is selected, the Pipeline builds the artifact from the latest commit in the Pull Request branch. Builds can be faster and less likely to result in build failures, but the artifacts might not include some target-branch commits.

        [Learn more](https://docs.harness.io/article/mozd8b49td)
    width: "400"
rightBarForm_memoryLimit:
    content: Maximum memory that the container can use. You can specify an integer or fixed-point value with the suffix G, M, Gi, or Mi. Default is 500Mi.
    width: "400"
rightBarForm_cpuLimit:
    content: |
        Maximum number of cores that the container can use. CPU resource limits are measured in CPU units. You can specify a fraction as well. 0.1 is equivalent to 100m, or 100 millicpu. Default is 400m.
    width: "400"
sslVerify:
    content: |+
        If True (the default), the Pipeline verifies your Git SSL certificates. The build fails if the certificate check fails. You should set this to False only if you have a known issue with the certificate and are willing to run your builds anyway.
        You can use self-signed certificates in your build infrastructure. [Learn more](https://docs.harness.io/article/e5qkn9atiw)

    width: "400"
Policy_stepName_StepConfig:
    content: Use this step to add Policy Set evaluations to your Stage. [Learn More](https://docs.harness.io/article/xy8zsn8fa3)
    width: "400"
policyStepForm_name:
    content: Enter a name for this Policy Step. [Learn More](https://docs.harness.io/article/xy8zsn8fa3)
    width: "400"
policyStepForm_timeout:
    content: Enter how long this step should run before timing out.
    width: "400"
policyStepForm_spec.type:
    content: Select the entity type that this Policy Set evaluation applies to. A **Custom** type is free form. It can evaluate any JSON. [Learn More](https://docs.harness.io/article/xy8zsn8fa3)
    width: "400"
policyStepForm_spec.policySets:
    content: Select the Policy Set to use for this step's evaluation. [Learn More](https://docs.harness.io/article/xy8zsn8fa3)
    width: "400"
policyStepForm_spec.policySpec.payload:
    content: Enter the payload to be evaluated by the Policy Set(s) you selected in **Policy Set**. [Learn More](https://docs.harness.io/article/xy8zsn8fa3)
    width: "400"
nexusArtifact_repositoryUrl:
    content: Enter the URL you would use in the Docker login to fetch the Artifact. This is the same as the domain name and port you use for docker login hostname:port. [Learn More](https://docs.harness.io/article/4ifq51cp0i)
    width: "400"
nexusArtifact_repository:
    content: Enter the name of the repository where the Artifact is located. [Learn More](https://docs.harness.io/article/4ifq51cp0i)
    width: "400"
nexusArtifact_artifactPath:
    content: Enter the name of the Artifact you want to deploy. [Learn More](https://docs.harness.io/article/4ifq51cp0i)
    width: "400"
nexusArtifact_tag:
    content: Select the Docker image tag. [Learn More](https://docs.harness.io/article/4ifq51cp0i)
    width: "400"
artifactoryArtifact_repository:
    content: |-
        Enter the name of the repository where the Artifact is located. [Learn More](https://docs.harness.io/article/4ifq51cp0i)

        - <a href="https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1649712423214/clean-shot-2022-04-11-at-14-26-40.png">Docker example</a>
        - <a href="https://files.helpdocs.io/i5nl071jo5/articles/5fnx4hgwsa/1653344758802/clean-shot-2022-05-23-at-15-25-41.png">ZIP example</a>
    width: "400"
artifactoryArtifact_repositoryUrl:
    content: Enter the URL you would use in the Docker login to fetch the Artifact. [Learn More](https://docs.harness.io/article/4ifq51cp0i)
    width: "400"
artifactoryArtifact_artifactPath:
    content: Enter the name of the Artifact you want to deploy. [Learn More](https://docs.harness.io/article/4ifq51cp0i)
    width: "400"
artifactoryArtifact_tag:
    content: Enter the image tag artifact name.
    width: "400"
imagePath_version:
    content: Enter your Artifact version. [Learn More](https://docs.harness.io/article/4ifq51cp0i)
    width: "400"
serviceAccountName:
    content: ""
    width: "400"
automountServiceAccountToken:
    content: By default, k8s mounts a token for the Service Account when it creates a pod, which enables the pod to communicate with the k8s API server. When this option is disabled, the service account token will not get mounted.
    width: "400"
priorityClassName:
    content: |-
        The PriorityClass of the Stage pod in case resources run out on the host node. 


        Enter the name of a PriorityClass defined in your build infrastructure. You can also enter the predefined classes `system-cluster-critical` or `system-node-critical`, which ensure that the Stage is always scheduled first.


        If you leave this field blank, the PriorityClass will be the `globalDefault` (if your infrastructure has one defined) or 0, which is lowest priority. [Learn more](https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass)
    width: "400"
allowPrivilegeEscalation:
    content: When enabled, a process can gain more privileges than its parent process. This setting determines whether the `no_new_privs` flag gets set on the container process.
    width: "400"
ciBuildInfra_addCapabilities:
    content: Set the `DefaultAddCapabilities` option in Kubernetes, which defines the list of capabilities to add to each Step by default. [Learn more](https://kubernetes.io/docs/concepts/security/pod-security-policy/#capabilities)
    width: "400"
ciBuildInfra_dropCapabilities:
    content: Set the `RequiredDropCapabilities` option in Kubernetes, which defines the list of capabilities to drop from each Step. [Learn more](https://kubernetes.io/docs/concepts/security/pod-security-policy/#capabilities)
    width: "400"
runAsNonRoot:
    content: |
        Run all Steps as a non-root User. To specify a default User Id for all containers, set the Run as User field.
    width: "400"
readOnlyRootFilesystem:
    content: Run all Steps with a read-only root filesystem, with no writable layer.
    width: "400"
ciBuildInfra_volumes:
    content: A list of the volumes you want to mount onto the pod running the Stage.
    width: "400"
ciBuildInfra_volumes.0.mountPath:
    content: The volume path for Step containers.
    width: "400"
ciBuildInfra_volumes.0.type:
    content: |-
        The type of volume you want to mount. Select one of the following:

        * **Empty Directory:** Mount a new [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume that gets deleted when the Stage finishes execution.

        * **Host Path:** Mount a file or folder from the host node filesystem. It is good practice to avoid hostPath volumes in most cases. See [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the 
        Kubernetes docs.

        * **Persistent Volume Claim:** Mount a [Persistent Volume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) using a predefined Persistent Volume Claim.
    width: "400"
ciBuildInfra_volumes.1.type:
    content: |-
        The type of volume you want to mount. Select one of the following:

        * **Empty Directory:** Mount a new [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume that gets deleted when the Stage finishes execution.

        * **Host Path:** Mount a file or folder from the host node filesystem. It is good practice to avoid hostPath volumes in most cases. See [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the 
        Kubernetes docs.

        * **Persistent Volume Claim:** Mount a [Persistent Volume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) using a predefined Persistent Volume Claim.
    width: "400"
ciBuildInfra_volumes.2.type:
    content: |-
        The type of volume you want to mount. Select one of the following:

        * **Empty Directory:** Mount a new [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume that gets deleted when the Stage finishes execution.

        * **Host Path:** Mount a file or folder from the host node filesystem. It is good practice to avoid hostPath volumes in most cases. See [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the 
        Kubernetes docs.

        * **Persistent Volume Claim:** Mount a [Persistent Volume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) using a predefined Persistent Volume Claim.
    width: "400"
ciBuildInfra_volumes.0.spec.medium:
    content: The storage medium for the volume. Leave blank to use the default medium for the host node, or enter `memory` to mount a tmpfs (RAM-backed filesystem) on the host node.
    width: "400"
ciBuildInfra_volumes.0.spec.size:
    content: |-
        Maximum memory that the volume can use. You can express memory as a plain integer or as a fixed-point number using the suffixes `G` or `M`. You can also use the power-of-two equivalents `Gi`and `Mi`. Do not include spaces in the string (`5Mi` not `5 Mi`).


        If not specified, the volume can use up to 50% of available memory on the host node.
    width: "400"
ciBuildInfra_volumes.1.mountPath:
    content: The volume path for Step containers.
    width: "400"
ciBuildInfra_volumes.1.spec.path:
    content: The volume path on the host node.
    width: "400"
ciBuildInfra_volumes.1.spec.type:
    content: To apply a precheck on the specified path before mounting the volume, enter a supported value such as `FileOrCreate`. Leave blank to skip any prechecks before mounting.
    width: "400"
mountPath:
    content: The volume path for Step containers.
    width: "400"
ciBuildInfra_volumes.2.spec.claimName:
    content: Name of a PVC defined in your build infrastructure.
    width: "400"
readOnly:
    content: Mount the volume in read-only mode.
    width: "400"
ciBuildInfra_nodeSelector:
    content: A list of [nodeSelectors](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) that specify the set of candidate nodes based on your Stage pod requirements.
    width: "400"
ciBuildInfra_tolerations:
    content: A list of [tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) that allow (but do not require) the pods to schedule onto nodes with matching taints.
    width: "400"
Security_stepName_StepConfig:
    content: This step uses Harness Security Testing Orchestration (STO) to perform code and container security scanning. [Learn More](https://docs.harness.io/article/b5jv0vlrvf)
    width: "400"
zeroNorthStep_name:
    content: Enter a name for this step.
    width: "400"
zeroNorthStep_description:
    content: Enter a description for this step.
    width: "400"
zeroNorthStep_spec.settings:
    content: |-
        The settings you enter here determine the scanner, target types, and scan approach to use in this step.

        For example, to use Brakeman, you would start by entering the following settings:

        - `product_name: brakeman`
        - `scan_type: repository`
        - `policy_type: orchestratedScan`

        For an example, see the [Security Testing Orchestration Quickstart](https://docs.harness.io/article/b5jv0vlrvf).

        For a list of the supported scanners and their settings, see [Security Step Settings Reference](https://docs.harness.io/article/0k0iubnzql).
    width: "400"
zeroNorthStep_timeout:
    content: Enter how long Harness should wait for this step to complete before timing out and initiating the [Failure Strategy](https://docs.harness.io/article/0zvnn5s1ph).
    width: "400"
tfRemoteWizardForm_spec.configuration.configFiles.store.spec.gitFetchType:
    content: |-
        Select **Latest from Branch** or **Specific Commit Id / Git Tag**. [Learn More](https://docs.harness.io/article/uznls2lvod)

        When you run the Pipeline, Harness will fetch the script from the repo.

        If you think the script might change often, you might want to use **Specific Commit Id**. 

        For example, if you are going to be fetching the script multiple times in your Pipeline, Harness will fetch the script each time. If you select **Latest from Branch** and the branch changes between fetches, different scripts are run.
    width: "400"
tfRemoteWizardForm_spec.configuration.configFiles.store.spec.branch:
    content: Enter the branch name.
    width: "400"
tfRemoteWizardForm_spec.configuration.configFiles.store.spec.folderPath:
    content: Enter the path from the root of the repo to the folder containing the script. [Learn More](https://docs.harness.io/article/uznls2lvod)
    width: "400"
tfRemoteWizardForm_spec.configuration.configFiles.store.spec.commitId:
    content: |-
        Enter the commit Id or Git tag to use.

        If you think the script might change often, you might want to use a commit Id. 

        For example, if you are going to be fetching the script multiple times in your Pipeline, Harness will fetch the script each time. If you select **Latest from Branch** and the branch changes between fetches, different scripts are run.
    width: "400"
ciEcrStep_spec.baseImageConnectorRefs:
    content: |-
        Select an authenticated Connector to download base images from the container registry. Otherwise, the Step downloads base images without authentication. 

        Specifying a Base Image Connector is recommended because unauthenticated downloads generally have a lower rate limit than authenticated downloads. ​
    width: "400"
serverlessDeploymentTypeManifests:
    content: |-
        Add your serverless.yml file as a manifest. Harness will fetch your serverless.yml file at deployment runtim. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
          

        **Notes:** 
        - The serverless.yaml file you use with Harness can use Harness [secrets](https://docs.harness.io/article/osfw70e59c) and [built-in and custom expressions](https://docs.harness.io/article/lml71vhsim).
        - Plugins are also supported in your serverless.yml file using the standard format. For example:

        ```
        plugins:
          - serverless-deployment-bucket@latest
        ```
    width: "400"
serverlessDeploymentTypeArtifacts:
    content: |-
        Add the function you want to deploy as an artifact. 

        For example, a function stored in a cloud repo as a ZIP file. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
          

        You do not have to use an Artifact if the serverless.yml file you added to **Manifests** has the `package: artifact` hardcoded.
          

        If you add an artifact to Harness in **Artifacts**, you need to use the Harness expression `<+artifact.path>` in your serverless.yml file like this:

        ```
        package:
          artifact: <+artifact.path>
        ```

        At deployment runtime, Harness will resolve the expression to the artifact added in **Artifacts** and fetch the artifact from its repo.
    width: "400"
awsInfraConnector:
    content: |-
        Add or select an AWS Connector to connect Harness with the AWS account running your Lambda service. 

          
        Essentially, this AWS account is the deployment target. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "450"
awsRegion:
    content: Enter the [AWS region name](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html) where the target Lambda service is located, such as `us-east-1`.
    width: "400"
awsStage:
    content: |-
        Enter the name of the stage in your service that you want to deploy to, such as `dev`. 
          
        This is the same as the `--stage` option in the `serverless deploy` command. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "400"
serverlessAwsLambda_identifier:
    content: Enter a name that identifies this Serverless manifest. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "400"
serverlessAwsLambda_gitFetchType:
    content: Select where you want to fetch your serverless.yml file from. You can fetch it from a branch, commit Id, or Git tag. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "400"
serverlessAwsLambda_branch:
    content: Enter the branch name where your serverless.yml file is located. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "350"
serverlessAwsLambda_paths:
    content: Enter the path from the root of the repo to the folder containing your serverless.yml file. You do not need to enter the filename. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "400"
UseanyavailableDelegate:
    content: |-
        Select this option to let Harness select a Delegate at runtime.

        When a task is ready to be assigned, the Harness Manager first validates its lists of Delegates to see which Delegate should be assigned the task.

        The following information describes how the Harness Manager validates and assigns tasks to a Delegate:

        - **Heartbeats:** running Delegates send heartbeats to the Harness Manager in 1 minute intervals. If the Manager does not have a heartbeat for a Delegate when a task is ready to be assigned, it will not assign the task to that Delegate.

        - **Tags:** see [Select Delegates with Tags](https://newdocs.helpdocs.io/article/nnuf8yv13o).

        - **Allowlisting:** once a Delegate has been validated for a task, it is allowlisted for that task and will likely be used again for that task. The allowlisting criteria is the URL associated with the task, such as a connection to a cloud platform, repo, or API. A Delegate is allowlisted for all tasks using that URL. The Time-To-Live (TTL) for the allowlisting is 6 hours, and the TTL is reset with each successful task validation.

        - **Blocklisting:** if a Delegate fails to perform a task that Delegate is blocklisted for that task and will not be tried again. TTL is 5 minutes. This is true if there is only one Delegate and even if the Delegate is selected for that task with a Selector.

        [Learn how Harness picks Delegates](https://docs.harness.io/article/2k7lnc7lvl)
    width: "500"
OnlyuseDelegateswithallofthefollowingtags:
    content: |-
        Select this option to use specific Delegates using their Tags. [Learn More](https://newdocs.helpdocs.io/article/nnuf8yv13o)
          

        You only need to select one of a Delegate's Tags to select it. All Delegates with the Tag are selected.
          

        This option is useful when you have installed specific software on specific Delegates and want to ensure that your Pipeline uses those Delegates.
    width: "500"
artifactoryArtifact_artifactDirectory:
    content: Enter the name of the folder/directory where the artifact is located.
    width: "400"
artifactoryArtifact_tagType:
    content: Select a specific artifact name or use regex.
    width: "400"
ServerlessAwsLambdaDeploy_name:
    content: Enter a name for this Serverless Lambda step. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "400"
ServerlessAwsLambdaDeploy_timeout:
    content: Enter a timeout value for this step. Once the timeout is reached, the step or stage [failure strategy](https://docs.harness.io/article/htrur23poj) is executed.
    width: "400"
serverlessDeployCommandOptions:
    content: |-
        Add any `serverless deploy` command options. See [Serverless AWS - Deploy](https://www.serverless.com/framework/docs/providers/aws/cli-reference/deploy) for the list of options.
          

        In the deployment logs, you will see the options added to the serverless deploy command.
          

        For example, if you add `--conceal` in **Serverless Deploy Command Options** you will see the following:

        ```
        serverless deploy --stage dev --region us-east-1 --conceal
        ```
    width: "500"
ServerlessAwsLambdaDeploy_stepName_StepConfig:
    content: Use this step to deploy a Serverless Lambda serverless.yml and artifact. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "400"
ServerlessAwsLambdaRollback_stepName_StepConfig:
    content: Use this step to rollback a Serverless Lambda deployment to the last successful deployment. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "400"
ServerlessLambdaRB_name:
    content: Enter a name for this Serverless Lambda rollback step. [Learn More](https://docs.harness.io/article/5fnx4hgwsa)
    width: "400"
ServerlessLambdaRB_timeout:
    content: Enter a timeout value for this step. Once the timeout is reached, the step or stage [failure strategy](https://docs.harness.io/article/htrur23poj) is executed.
    width: "400"
selectPropagatedState:
    content: |-
        You can use the same Service across your Pipeline stages. 
          

        In many cases, you'll want to use some of the propagated Service's settings, such as manifests, but want to override others, such as values.yaml files, artifacts, or variables. 
          

        Harness lets you propagate and override. [Learn More](https://docs.harness.io/article/t57uzu1i41)
    width: "400"
serverlessAwsLambda_configOverridePath:
    content: |-
        Use this setting when your Serverless manifest is not named `serverless.yml|.yaml|.js|.json`. 
          

        The is the same as the `--config` option in `serverless deploy`. See [AWS - deploy](https://www.serverless.com/framework/docs/providers/aws/cli-reference/deploy) from Serverless.
    width: "400"
serviceNowCreate_name:
    content: "Enter a name that describes the step. "
    width: "400"
serviceNowCreate_timeout:
    content: |-
        
        Enter a timeout for this step. 

        You can use:

        - `w`  for weeks

        - `d`  for days

        - `h`  for hours

        - `m`  for minutes

        - `s`  for seconds

        - `ms`  for milliseconds

        The maximum is `53w`.

        Timeouts can be set at the Pipeline level also.
    width: "400"
serviceNowCreate_spec.connectorRef:
    content: Create or select the [ServiceNow Connector](https://docs.harness.io/article/illz8off8q-connect-to-service-now).
    width: "400"
serviceNowCreate_spec.description:
    content: Enter the ticket description.
    width: "400"
serviceNowCreate_spec.shortDescription:
    content: Enter a description of the ticket you are creating. This will be the title of the ticket.
    width: "400"
ServiceNowSelectFromFieldList:
    content: Select from the fields Harness retrieved from ServiceNow using the ServiceNow Connector and Ticket Type.
    width: "400"
ServiceNowProvideFromFieldList:
    content: Add fields for the ticket. The properties are specified as key-value pairs, the name being the field name (not the label) in ServiceNow and a valid value.
    width: "400"
ciBuildInfra_harnessImageConnectorRef:
    content: |-
        By default, Harness pulls certain images from public Docker Hub repos that are needed to run a build. You can override this by using a Connector that downloads these images from the Harness Container Image Registry instead. 

        This option is useful when your default Delegate cannot access the public registry (due to security policies in your organization, for example, or if your infrastructure is running in a private cloud).

        To override how the Build Stage pulls these images, create a Connector as described in [Connect to Harness Container Image Registry Using Docker Connector](https://docs.harness.io/article/my8n93rxnw).
    width: "400"
conditionalExecutionCustomStage:
    content: |-
        Conditional Execution lets you set when and if to run or skip a stage. [Learn More](https://newdocs.helpdocs.io/article/i36ibenkq2)

        Conditional Execution uses JEXL operators and expressions.
          
          
        Examples:

        `<+steps.mystep.output.status> == “success”`
        `<+environment.name> != “QA”`

        [Learn More about JEXL](https://commons.apache.org/proper/commons-jexl/reference/syntax.html)
    width: "500"
failureStrategyCustomStage:
    content: Define the failure strategy for all steps and step groups in the stage. The stage-level strategy is overridden by step and step group failure strategies, if present. [Learn More](https://newdocs.helpdocs.io/article/htrur23poj)
    width: "400"
pipelineCreate_connectorRef:
    content: Select or create a Git Connector to connect to the repo for your Project. [Learn More](https://newdocs.helpdocs.io/category/xyexvcc206-ref-source-repo-provider)
    width: "400"
pipelineCreate_repo:
    content: Select your repository. Limited repositories are populated here, so if your repo is not included, enter its name. [Learn more](https://docs.harness.io/article/grfeel98am-configure-git-experience-for-harness-entities#step_1_add_a_remote_pipeline)
    width: "400"
pipelineCreate_branch:
    content: Select your branch. Limited branches are populated here, so if your branch is not included, enter its name. [Learn more](https://docs.harness.io/article/grfeel98am-configure-git-experience-for-harness-entities#step_1_add_a_remote_pipeline)
    width: "400"
pipelineCreate_filePath:
    content: Enter the file path. [Learn more](https://docs.harness.io/article/grfeel98am-configure-git-experience-for-harness-entities#step_1_add_a_remote_pipeline)
    width: "400"
smtpStepDetailsForm_name:
    content: Enter a name for the SMTP Configuration.
    width: "400"
smtpStepDetailsForm_host:
    content: Enter your SMTP server's URL.
    width: "400"
smtpStepDetailsForm_port:
    content: Enter the port number on which the SMTP server is listening. Typically it is 25.
    width: "400"
smtpStepDetailsForm_useSSL:
    content: Select Enable SSL for secure connections (SSL/TLS).
    width: "400"
smtpStepDetailsForm_startTLS:
    content: Select Start TLS to enable SMTP over TLS, or when the connection is upgraded to SSL/TLS.
    width: "400"
smtpStepDetailsForm_fromAddress:
    content: Enter the email address from which Harness will send notification emails.
    width: "400"
smtpStepCredentialsForm_username:
    content: Enter the username for the email account.
    width: "400"
smtpStepCredentialsForm_password:
    content: Enter the password for the email account.
    width: "400"
CreateStack_stepName_ProvisionerStepConfig:
    content: Use the Create Stack step to run a CloudFormation template and supporting files inline or from your repos. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
cloudFormationCreateStack_name:
    content: |-
        Enter a name for the step, for example, **Create EC2 Instance**.

        Harness will create an [Entity Id](https://docs.harness.io/article/li0my8tcz3) using the name. The Id is very important. You can use a Harness expression and Id to refer to settings in this step from another step.
    width: "400"
cloudFormationCreateStack_timeout:
    content: Enter how long Harness should wait to complete the step before failing the step and initiating the [Step and Stage Failure Strategy](https://docs.harness.io/article/htrur23poj).
    width: "400"
cloudFormationCreateStack_spec.provisionerIdentifier:
    content: |-
        Enter a unique value in **Provisioner Identifier**. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)

        The **Provisioner Identifier** identifies the stack provisioned by this step. 

        You reference the **Provisioner Identifier** in other steps to refer to the provisioning done by this step.

        The most common use of **Provisioner Identifier** is between the Create Stack, Delete Stack, and Rollback Stack steps.

        For example, in the case of a Create Stack failure, the Rollback Stack step rolls back the provisioning from the Create Stack step using its **Provisioner Identifier**.

        **Note:** Only one **Create Stack** step with a specific **Provisioner Identifier** can be added in the same stage. If you add multiple Create Stack steps with the same **Provisioner Identifier**, only the first Create Stack step will be successful.

        ### Provisioner Identifier Scope
        The Provisioner Identifier is a Project-wide setting. You can reference it across Pipelines in the same Project.

        For this reason, it's important that all your Project members know the Provisioner Identifiers. This will prevent one member building a Pipeline from accidentally impacting the provisioning of another member's Pipeline.
    width: "500"
cloudFormationCreateStack_spec.configuration.connectorRef:
    content: |-
        Add or select the Harness [AWS Connector](https://docs.harness.io/article/m5vkql35ca) that will be used for this step. 

        The AWS Connector will include the credentials needed to perform the provisioning.

        The credentials required for provisioning depend on what you are provisioning.
    width: "400"
cloudFormationCreateStack_spec.configuration.region:
    content: Select the region for the resources you are provisioning.
    width: "400"
cloudFormationCreateStack_spec.configuration.stackName:
    content: |-
        Enter a name for the CloudFormation stack Harness will create. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)

        This is the same as the `--stack-name` option in the `aws cloudformation create-stack` command.
    width: "500"
cloudFormationCreateStack_spec.configuration.roleArn:
    content: |+
        Enter the AWS Role ARN to use when creating the stack. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)

        Use an existing AWS Identity and Access Management (IAM) service role that CloudFormation can assume.

        This is the same as the role you would use when creating a stack using the AWS console [Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-add-tags.html) setting or CLI.

        See [AWS CloudFormation service role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-servicerole.html) from AWS.

    width: "400"
cloudFormationCreateStack_spec.configuration.capabilities:
    content: |
        To acknowledge the capabilities in the CloudFormation template, click in **Specify Capabilities** and select capabilities. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)

        This acknowledges that the template contains certain capabilities (for example, `CAPABILITY_AUTO_EXPAND`), giving AWS CloudFormation the specified capabilities before it creates the stack. This is the same as using the `--capabilities` option in the `aws cloudformation create-stack` CLI command. See [create-stack](https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html).
    width: "400"
cloudFormationCreateStack_spec.configuration.tags.spec.content:
    content: |-
        Tags are arbitrary key-value pairs that can be used to identify your stack for purposes such as cost allocation. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)

        - A Key consists of any alphanumeric characters or spaces. Tag keys can be up to 127 characters long.

        - A Value consists of any alphanumeric characters or spaces. Tag values can be up to 255 characters long.

        Enter the tags in JSON or YAML (lowercase is required)
    width: "400"
cloudFormationCreateStack_spec.configuration.skipOnStackStatuses:
    content: |-
        Add the stack states that allow provisioning. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)

        **Note:** Harness checks if the stack is in `ROLLBACK_COMPLETE` state before the deployment. If present, Harness deletes the stack and then triggers the deployment.
    width: "400"
awsConnector_spec.configuration.parameters.store.spec.connectorRef:
    content: |-
        Select your Git platform, and then select or add a Git Connector. 

        See [Code Repo Connectors](https://newdocs.helpdocs.io/category/xyexvcc206) for steps on adding a Git Connector.

        For AWS S3, see [Add an AWS Connector](https://docs.harness.io/article/98ezfwox9u).
    width: "400"
RemoteStepTwo_spec.configuration.parameters.identifier:
    content: Enter an Identifier for the file. This is just a name that indicates what the parameters are for. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
RemoteStepTwo_spec.configuration.parameters.store.spec.repoName:
    content: If the Git Connector does not have the repo path, enter it here. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
RemoteStepTwo_spec.configuration.parameters.store.spec.gitFetchType:
    content: Select **Latest from Branch** or use a Git commit Id or tag. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
RemoteStepTwo_spec.configuration.parameters.store.spec.paths:
    content: Enter the path to the file from the root of the repo. To add multiple files, click **Add Path File**. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
UserGroupRoleAssignmentForm_userGroups:
    content: Select the user group(s) for role assignment.
    width: "400"
DeleteStack_stepName_ProvisionerStepConfig:
    content: You can use the Delete Stack step to remove resources provisioned by the Create Stack step or any resources created by CloudFormation. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
cloudFormationDeleteStack_name:
    content: Enter a name for the step. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
cloudFormationDeleteStack_timeout:
    content: Enter how long Harness should wait to complete the step before failing the step and initiating the [Step and Stage Failure Strategy](https://docs.harness.io/article/htrur23poj).
    width: "400"
cloudFormationDeleteStack_spec.configuration.type:
    content: |-
        Choose how you want to delete a stack:

        - **Inline:** removes the stack you identify using AWS settings like stack name.
        - **Inherit from Create:** removes the stack created by a Harness **Create Stack** step that you identify using its **Provisioner Identifier**.

        [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
cloudFormationDeleteStack_spec.configuration.spec.connectorRef:
    content: |-
        Add or select the Harness AWS Connector for connecting to AWS. 

        Ensure its credentials have the permissions needed to remove the resources. See [AWS Connector](https://docs.harness.io/article/m5vkql35ca).
    width: "400"
cloudFormationDeleteStack_spec.configuration.spec.region:
    content: Select the region for the resources you are removing.
    width: "400"
cloudFormationDeleteStack_spec.configuration.spec.roleArn:
    content: Enter the AWS Role ARN to use when deleting the stack. This is the same as the role you would use when deleting a stack using the AWS console or CLI.
    width: "400"
cloudFormationDeleteStack_spec.configuration.spec.stackName:
    content: Enter the name of the stack to delete.
    width: "400"
RollbackStack_stepName_ProvisionerStepConfig:
    content: Use this step in the **Rollback** to roll back to the last successfully provisioned version of the stack. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
cloudFormationDeleteStack_spec.configuration.provisionerIdentifier:
    content: Enter the Provisioner Identifier of the Create Stack step that created the stack you want to roll back. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
cloudFormationDeleteStack_spec.configuration.spec.provisionerIdentifier:
    content: Enter the Provisioner Identifier of the Create Stack step that created the stack you want to delete. [Learn More](https://docs.harness.io/article/6jfl7i6a5u)
    width: "400"
StepGroup_stepName_StepConfig:
    content: |-
        Steps can be added to Pipelines individually or as a step group. [Learn More](https://docs.harness.io/article/ihnuhrtxe3)

        Step groups can be run serially or in parallel.

        Unlike individual steps, a step group can apply Conditional Execution (skip conditions), Failure Strategy, and Rollback steps to all steps in the group.


        [Watch a video](https://www.youtube.com/watch?v=J5eHYSbE8cg)
    width: "500"
stepGroup_name:
    content: Enter a name for this step group. [Learn More](https://docs.harness.io/article/ihnuhrtxe3)
    width: "400"
manifestDetails_valuesPaths:
    content: |-
        Enter the path to the Values YAML file(s) you want to use in the same repo. Enter the path from the repo root to the file or folder. [Learn More](https://docs.harness.io/article/q002wjjl4d)

        If you add multiple Values YAML files and they have any identical `name` labels, the Values YAML files override in a reverse order. For example, the third Values YAML file listed overrides the second and first Values YAML files.

        If the Values YAML file you want to use is in a separate repo, add it separately as a **Values YAML** manifest type.

        [Watch a video](https://youtu.be/dVk6-8tfwJc)
    width: "400"
manifestPath_valuesPaths:
    content: |-
        Enter the path to the Kubernetes or Helm Chart Values YAML file(s), Kustomize Patches, OpenShift Parameters, etc you want to use in the same chart/repo. 

        Enter the path from the chart/repo root to the file or folder. [Learn More](https://docs.harness.io/article/q002wjjl4d)

        If you add multiple files and they have any identical labels, the files override in a reverse order. For example, the third file listed overrides the second and first files.

        If the file you want to use is in a separate repo, add it separately as a **Values YAML**, **Kustomize Patches**, or **OpenShift Params** manifest type.

        [Watch a video](https://youtu.be/dVk6-8tfwJc)
    width: "450"
helmWithHttp_valuesPaths:
    content: |-
        Enter the path to the Values YAML file(s) you want to use in the same chart. Enter the path from the chart root to the file or folder. [Learn More](https://docs.harness.io/article/q002wjjl4d)

        If you add multiple Values YAML files and they have any identical `name` labels, the Values YAML files override in a reverse order. For example, the third Values YAML file listed overrides the second and first Values YAML files.

        If the Values YAML file you want to use is in a separate repo, add it separately as a **Values YAML** manifest type.

        [Watch a video](https://youtu.be/dVk6-8tfwJc)
    width: "400"
osTemplateWithGit_paramsPaths:
    content: |-
        Enter the path to the Parameters file(s) you want to use in the same repo. Enter the path from the repo root to the file or folder. [Learn More](https://docs.harness.io/article/uajkpcmqjg)

        If you add multiple Parameters files and they have any identical `name` parameters, the Parameters files override in a reverse order. For example, the third Parameters file listed overrides the second and first Parameters files.

        If the Parameters file you want to use is in a separate repo, add it separately as a **OpenShift Param** manifest type.

        [Watch a video](https://youtu.be/dVk6-8tfwJc)
    width: "400"
kustomizeGit_patchesPaths:
    content: |-
        Enter the path to the Patches file(s) you want to use in the same repo. Enter the path from the repo root to the file or folder. [Learn More](https://docs.harness.io/article/98u2hvzj0t)

        If you add multiple Patches files and they have any identical labels, the Patches files override in a reverse order. For example, the third Patches file listed overrides the second and first Patches files.

        If the Patches file you want to use is in a separate repo, add it separately as a **Kustomize Patches** manifest type.

        [Watch a video](https://youtu.be/dVk6-8tfwJc)
    width: "400"
cdOverViewTitle:
    content: |-
        Deployments is where you build your CD Pipelines. [Learn More](https://docs.harness.io/article/cqgeblt4uh)

        Deployments are tracked in the **Overview** dashboard and Services are tracked in the **Services** dashboard. [Learn More](https://docs.harness.io/article/phiv0zaoex)

        The Overview dashboard provides status for deployments and workloads and an overall **Deployments Health** metric.
    width: "400"
overview_WORKLOAD:
    content: View the deployments for each Service, including their success rate. [Learn More](https://docs.harness.io/article/phiv0zaoex)
    width: "400"
overview_FAILED_DEPLOYMENT:
    content: |-
        View Pipeline deployment failures. [Learn More](https://docs.harness.io/article/phiv0zaoex)

        Click on a failed execution to see its details.
    width: "400"
overview_ACTIVE_DEPLOYMENT:
    content: |-
        View active deployments. [Learn More](https://docs.harness.io/article/phiv0zaoex)

        Click on a deployment to see its execution in detail.
    width: "400"
deploymentsText:
    content: |-
        View all of the deployments in this Project. [Learn More](https://docs.harness.io/article/phiv0zaoex)

        Click on a deployment to see its execution in detail.

        Click **Run** to run a Pipeline.

        Use **Status** to view Pipelines according to their execution status.

        Click more options (⋮) to:
        - Edit a Pipeline.
        - Pause, Abort, or Resume a paused execution.
        - Rerun a deployment.
        - Retry a failed deployment. [Learn More](https://docs.harness.io/article/z5n5llv35m)
    width: "400"
addPipeline:
    content: |-
        Create a new Pipeline. [Learn More](https://docs.harness.io/article/cqgeblt4uh)

        For quickstarts on different types of deployments, see [Quickstarts](https://docs.harness.io/category/c9j6jejsws).
    width: "400"
pipelinesPageHeading:
    content: A CD Pipeline is a series of Stages where each Stage deploys a Service to an Environment, performs an approval, or performs some other deployment-related operation. [Learn More](https://docs.harness.io/article/cqgeblt4uh)
    width: "400"
SecretsListViewdetails:
    content: View the different secret types.
    width: "400"
SecretsListViewactivity:
    content: See when the secret was last used.
    width: "400"
ActiveUsersListViewuser:
    content: |-
        View the Harness Users with access to your resources.

        Harness Role-Based Access Control (RBAC) helps you manage who has access to your Harness resources, what they can do with those resources, and in what scope they have access. [Learn More](https://docs.harness.io/article/vz5cq0nfg2)
    width: "400"
ActiveUsersListViewroleBinding:
    content: |-
        See the Role Bindings for each Users' User Group. [Learn More](https://docs.harness.io/article/dfwuvmy33m)

        Users are added to User Groups and bound to Roles using Role Bindings. 
    width: "400"
ActiveUsersListViewemail:
    content: |-
        View the email address for each User.

        A Harness User is any individual registered with Harness using a unique email address. [Learn More](https://docs.harness.io/article/hyoe7qcaz6)
    width: "400"
templatesPageHeading:
    content: |-
        Harness enables you to add Templates to create re-usable logic and Harness entities (like Steps, Stages, and Pipelines) in your Pipelines. 

        You can link these Templates in your Pipelines or share them with your teams for improved efficiency. [Learn More](https://docs.harness.io/article/6tl8zyxeol)
    width: "400"
buildEnvironment:
    content: Select the build environment for the test.
    width: "400"
frameworkVersion:
    content: Select the framework version for the test.
    width: "400"
runTestsNamespaces:
    content: A comma-separated list of the Namespace prefixes that you want to test. This field is required.
    width: "400"
CustomApproval_stepName_StepConfig:
    content: A Custom Approval step can approve or reject a stage at any point in its execution. You add a script to this step and use its results as approval and rejection criteria. [Learn More](https://docs.harness.io/article/9ulc3vrpf2)
    width: "400"
universalInputNameWithId:
    content: Harness entities and resources include a unique Id (Identifier) that is immutable once the entity is created. Ids provide a permanent way to refer to an entity and avoid issues that can arise when an entity name is changed. [Learn More](https://docs.harness.io/article/7rsydu6iq2)
    width: "400"
CustomApprovalForm_name:
    content: Enter a name for this step.
    width: "400"
CustomApprovalForm_timeout:
    content: Enter how long you want Harness to try to complete the step before failing (and initiating the stage or step [Failure Strategy](https://docs.harness.io/article/0zvnn5s1ph)).
    width: "400"
CustomApprovalForm_spec.shell:
    content: Select the script language.
    width: "400"
CustomApprovalForm_spec.source.spec.script:
    content: |-
        Enter your script. [Learn More](https://docs.harness.io/article/9ulc3vrpf2)

        The script is executed on the host of the Harness Delegate that runs the step. The script is not executed on the deployment target host(s).

        You can select one or more specific Delegates using the **Delegate Selector** setting in the step's **Advanced** settings.
    width: "400"
CustomApprovalForm_spec.retryInterval:
    content: |-
        Set how long the step should wait to run the script again if the Approval or Rejection criteria evaluate to `false`. [Learn More](https://docs.harness.io/article/9ulc3vrpf2)

        The number of times a script executes depends on the **Retry Interval**,  **Script Timeout**, and how fast the script executes.
    width: "400"
CustomApprovalForm_spec.scriptTimeout:
    content: Set how long the step should wait for the script to complete before timing out. [Learn More](https://docs.harness.io/article/9ulc3vrpf2)
    width: "400"
CustomApprovalForm_spec.outputVariables:
    content: You can output variables from the script to be used in subsequent Pipeline steps or in this step's acceptance and rejection criteria. [Learn More](https://docs.harness.io/article/9ulc3vrpf2)
    width: "400"
approvalapprovalCriteria:
    content: |-
        The **Approval Criteria** in the step determines if the stage is approved.


        When an evaluation results in a Boolean `true`, the approval criteria is met.

        You can specify criteria using **Conditions** and/or **JEXL Expression**. If you use them in combination, they both must evaluate to a Boolean `true` for the step to be approved.



        **Approval Criteria** is mandatory, but you can also set **Rejection Criteria**. [Learn More](https://docs.harness.io/article/9ulc3vrpf2)
    width: "400"
CustomApprovalForm_spec.environmentVariables:
    content: |-
        While you can simply declare a variable in your script using a Harness expression or string for its value, using **Input Variables** provides some additional benefits:

        - You can easily identify and manage the Harness expressions used in your script.
        - You can template your script.

        You can declare the variable using **Name** and **Value** in **Script Input Variables** and then reference the variable in the script just as you would any other variable: `$var_name`. [Learn More](https://docs.harness.io/article/9ulc3vrpf2)
    width: "400"
approvalrejectionCriteria:
    content: |-
        Define criteria for rejecting the approval.

        If you add rejection criteria it is used in addition to the settings in **Approval Criteria**. 

        Both **Rejection Criteria** and **Approval Criteria** must evaluate to a Boolean `true` for the step to be successful. [Learn More](https://docs.harness.io/article/9ulc3vrpf2)
    width: "400"
pipelineAdvancedSteps_delegateSelectors:
    content: |-
        Select the Delegate(s) you want to use to execute this step.

        You can select one or more Delegates for each Pipeline step.

        You only need to select one of a Delegate's Tags to select it. All Delegates with the Tag are selected. [Learn More](https://docs.harness.io/article/nnuf8yv13o)
    width: "400"
ff_flagFilters_enabledFlags:
    content: Flags that are currently toggled on.
    width: "400"
ff_flagFilters_permanentFlags:
    content: Flags you intend to stay in your systems indefinitely and that you marked as permanent when creating them. Permanent flags are never marked as stale.
    width: "400"
ff_flagFilters_recentlyAccessed:
    content: Flags that have been changed in the last 24 hours. Changes include enabling or disabling a flag, or adding new rules or targets.
    width: "400"
ff_flagFilters_activeFlags:
    content: Flags that have been evaluated in the last 7 days.
    width: "400"
ff_flagFilters_potentiallyStaleFlags:
    content: |-
        Flags are marked as potentially stale if in the past 60 days:

        - They haven't been changed or evaluated.
        - Their default rules or target rules haven’t been added to or updated.
        - They haven’t been toggled on or off.
    width: "400"
Queue_stepName_StepConfig:
    content: |-
        The Queue step controls how Harness requests your resources during a deployment. 

        You add Queue steps to multiple Pipelines and the second Pipeline/Stage execution is queued until the first Pipeline/Stage execution is completed.

        Using the Queue step, you can prevent multiple Pipeline executions from requesting the same resources at the same time. [Learn More](https://docs.harness.io/article/5n96cc7cyo)

        Queue steps can be used on different Pipelines or even multiple executions of the same Pipeline.
    width: "400"
queueStep_name:
    content: Enter a name for this step. Harness will create an Id automatically. Ids are used to refer to steps and settings. [Learn More](https://docs.harness.io/article/7rsydu6iq2)
    width: "400"
queueStep_timeout:
    content: |-
        Enter how long Harness should wait for this step to finish before failing the step and initiating the step or stage [Failure Strategy](https://docs.harness.io/article/0zvnn5s1ph-define-a-failure-strategy-on-stages-and-steps).


        This step's Failure Strategy is defined in its **Advanced** settings. This stage's Failure Strategy is defined in the stage's **Advanced** settings.
    width: "400"
queueStep_spec.key:
    content: |-
        Enter a unique key. This is the same key you will add to the Queue steps in other Pipelines.

        The key links Queue steps used in different Pipelines. [Learn More](https://docs.harness.io/article/5n96cc7cyo)
    width: "400"
queueStep_spec.scope:
    content: |-
        Select one of the following:

        - **Pipeline:** the entire Pipeline must complete before any queued Pipelines can deploy.
        - **Stage:** the current Stage must complete before any queued Pipelines can deploy.

        Queue steps can be used on different Pipelines or even multiple executions of the same Pipeline. [Learn More](https://docs.harness.io/article/5n96cc7cyo)
    width: "400"
JenkinsBuild_stepName_StepConfig:
    content: |-
        This Jenkins step enables you to perform Jenkins tasks in a Continuous Delivery (CD) stage.

        This step lets you to run Jenkins jobs and dynamically capture inputs and outputs from the jobs. [Learn More](https://docs.harness.io/article/as4dtppasg)

        Typically, CI is performed in Harness using the [Continuous Integration](https://harness.io/products/continuous-integration) module and [CI stage](https://docs.harness.io/article/3amcd8hn53), and not the CD stage.

        The Jenkins step is provided for when you are using the Harness CD module but not the Harness CI module, and lets you perform Jenkins tasks in your CD stage.
    width: "400"
JenkinsStep_name:
    content: Enter a name for this step. Harness will create an Id automatically. Ids are used to refer to steps and settings. [Learn More](https://docs.harness.io/article/7rsydu6iq2)
    width: "400"
JenkinsStep_timeout:
    content: |-
        Enter how long Harness should wait for this step to finish before failing the step and initiating the step or stage [Failure Strategy](https://docs.harness.io/article/0zvnn5s1ph).

        This step's Failure Strategy is defined in its **Advanced** settings. This stage's Failure Strategy is defined in the stage's **Advanced** settings.
    width: "400"
JenkinsStep_spec.connectorRef:
    content: Select the Jenkins server you added as a Harness Jenkins Connector. [Learn More](https://docs.harness.io/article/as4dtppasg)
    width: "400"
JenkinsStep_spec.jobName:
    content: |-
        Select the Jenkins job to execute (also called a project). 

        The list is automatically populated using the Jenkins Server you set up in **Jenkins Connector**. [Learn More](https://docs.harness.io/article/as4dtppasg)
    width: "400"
JenkinsStep_spec.jobParameter:
    content: If you are using a [parameterized build](https://wiki.jenkins.io/display/JENKINS/Parameterized+Build), when you select the job in **Job Name**, Harness will automatically populate any Job parameters from the server into **Job Parameters**. [Learn More](https://docs.harness.io/article/as4dtppasg)
    width: "400"
JenkinsStep_spec.unstableStatusAsSuccess:
    content: If this setting is enabled then **Unstable** statuses will be considered as **Success**. [Learn More](https://docs.harness.io/article/as4dtppasg)
    width: "400"
JenkinsStep_spec.captureEnvironmentVariable:
    content: If this setting is enabled then you can reference environment variables using Harness expressions. [Learn More](https://docs.harness.io/article/as4dtppasg)
    width: "400"
et_EventList_Type:
    content: Whether this event is an Exception, Log, HTTP Error, Timeout or Custom
    width: "400"
et_EventList_Description:
    content: Description for an event
    width: "400"
et_EventList_Location:
    content: Location of an event
    width: "400"
et_EventList_Count:
    content: Number of times an event appeared
    width: "400"
perspectiveReportsAndBudget:
    content: |-
        You can add Budgets, Reports, and Anomaly Detection Alerts to your Perspectives. See:

        - [Create a Budget for Your Perspective](https://docs.harness.io/article/fs4glxwq79)
        - [Share Your Cost Perspective Report](https://docs.harness.io/article/sujqj6o2k7)
        - [Detect Cloud Cost Anomalies with CCM](https://docs.harness.io/article/x0z3r0bv99)
    width: "400"
perspectivePreferences:
    content: Set preferences for the costs your Perspective displays. [Learn More](https://docs.harness.io/article/dvspc6ub0v)
    width: "400"
includeOthers:
    content: |+
        The graph displayed in a Perspective shows the top 12 costs only. Enable this setting to include the remaining costs as an **Others** item in the graph. [Learn More](https://docs.harness.io/article/dvspc6ub0v)

    width: "400"
